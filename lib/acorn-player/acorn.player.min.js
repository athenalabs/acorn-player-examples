'use strict';
(function(){var acorn;
"undefined" === typeof acorn && (acorn = {});
acorn.config = {};
_.extend(acorn.config, {version:"0.0.0", url:{base:"https://acorn.athena.ai"}, api:{version:"0.0.2"}});
acorn.config.setUrlBase = function(b) {
  acorn.config.url.base = b;
  acorn.config.url.img = "" + b + "/img";
  return acorn.config.url.api = "" + b + "/api/v" + acorn.config.api.version
};
acorn.config.setUrlBase(acorn.config.url.base);
acorn.config.img = {};
acorn.config.img.acorn = "" + acorn.config.url.img + "/acorn.png";
acorn.config.img.acorn_inverse = "" + acorn.config.url.img + "/acorn-inverse.png";
acorn.config.css = ["/build/css/acorn.player.css", "/lib/fontawesome/css/font-awesome.css"];
acorn.config.test = {};
acorn.config.test.timeout = 1E4;
var APIError, AssertionFailed, ControlNotFoundError, MissingParameterError, NotImplementedError, NotSupportedError, ShellRegistryError, TypeError, UnregisteredShellError, ValueError;
acorn.errors = {};
APIError = acorn.errors.APIError = function(b) {
  throw Error("Acorn API Error: " + b);
};
AssertionFailed = acorn.errors.AssertionFailed = function(b) {
  throw Error("Assertion failed: " + b);
};
MissingParameterError = acorn.errors.MissingParameterError = function(b, a) {
  throw Error("" + b + ": Required parameter `" + a + "` is missing.");
};
NotImplementedError = acorn.errors.NotImplementedError = function(b) {
  throw Error("" + b + " not implemented. Did you override it?");
};
NotSupportedError = acorn.errors.NotSupportedError = function(b, a) {
  throw Error("" + b + " not supported. " + (null != a ? a : ""));
};
TypeError = acorn.errors.TypeError = function(b, a) {
  throw Error("Type error: `" + b + "` is not of type " + a + ".");
};
ValueError = acorn.errors.ValueError = function(b, a) {
  throw Error("Value error: `" + b + "` " + a + ".");
};
UnregisteredShellError = acorn.errors.UnregisteredShellError = function(b) {
  throw Error("Attempt to construct unregistered shell " + b);
};
ShellRegistryError = acorn.errors.ShellRegistryError = function(b, a) {
  throw Error("Error registering shell " + b + ". " + (null != a ? a : ""));
};
ControlNotFoundError = acorn.errors.ControlNotFoundError = function(b) {
  throw Error("Control not found: " + b);
};
var __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.MediaInterface = function() {
  function b(a) {
    null == a && (a = {});
    this.setObjectFit = __bind(this.setObjectFit, this);
    this.objectFit = __bind(this.objectFit, this);
    this.setHeight = __bind(this.setHeight, this);
    this.setWidth = __bind(this.setWidth, this);
    this.height = __bind(this.height, this);
    this.width = __bind(this.width, this);
    this.setVolume = __bind(this.setVolume, this);
    this.volume = __bind(this.volume, this);
    this.duration = __bind(this.duration, this);
    this.seek = __bind(this.seek, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this.canPlay = __bind(this.canPlay, this);
    this.ended = __bind(this.ended, this);
    this.isPaused = __bind(this.isPaused, this);
    this.isPlaying = __bind(this.isPlaying, this);
    this.isReady = __bind(this.isReady, this);
    this.isIniting = __bind(this.isIniting, this);
    this.isInState = __bind(this.isInState, this);
    this.togglePlayPause = __bind(this.togglePlayPause, this);
    this.onMediaPlay = __bind(this.onMediaPlay, this);
    this.pause = __bind(this.pause, this);
    this.play = __bind(this.play, this);
    this.setMediaState = __bind(this.setMediaState, this);
    this.mediaState = __bind(this.mediaState, this);
    this.switchingMediaState = __bind(this.switchingMediaState, this);
    this.initializeMediaEvents = __bind(this.initializeMediaEvents, this);
    this.initializeMediaEvents(a)
  }
  _.extend(b.prototype, Backbone.Events);
  b.prototype.initializeMediaEvents = function(a) {
    var c = this;
    if(a.playOnReady) {
      this.on("Media:DidReady", function() {
        return c.play()
      })
    }
    this.on("Media:WillInit", function() {
      return"function" === typeof c.onMediaWillInit ? c.onMediaWillInit() : void 0
    });
    this.on("Media:Init", function() {
      return"function" === typeof c.onMediaInit ? c.onMediaInit() : void 0
    });
    this.on("Media:DidInit", function() {
      return"function" === typeof c.onMediaDidInit ? c.onMediaDidInit() : void 0
    });
    this.on("Media:WillReady", function() {
      return"function" === typeof c.onMediaWillReady ? c.onMediaWillReady() : void 0
    });
    this.on("Media:Ready", function() {
      return"function" === typeof c.onMediaReady ? c.onMediaReady() : void 0
    });
    this.on("Media:DidReady", function() {
      return"function" === typeof c.onMediaDidReady ? c.onMediaDidReady() : void 0
    });
    this.on("Media:WillPlay", function() {
      return"function" === typeof c.onMediaWillPlay ? c.onMediaWillPlay() : void 0
    });
    this.on("Media:Play", function() {
      return"function" === typeof c.onMediaPlay ? c.onMediaPlay() : void 0
    });
    this.on("Media:DidPlay", function() {
      return"function" === typeof c.onMediaDidPlay ? c.onMediaDidPlay() : void 0
    });
    this.on("Media:WillPause", function() {
      return"function" === typeof c.onMediaWillPause ? c.onMediaWillPause() : void 0
    });
    this.on("Media:Pause", function() {
      return"function" === typeof c.onMediaPause ? c.onMediaPause() : void 0
    });
    this.on("Media:DidPause", function() {
      return"function" === typeof c.onMediaDidPause ? c.onMediaDidPause() : void 0
    });
    this.on("Media:WillEnd", function() {
      return"function" === typeof c.onMediaWillEnd ? c.onMediaWillEnd() : void 0
    });
    this.on("Media:End", function() {
      return"function" === typeof c.onMediaEnd ? c.onMediaEnd() : void 0
    });
    return this.on("Media:DidEnd", function() {
      return"function" === typeof c.onMediaDidEnd ? c.onMediaDidEnd() : void 0
    })
  };
  b.prototype.mediaStates = {Init:"init", Ready:"ready", Play:"play", Pause:"pause", End:"end"};
  b.prototype.switchingMediaState = function() {
    return this._switchingMediaState || !1
  };
  b.prototype.mediaState = function() {
    return this._mediaState
  };
  b.prototype.setMediaState = function(a) {
    var c;
    (c = _.invert(this.mediaStates)[a]) || ValueError("state", "must be one of: " + _.values(this.mediaStates));
    this._switchingMediaState = !0;
    this.trigger("Media:Will" + c, this);
    this.trigger("Media:" + c, this);
    this._mediaState = a;
    this.trigger("Media:StateChange", this, a);
    this.trigger("Media:Did" + c, this);
    return this._switchingMediaState = !1
  };
  b.prototype.play = function() {
    if(!this.isPlaying()) {
      return this.setMediaState("play")
    }
  };
  b.prototype.pause = function() {
    if(this.isPlaying()) {
      return this.setMediaState("pause")
    }
  };
  b.prototype.onMediaPlay = function() {
    if(this.isInState("end")) {
      return this.seek(0)
    }
  };
  b.prototype.togglePlayPause = function() {
    return this.isInState("play") ? this.pause() : this.play()
  };
  b.prototype.isInState = function(a) {
    return this.mediaState() === a
  };
  b.prototype.isIniting = function() {
    return this.isInState("init")
  };
  b.prototype.isReady = function() {
    return this.isInState("ready")
  };
  b.prototype.isPlaying = function() {
    return this.isInState("play")
  };
  b.prototype.isPaused = function() {
    return this.isInState("pause")
  };
  b.prototype.ended = function() {
    return this.isInState("end")
  };
  b.prototype.canPlay = function() {
    return!this.isIniting()
  };
  b.prototype.seekOffset = function() {
    return 0
  };
  b.prototype.seek = function(a) {
    if(a < this.duration() && this.isInState("end")) {
      return this.setMediaState("pause")
    }
  };
  b.prototype.duration = function() {
    return Infinity
  };
  b.prototype.volume = function() {
  };
  b.prototype.setVolume = function() {
  };
  b.prototype.width = function() {
    return"100%"
  };
  b.prototype.height = function() {
    return"100%"
  };
  b.prototype.setWidth = function() {
  };
  b.prototype.setHeight = function() {
  };
  b.prototype.objectFit = function() {
    return"contain"
  };
  b.prototype.setObjectFit = function() {
  };
  return b
}();
var util, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.util = {};
util = acorn.util;
util.assert = function(b, a) {
  if(!b) {
    throw Error(a);
  }
};
util.urlRegEx = function(b) {
  return b ? RegExp("(https?:\\/\\/)?" + (null != b ? b : ".*")) : /^((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))$/
};
util.acornUrlRegEx = /^((https?:)?\/\/)?(staging[.-])?acorn.athena.ai\/(new|[a-z]{10})(\/[a-z-]*)?$/;
util.isAcornUrl = function(b) {
  return acorn.util.acornUrlRegEx.test("" + b)
};
util.acornidInUrl = function(b) {
  var a;
  return util.isAcornUrl(b) ? null != (a = acorn.util.acornUrlRegEx.exec(b)) ? a[4] : void 0 : null
};
util.isUrl = function(b) {
  return this.urlRegEx().test("" + b)
};
util.isPath = function(b) {
  return/^[A-Za-z\/.-_]+$/.test(b)
};
util.isAcornid = function(b) {
  return _.isString(b) && /^(new|[a-z]{10})$/i.test(b)
};
util.url = function() {
  var b;
  b = _.toArray(arguments).join("/");
  return"//" + acorn.config.domain + "/" + b
};
util.apiUrl = function() {
  return this.url.apply(this, ("api/v" + acorn.config.api.version).split("/").concat(_.toArray(arguments)))
};
util.imgUrl = function() {
  return this.url.apply(this, ["img"].concat(_.toArray(arguments)))
};
util.urlFix = function(b) {
  if(!b) {
    return b
  }
  /^([a-z0-9]+:)?\/\//i.test(b) || (b = "http://" + b);
  return b
};
util.iframeOptions = {frameborder:0, border:0, width:"100%", height:"100%", allowFullScreen:"true", webkitAllowFullScreen:"true", mozallowfullscreen:"true"};
util.iframe = function(b, a) {
  var c;
  c = $("<iframe>");
  _.map(this.iframeOptions, function(a, b) {
    return c.attr(b, a)
  });
  c.attr("src", b);
  null != a && c.attr("id", a);
  return c
};
util.acornInIframe = function(b) {
  var a;
  null != b.jquery && (b = b.get(0));
  return(null != (a = b.contentWindow) ? a : b.contentDocument.defaultView).acorn
};
util.property = function(b, a) {
  var c;
  c = b;
  null == a && (a = function(a) {
    return a
  });
  return function(d) {
    null != d && (c = a(d));
    return c
  }
};
util.fullscreen = function(b) {
  return $(b).fullScreen()
};
util.appendCss = function(b) {
  null == b && (b = acorn.config.css);
  _.isArray(b) || (b = [b]);
  return _.each(b, function(a) {
    var c;
    if(!$("link[rel='stylesheet'][href='" + a + "']").length) {
      c = $("<link>");
      c.attr("rel", "stylesheet");
      c.attr("href", a);
      return $("body").append(c)
    }
  })
};
util.elementInDom = function(b) {
  if(b instanceof $) {
    return _.all(b, util.elementInDom)
  }
  for(;b = null != b ? b.parentNode : void 0;) {
    if(b === document) {
      return!0
    }
  }
  return!1
};
util._scrubPercentParams = function(b) {
  _.isObject(b) || (b = {high:b});
  null == b.low && (b.low = 0);
  null == b.high && (b.high = MissingParameterError("percent conversion utility", "high"));
  null == b.bound && (b.bound = !1);
  return b
};
util.toPercent = function(b, a) {
  var c, a = util._scrubPercentParams(a);
  c = 100 * ((b - a.low) / (a.high - a.low));
  a.bound && (c = util.bound(c));
  null != a.decimalDigits && (c = Number(c.toFixed(a.decimalDigits)));
  return c
};
util.fromPercent = function(b, a) {
  var c, a = util._scrubPercentParams(a);
  a.bound && (b = util.bound(b));
  c = b / 100 * (a.high - a.low) + a.low;
  null != a.decimalDigits && (c = Number(c.toFixed(a.decimalDigits)));
  return c
};
util.bound = function(b, a) {
  var c, d, e;
  null == a && (a = {});
  d = null != (c = a.low) ? c : 0;
  c = null != (e = a.high) ? e : 100;
  !1 !== a.enforceNumber && (b = Number(b));
  return b < d ? d : b > c ? c : b
};
util.parseUrl = function(b) {
  var a, c, d, e, f;
  "" === b && ValueError("url", "should not be the empty string.");
  c = {};
  b = $.trim(b);
  /^([a-z0-9]+:)?\/\//i.test(b) || (b = "http://" + b);
  a = document.createElement("a");
  a.href = b;
  f = "protocol hostname host pathname port search hash href".split(" ");
  d = 0;
  for(e = f.length;d < e;d++) {
    b = f[d], c[b] = a[b]
  }
  "0" === c.port && (c.port = "");
  c.toString = function() {
    return c.href
  };
  c.resource = c.pathname + c.search;
  c.extension = c.pathname.split(".").pop();
  c.head = function() {
    throw Error("head not supported. Yet.");
  };
  _.each(c, function(a, d) {
    if(!/_$/.test(d) && typeof a === "string") {
      return c[d + "_"] = a.toLowerCase()
    }
  });
  return c
};
util.mouseLocationTracker = function() {
  var b, a, c, d, e, f;
  b = 0;
  e = [];
  f = {x:void 0, y:void 0, active:!1};
  a = function(a) {
    f.x = a.pageX;
    return f.y = a.pageY
  };
  c = function() {
    f.active = !0;
    return $(document).on("mousemove.mouseLocationTracker", a)
  };
  d = function() {
    f.active = !1;
    f.x = void 0;
    f.y = void 0;
    return $(document).off("mousemove.mouseLocationTracker", a)
  };
  f.subscribe = function() {
    f.active || c();
    e.push(b);
    return b++
  };
  f.unsubscribe = function(a) {
    e = _.without(e, a);
    if(0 === e.length) {
      return d()
    }
  };
  return f
}();
util.Time = function() {
  function b(a, c) {
    this.options = null != c ? c : {};
    this.timestring = __bind(this.timestring, this);
    this.seconds = __bind(this.seconds, this);
    this.time = this.constructor.timestringToSeconds(a)
  }
  b.prototype.seconds = function() {
    return this.time
  };
  b.prototype.timestring = function() {
    return this.constructor.secondsToTimestring(this.time, this.options)
  };
  b.timestringToSeconds = function(a) {
    var c, d, a = ("" + (null != a ? a : 0)).split(".");
    c = a[0];
    a = a[1];
    a = parseFloat("0." + (null != a ? a : "0"));
    c = c.split(":").reverse();
    d = _.map([0, 1, 2], function(a) {
      return parseInt(c[a], 10) || 0
    });
    return 3600 * d[2] + 60 * d[1] + d[0] + a
  };
  b.secondsToTimestring = function(a, c) {
    var d, b, f, g, h;
    null == c && (c = {});
    g = parseInt(a, 10);
    d = parseInt(g / 3600, 10);
    g -= 3600 * d;
    b = parseInt(g / 60, 10);
    g -= 60 * b;
    if(h = a % 1) {
      h = Math.round(1E3 * h) / 1E3, h = ("" + h).substr(1, 4), h = h.replace(/0+$/, "")
    }
    d = 0 === d ? "" : "" + d + ":";
    f = function(a) {
      return 10 > a ? "0" + a : "" + a
    };
    b = "" === d && !1 === c.padTime ? 0 === b ? "" : "" + b + ":" : "" + f(b) + ":";
    "" !== b && (g = f(g));
    return"" + d + b + g + (h || "")
  };
  return b
}.call(this);
util.Timer = function() {
  function b(a, c, d) {
    this.interval = a;
    this.callback = c;
    this.args = d;
    this.onTick = __bind(this.onTick, this);
    this.stopTick = __bind(this.stopTick, this);
    this.startTick = __bind(this.startTick, this);
    null == this.callback && (this.callback = function() {
    });
    null == this.args && (this.args = []);
    _.isArray(this.args) || (this.args = [this.args])
  }
  b.prototype.startTick = function() {
    this.stopTick();
    return this.intervalObject = setInterval(this.onTick, this.interval)
  };
  b.prototype.stopTick = function() {
    if(this.intervalObject) {
      return clearInterval(this.intervalObject), this.intervalObject = void 0
    }
  };
  b.prototype.onTick = function() {
    return this.callback.apply(this, this.args)
  };
  return b
}();
util.LINK_REGEX = /^https?:\/\/[-A-Za-z0-9+&@#\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\/%=~_()|]/;
util.fixObjectFit = function() {
  return $.fn.objectFit = function() {
    console.log("Object Fit currently disabled.");
    return this
  }
};
util.fixObjectFit();
$.fn.insertAt = function(b, a) {
  var c;
  c = this.children().size();
  0 > b && 0 > b && (b = Math.max(0, c + 1 + b));
  this.append(a);
  b < c && this.children().eq(b).before(this.children().last());
  return this
};
var __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.Model = function(b) {
  function a() {
    this.isNew = __bind(this.isNew, this);
    this.embedUrl = __bind(this.embedUrl, this);
    this.pageUrl = __bind(this.pageUrl, this);
    this.urlRoot = __bind(this.urlRoot, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    null == this.acornid() && this.acornid("new");
    if(null == this.shellData()) {
      return this.shellData({shellid:"acorn.EmptyShell"})
    }
  };
  a.prototype.idAttribute = "acornid";
  a.prototype.acornid = a.property("acornid");
  a.prototype.shellData = a.property("shell");
  a.prototype.owner = a.property("owner");
  a.prototype.parent = a.property("parent");
  a.prototype.created = a.property("created", {setter:!1});
  a.prototype.updated = a.property("updated", {setter:!1});
  a.bindToShellProperty = function(a, d) {
    return function(b) {
      var f, g, h;
      null != b && (f = this.get("shell") || {}, f[a] = b, this.set("shell", f));
      return null != (g = null != (h = this.get("shell")) ? h[a] : void 0) ? g : _.isFunction(d) ? d.call(this) : d
    }
  };
  a.prototype.title = a.bindToShellProperty("title", "New Acorn");
  a.prototype.description = a.bindToShellProperty("description", "");
  a.prototype.thumbnail = a.bindToShellProperty("thumbnail", function() {
    var a;
    return(null != (a = this.get("shell")) ? a.thumbnail : void 0) || acorn.config.img.acorn
  });
  a.prototype.urlRoot = function() {
    return"" + acorn.config.url.api + "/acorn"
  };
  a.prototype.pageUrl = function(a) {
    var d, b, f;
    null == a && (a = {});
    b = "";
    for(d in a) {
      f = a[d], b = b ? b + "&" : "?", b += "" + d + "=" + f
    }
    return"" + acorn.config.url.base + "/" + this.acornid() + b
  };
  a.prototype.embedUrl = function(a) {
    var d, b, f;
    null == a && (a = {});
    b = "";
    for(d in a) {
      f = a[d], b = b ? b + "&" : "?", b += "" + d + "=" + f
    }
    return"" + acorn.config.url.base + "/embed/" + this.acornid() + b
  };
  a.prototype.isNew = function() {
    return"new" === this.acornid() || a.__super__.isNew.apply(this, arguments)
  };
  a.withData = function(c) {
    if(null == c) {
      c = {acornid:"new"}
    }else {
      if(acorn.util.isAcornUrl(c)) {
        c = {acornid:acorn.util.acornidInUrl(c)}
      }else {
        if(acorn.util.isUrl(c)) {
          c = {acornid:"new", shell:acorn.shellWithLink(c).toJSON()}
        }else {
          if(util.isAcornid(c)) {
            c = {acornid:c.trim().split("/").pop()}
          }else {
            if(!util.isAcornid(c.acornid)) {
              throw Error("Invalid acorn data: " + c);
            }
          }
        }
      }
    }
    return new a(c)
  };
  a.withShellData = function(c) {
    return new a({shell:c})
  };
  return a
}.call(this, athena.lib.Model);
var acorn_;
acorn_ = function(b) {
  return acorn.Model.withData(b)
};
_.extend(acorn_, acorn);
acorn = acorn_;
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells = {};
acorn.shells.Registry = function() {
  function b() {
  }
  b.modules = {};
  b.moduleWithId = function(a) {
    b.modules[a] || acorn.errors.UnregisteredShellError(a);
    return b.modules[a]
  };
  b.registerModule = function(a) {
    var c;
    _.each(["id", "title", "icon"], function(c) {
      null == a[c] && MissingParameterError("shell registration", c);
      if(!_.isString(a[c])) {
        return TypeError(c, "str")
      }
    });
    null == a.Model && MissingParameterError("shell registration", "Model");
    _.each(acorn.shells.Shell, function(c, b) {
      if(null == a[b]) {
        return _.isFunction(c) ? a[b] = function(a) {
          function c() {
            return c.__super__.constructor.apply(this, arguments)
          }
          __extends(c, a);
          return c
        }(c) : a[b] = _.clone(c)
      }
    });
    c = ["Model", "MediaView", "RemixView"];
    _.each(c, function(c) {
      if(!_.isFunction(a[c])) {
        return TypeError(c, "class")
      }
    });
    _.each(c, function(c) {
      a[c].module = a;
      return a[c].prototype.module = a
    });
    null != b.modules[a.id] && ShellRegistryError(a.id, "Shell.id already registered.");
    return b.modules[a.id] = a
  };
  b.collectionModules = function() {
    return _.filter(b.modules, function(a) {
      return athena.lib.util.isOrDerives(a.Model, CollectionShell.Model)
    })
  };
  return b
}.call(this);
acorn.registerShellModule = acorn.shells.Registry.registerModule;
acorn.shellModuleWithId = acorn.shells.Registry.moduleWithId;
var test, _this = this;
acorn.util.test = {};
test = acorn.util.test;
test.describeShellModule = function(b, a, c) {
  var d, e, f, g;
  athena.lib.util.isStrictObject(a) || (c = a, a = {});
  e = athena.lib.util.derives;
  d = acorn.shells.Shell;
  acorn.util.assert(d, "goog.require 'acorn.shells.Shell' before calling acorn.util.test.describeShellModule");
  f = athena.lib.util.test.describeView;
  g = function(a, c) {
    return a === c || e(a, c)
  };
  return describe("" + b.id + " shell module", function() {
    var h;
    it("should contain required properties", function() {
      return _.each(["id", "title", "description", "icon"], function(a) {
        expect(b[a]).toBeDefined();
        return expect(_.isString(b[a])).toBe(true)
      })
    });
    it("should contain required Model and View classes", function() {
      return _.each(["Model", "MediaView", "RemixView"], function(a) {
        expect(b[a]).toBeDefined();
        return expect(_.isFunction(b[a])).toBe(true)
      })
    });
    h = function() {
      return{model:new b.Model(a)}
    };
    describe("" + b.id + ".Model", function() {
      var c;
      c = b.Model;
      it("should derive from athena.lib.Model", function() {
        return expect(e(c, athena.lib.Model)).toBe(true)
      });
      it("should derive from (or be) Shell.Model", function() {
        return expect(g(c, d.Model)).toBe(true)
      });
      it("should correctly assign attributes", function() {
        var d;
        d = new c(_.extend(a, {a:1, b:2}));
        expect(d.get("a")).toBe(1);
        return expect(d.get("b")).toBe(2)
      });
      it("should correctly support setting of attributes", function() {
        var d;
        d = new c(_.extend(a, {a:1, b:2}));
        d.set("a", 2);
        d.set("b", 3);
        expect(d.get("a")).toBe(2);
        return expect(d.get("b")).toBe(3)
      });
      it("should throw an exception on save/sync", function() {
        var d;
        d = new c(_.extend(a, {a:1, b:2}));
        expect(d.save).toThrow();
        return expect(d.sync).toThrow()
      });
      it("should be clonable (with deep-copies)", function() {
        var d, b;
        b = {a:5};
        d = new c(_.extend(a, {shellid:"Shell", a:{b:{c:b}}}));
        expect(d.clone().attributes.a.b.c).toEqual(b);
        expect(d.clone().attributes.a.b.c).not.toBe(b);
        d = new Backbone.Model({shellid:"Shell", a:{b:{c:b}}});
        expect(d.clone().attributes.a.b.c).toEqual(b);
        return expect(d.clone().attributes.a.b.c).toBe(b)
      });
      return it("should have a toJSONString function", function() {
        var d, b;
        expect(typeof c.prototype.toJSONString).toBe("function");
        d = new c(_.extend(a, {shellid:"Shell", a:{b:{c:{a:5}}}}));
        b = d.toJSONString();
        return expect(JSON.stringify(d.attributes)).toEqual(b)
      })
    });
    f(b.MediaView, athena.lib.View, h(), function() {
      var a;
      a = b.MediaView;
      it("should derive from athena.lib.View", function() {
        return expect(e(a, athena.lib.View)).toBe(true)
      });
      it("should derive from (or be) Shell.MediaView", function() {
        return expect(g(a, d.MediaView)).toBe(true)
      });
      it("should require `model` parameter", function() {
        var c;
        c = h();
        delete c.model;
        expect(function() {
          return new a(h())
        }).not.toThrow();
        return expect(function() {
          return new a(c)
        }).toThrow()
      });
      return acorn.util.test.describeMediaInterface(b.MediaView, h())
    });
    f(b.RemixView, athena.lib.View, h(), function() {
      var a;
      a = b.RemixView;
      it("should derive from athena.lib.View", function() {
        return expect(e(a, athena.lib.View)).toBe(true)
      });
      it("should derive from (or be) Shell.RemixView", function() {
        return expect(g(a, d.RemixView)).toBe(true)
      });
      return it("should require `model` parameter", function() {
        var c;
        c = h();
        delete c.model;
        expect(function() {
          return new a(h())
        }).not.toThrow();
        return expect(function() {
          return new a(c)
        }).toThrow()
      })
    });
    return typeof c === "function" ? c() : void 0
  })
};
test.describeMediaInterface = function(b, a, c) {
  var d, e;
  athena.lib.util.isStrictObject(a) || (c = a, a = {});
  test = athena.lib.util.test;
  d = acorn.MediaInterface;
  e = function(a) {
    return a.replace(/^[a-z]/i, function(a) {
      return a.toUpperCase()
    })
  };
  describe("" + b.name + " - media interface", function() {
    var c;
    describe("should implement media interface", function() {
      return _.each(d.prototype, function(a, c) {
        var d;
        d = typeof a;
        return it("" + b.name + "::" + c + " should exist (" + d + ")", function() {
          expect(b.prototype[c]).toBeDefined();
          return expect(typeof b.prototype[c]).toBe(d)
        })
      })
    });
    c = function(c) {
      var d;
      d = e(c);
      return describe("" + b.name + " mediaState " + c, function() {
        it("should be a valid state", function() {
          return expect(typeof b.prototype.mediaStates[c]).toBeDefined()
        });
        it("should trigger Will" + d + ", " + d + ", change, then Did" + d, function() {
          var e, f;
          e = 0;
          f = new b(_.extend(a, {playOnReady:false}));
          typeof f.render === "function" && f.render();
          if(c !== "init") {
            f.setMediaState("init");
            c !== "ready" && f.setMediaState("ready")
          }
          f.on("Media:Will" + d, function() {
            c !== "init" && expect(f.mediaState()).not.toBe(c);
            expect(e).toBe(0);
            return e = 1
          });
          f.on("Media:" + d, function() {
            c !== "init" && expect(f.mediaState()).not.toBe(c);
            expect(e).toBe(1);
            return e = 2
          });
          f.on("Media:Did" + d, function() {
            expect(f.mediaState()).toBe(c);
            expect(e).toBe(2);
            return e = 3
          });
          expect(e).toBe(0);
          f.setMediaState(c);
          expect(e).toBe(3);
          f.off("Media:Will" + d);
          f.off("Media:" + d);
          f.off("Media:Did" + d);
          f.pause();
          return typeof f.destroy === "function" ? f.destroy() : void 0
        });
        it("should call defined on(Will,,Did)Media" + d + " in order", function() {
          var e, f;
          e = 0;
          f = new b(_.extend(a, {playOnReady:false}));
          typeof f.render === "function" && f.render();
          if(c !== "init") {
            f.setMediaState("init");
            c !== "ready" && f.setMediaState("ready")
          }
          f["onMediaWill" + d] = function() {
            c !== "init" && expect(f.mediaState()).not.toBe(c);
            expect(e).toBe(0);
            return e = 1
          };
          f["onMedia" + d] = function() {
            c !== "init" && expect(f.mediaState()).not.toBe(c);
            expect(e).toBe(1);
            return e = 2
          };
          f["onMediaDid" + d] = function() {
            expect(f.mediaState()).toBe(c);
            expect(e).toBe(2);
            return e = 3
          };
          expect(e).toBe(0);
          f.setMediaState(c);
          expect(e).toBe(3);
          f["onMediaWill" + d] = function() {
          };
          f["onMedia" + d] = function() {
          };
          f["onMediaDid" + d] = function() {
          };
          f.pause();
          return typeof f.destroy === "function" ? f.destroy() : void 0
        });
        return it("" + b.name + "::isInState(" + c + ") should return true", function() {
          var d;
          d = new b(_.extend(a, {playOnReady:false}));
          c !== "init" && c !== "ready" && expect(d.isInState(c)).not.toBe(true);
          d.setMediaState(c);
          expect(d.isInState(c)).toBe(true);
          d.pause();
          return typeof d.destroy === "function" ? d.destroy() : void 0
        })
      })
    };
    c("init");
    c("ready");
    c("play");
    c("pause");
    c("end");
    c = function(a, c) {
      return describe("" + b.name + "::" + a, function() {
        it("should be a function", function() {
          return expect(typeof b.prototype[a]).toBe("function")
        });
        return typeof c === "function" ? c() : void 0
      })
    };
    c("isReady", function() {
      return it("should call isInState `ready` ", function() {
        var c;
        c = new b(a);
        spyOn(c, "isInState");
        c.isReady();
        return expect(c.isInState).toHaveBeenCalledWith("ready")
      })
    });
    c("isPlaying", function() {
      return it("should call isInState `play` ", function() {
        var c;
        c = new b(a);
        spyOn(c, "isInState");
        c.isPlaying();
        return expect(c.isInState).toHaveBeenCalledWith("play")
      })
    });
    c("isPaused", function() {
      return it("should call isInState `pause` ", function() {
        var c;
        c = new b(a);
        spyOn(c, "isInState");
        c.isPaused();
        return expect(c.isInState).toHaveBeenCalledWith("pause")
      })
    });
    c("ended", function() {
      return it("should call isInState `end` ", function() {
        var c;
        c = new b(a);
        spyOn(c, "isInState");
        c.ended();
        return expect(c.isInState).toHaveBeenCalledWith("end")
      })
    });
    c("play", function() {
      return it("should trigger setMediaState `play`", function() {
        var c;
        c = new b(a);
        c.setMediaState("init");
        c.setMediaState("ready");
        spyOn(c, "setMediaState");
        c.play();
        return expect(c.setMediaState).toHaveBeenCalledWith("play")
      })
    });
    c("pause", function() {
      return it("should trigger setMediaState `pause`", function() {
        var c;
        c = new b(a);
        c.setMediaState("init");
        c.setMediaState("ready");
        c.setMediaState("play");
        spyOn(c, "setMediaState");
        c.pause();
        return expect(c.setMediaState).toHaveBeenCalledWith("pause")
      })
    });
    c("seek");
    c("seekOffset");
    c("seek");
    c("duration");
    c("volume");
    c("setVolume");
    c("width");
    c("height");
    c("setWidth");
    c("setHeight");
    c("objectFit");
    return c("setObjectFit")
  });
  return"function" === typeof c ? c() : void 0
};
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player = {};
acorn.player.ClipView = function(b) {
  function a() {
    this.reposition = __bind(this.reposition, this);
    this.setActive = __bind(this.setActive, this);
    this.isActive = __bind(this.isActive, this);
    this.values = __bind(this.values, this);
    this.hideNote = __bind(this.hideNote, this);
    this.showNote = __bind(this.showNote, this);
    this.popupNote = __bind(this.popupNote, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("clip-view");
  a.prototype.template = _.template('<div class="clip-note tooltip-inner"><%= title %></div>');
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {click:function(a) {
      c.trigger("Clip:Click", c);
      a.preventDefault();
      return!1
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {min:0, max:Infinity, toolbarButtons:[]})
  };
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    this.toolbarView = new athena.lib.ToolbarView({eventhub:this.eventhub, buttons:this.options.toolbarButtons, extraClasses:["btn-group"]});
    return this.toolbarView.on("all", function(a) {
      if(/Toolbar:Click:/.test(a)) {
        return c.trigger("Clip:" + a, c)
      }
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template(this.model));
    this.$el.append(this.toolbarView.render().el);
    this.reposition();
    return this
  };
  a.prototype.popupNote = function() {
    var a = this;
    this.$el.addClass("popup-note");
    _.delay(function() {
      return a.$el.removeClass("popup-note")
    }, 3E3);
    return this.reposition()
  };
  a.prototype.showNote = function() {
    this.$el.addClass("show-note");
    return this.reposition()
  };
  a.prototype.hideNote = function() {
    return this.$el.removeClass("show-note")
  };
  a.prototype.values = function(a) {
    if(null != (null != a ? a.start : void 0)) {
      this.model.timeStart = a.start
    }
    if(null != (null != a ? a.end : void 0)) {
      this.model.timeEnd = a.end
    }
    this.rendering && this.reposition();
    return{start:this.model.timeStart, end:this.model.timeEnd}
  };
  a.prototype.isActive = function() {
    return this.$el.hasClass("active")
  };
  a.prototype.setActive = function(a) {
    null == a && (a = !this.isActive());
    return a ? (this.isActive() || this.popupNote(), this.$el.addClass("active")) : this.$el.removeClass("active")
  };
  a.prototype.reposition = function() {
    var a, d, b = this;
    a = function(a) {
      return{low:b.options.min, high:b.options.max, bound:!0, decimalDigits:a}
    };
    d = util.toPercent(this.model.timeStart, a());
    a = util.toPercent(this.model.timeEnd, a());
    this.$el.css("left", d + "%");
    this.$el.css("right", 100 - a + "%");
    return this.toolbarView.$el.css("bottom", Math.max(this.$(".clip-note").height() + 15) + 14)
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.ClipGroupView = function(b) {
  function a() {
    this._repositionClips = __bind(this._repositionClips, this);
    this._rowsForClips = __bind(this._rowsForClips, this);
    this._rowForClip = __bind(this._rowForClip, this);
    this._sortClips = __bind(this._sortClips, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("clip-group-view");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.clips = this.options.clips
  };
  a.prototype.render = function() {
    var c = this;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    _.each(this.clips, function(a) {
      return c.$el.append(a.render().el)
    });
    _.defer(this._repositionClips);
    return this
  };
  a.prototype._sortClips = function() {
    return this.clips.sort(function(a, d) {
      return a.values().start - d.values().start
    })
  };
  a.prototype._rowForClip = function(a, d) {
    var b, f;
    f = d.values().start;
    return(b = _.find(a, function(a) {
      return _.last(a).values().end <= f
    })) && _.indexOf(a, b)
  };
  a.prototype._rowsForClips = function(a) {
    var d, b = this;
    d = [];
    _.each(a, function(a) {
      var c;
      c = b._rowForClip(d, a);
      0 <= c || (c = d.length, d.push([]));
      return d[c].push(a)
    });
    return d
  };
  a.prototype._repositionClips = function() {
    var a, d, b, f, g;
    this._sortClips();
    a = (Number(null != (b = this.clips[0]) ? b.$el.height() : void 0) || 7) + 2;
    b = this._rowsForClips(this.clips);
    d = f = 0;
    for(g = b.length;0 <= g ? f <= g : f >= g;d = 0 <= g ? ++f : --f) {
      _.each(b[d], function(b) {
        return b.$el.css("bottom", d * a)
      })
    }
    return this.$el.css("height", b.length * a - 1)
  };
  return a
}(athena.lib.View);
var AcornControlView, ControlToggleView, ControlToolbarView, ControlView, EditControlView, ElapsedTimeControlView, FullscreenControlView, GridControlView, IconControlView, ImageControlView, NextControlView, PauseControlView, PlayControlView, PlayPauseControlToggleView, PreviousControlView, RandomControlView, SourcesControlView, TextControlView, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.controls = {};
ControlToolbarView = function(b) {
  function a() {
    this.initializeButtons = __bind(this.initializeButtons, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("control-toolbar-view");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.initializeButtons()
  };
  a.prototype.initializeButtons = function() {
    var c = this;
    this.buttons = _.map(this.buttons, function(a) {
      return _.isString(a) ? ControlView.withId(a) : a
    });
    _.each(this.buttons, function(c) {
      if(!(c instanceof a || c instanceof ControlView)) {
        return TypeError("button", "ControlToolbarView or ControlView")
      }
    });
    return _.each(this.buttons, function(a) {
      return a.on("all", function() {
        return c.trigger.apply(c, arguments)
      })
    })
  };
  return a
}(athena.lib.ToolbarView);
ControlToggleView = function(b) {
  function a() {
    this.refreshToggle = __bind(this.refreshToggle, this);
    this.activeControl = __bind(this.activeControl, this);
    this.render = __bind(this.render, this);
    this.initializeButtons = __bind(this.initializeButtons, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("control-toggle-view");
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    null == this.model && (this.model = new Backbone.Model);
    return this.listenTo(this.model, "change", function() {
      return c.refreshToggle()
    })
  };
  a.prototype.initializeButtons = function() {
    var a, d, b, f = this;
    a = this.buttons;
    this.buttons = {};
    _.each(a, function(a, c) {
      _.isString(c) || (c = a);
      _.isString(c) || TypeError("buttons", "array of strings or object");
      return f.buttons[c] = a
    });
    b = this.buttons;
    for(d in b) {
      a = b[d], this.buttons[d] = _.isString(a) ? ControlView.withId(a) : a
    }
    _.each(this.buttons, function(a) {
      if(!(a instanceof ControlToolbarView || a instanceof ControlView)) {
        return TypeError("button", "ControlToolbarView or ControlView")
      }
    });
    return _.each(this.buttons, function(a) {
      return a.on("all", function() {
        return f.trigger.apply(f, arguments)
      })
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.refreshToggle();
    return this
  };
  a.prototype.activeControl = function() {
    var a;
    return null != (a = this.buttons[this.model.get("activeControl")]) ? a : _.values(this.buttons)[0]
  };
  a.prototype.refreshToggle = function() {
    var a, d, b;
    b = this.buttons;
    for(d in b) {
      a = b[d], a.$el.addClass("hidden")
    }
    return this.activeControl().$el.removeClass("hidden")
  };
  return a
}(ControlToolbarView);
PlayPauseControlToggleView = function(b) {
  function a() {
    this.activeControl = __bind(this.activeControl, this);
    this.initializeButtons = __bind(this.initializeButtons, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("play-pause-control-toggle-view");
  a.prototype.initializeButtons = function() {
    var a = this;
    this.buttons = {Play:ControlView.withId("Play"), Pause:ControlView.withId("Pause")};
    return _.each(this.buttons, function(d) {
      return d.on("all", function() {
        return a.trigger.apply(a, arguments)
      })
    })
  };
  a.prototype.activeControl = function() {
    var a, d;
    return this.buttons[(null != (d = "function" === typeof(a = this.model).isPlaying ? a.isPlaying() : void 0) ? d : this.model.get("playing")) ? "Pause" : "Play"]
  };
  return a
}(ControlToggleView);
ControlView = function(b) {
  function a() {
    this._clearTimeouts = __bind(this._clearTimeouts, this);
    this._onMouseleave = __bind(this._onMouseleave, this);
    this._onMouseenter = __bind(this._onMouseenter, this);
    this.hideTooltip = __bind(this.hideTooltip, this);
    this.showTooltip = __bind(this.showTooltip, this);
    this.render = __bind(this.render, this);
    this.events = __bind(this.events, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"Control"
  };
  a.prototype.className = a.classNameExtend("control-view");
  a.prototype.tooltip = function() {
  };
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {click:function() {
      return c.trigger("" + c.controlName() + ":Click", c)
    }, mouseenter:this._onMouseenter, mouseleave:this._onMouseleave})
  };
  a.prototype.render = function() {
    var c;
    a.__super__.render.apply(this, arguments);
    if(c = this.tooltip()) {
      c.trigger = "manual", this.$el.tooltip(c), this.hasTooltip = !0, this.showingTooltip = !1
    }
    return this
  };
  a.prototype.showTooltip = function() {
    if(this.hasTooltip && !this.showingTooltip) {
      return this.showingTooltip = !0, this.$el.tooltip("show")
    }
  };
  a.prototype.hideTooltip = function() {
    if(this.hasTooltip) {
      return this.showingTooltip = !1, this.$el.tooltip("hide")
    }
  };
  a.prototype._onMouseenter = function() {
    var a, d, b, f;
    this._clearTimeouts();
    a = (null != (d = this.tooltip()) ? null != (b = d.delay) ? b.show : void 0 : void 0) || (null != (f = this.tooltip()) ? f.delay : void 0);
    0 < a || (a = 0);
    return this._showTooltip = setTimeout(this.showTooltip, a)
  };
  a.prototype._onMouseleave = function() {
    var a, d, b, f;
    this._clearTimeouts();
    a = (null != (d = this.tooltip()) ? null != (b = d.delay) ? b.hide : void 0 : void 0) || (null != (f = this.tooltip()) ? f.delay : void 0);
    0 < a || (a = 0);
    return this._hideTooltip = setTimeout(this.hideTooltip, a)
  };
  a.prototype._clearTimeouts = function() {
    clearTimeout(this._showTooltip);
    return clearTimeout(this._hideTooltip)
  };
  a.withId = function(c) {
    var d;
    d = acorn.player.controls["" + c + "ControlView"];
    athena.lib.util.derives(d, a) || ControlNotFoundError(c);
    return new d
  };
  return a
}.call(this, athena.lib.View);
IconControlView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"IconControl"
  };
  a.prototype.className = a.classNameExtend("icon-control-view");
  a.prototype.initialize = function() {
    var c;
    a.__super__.initialize.apply(this, arguments);
    return this.icon = null != (c = this.options.icon) ? c : "play"
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.html($("<i>").addClass("icon-" + this.icon));
    return this
  };
  a.withIcon = function(c) {
    _.isString(c) || TypeError("icon", "string");
    return new a({icon:c})
  };
  return a
}.call(this, ControlView);
FullscreenControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"FullscreenControl"
  };
  a.prototype.className = a.classNameExtend("fullscreen");
  a.prototype.tooltip = function() {
    return{title:"Fullscreen", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"fullscreen"})
  };
  return a
}(IconControlView);
EditControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"EditControl"
  };
  a.prototype.className = a.classNameExtend("edit");
  a.prototype.tooltip = function() {
    return{title:"Edit", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"edit"})
  };
  return a
}(IconControlView);
SourcesControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"SourcesControl"
  };
  a.prototype.className = a.classNameExtend("sources");
  a.prototype.tooltip = function() {
    return{title:"Sources", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"globe"})
  };
  return a
}(IconControlView);
PreviousControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"PreviousControl"
  };
  a.prototype.className = a.classNameExtend("previous");
  a.prototype.tooltip = function() {
    return{title:"Previous", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"arrow-left"})
  };
  return a
}(IconControlView);
NextControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"NextControl"
  };
  a.prototype.className = a.classNameExtend("next");
  a.prototype.tooltip = function() {
    return{title:"Next", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"arrow-right"})
  };
  return a
}(IconControlView);
GridControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"GridControl"
  };
  a.prototype.className = a.classNameExtend("grid");
  a.prototype.tooltip = function() {
    return{title:"Grid", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"th"})
  };
  return a
}(IconControlView);
PlayControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"PlayControl"
  };
  a.prototype.className = a.classNameExtend("play");
  a.prototype.tooltip = function() {
    return{title:"Play", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"play"})
  };
  return a
}(IconControlView);
PauseControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"PauseControl"
  };
  a.prototype.className = a.classNameExtend("pause");
  a.prototype.tooltip = function() {
    return{title:"Pause", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"pause"})
  };
  return a
}(IconControlView);
RandomControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"RandomControl"
  };
  a.prototype.className = a.classNameExtend("random");
  a.prototype.tooltip = function() {
    return{title:"Random", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {icon:"magic"})
  };
  return a
}(IconControlView);
ImageControlView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"ImageControl"
  };
  a.prototype.className = a.classNameExtend("image-control-view");
  a.prototype.initialize = function() {
    var c;
    a.__super__.initialize.apply(this, arguments);
    return this.url = null != (c = this.options.url) ? c : acorn.config.img.acorn_inverse
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.html($("<img>").attr("src", this.url));
    return this
  };
  a.withUrl = function(c) {
    !acorn.util.isUrl(c) && !acorn.util.isPath(c) && TypeError(c, "string url");
    return new a({url:c})
  };
  return a
}.call(this, ControlView);
AcornControlView = function(b) {
  function a() {
    this.defaults = __bind(this.defaults, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"AcornControl"
  };
  a.prototype.className = a.classNameExtend("acorn");
  a.prototype.tooltip = function() {
    return{title:"Website", delay:{show:300}}
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {image:acorn.config.img.acorn_inverse})
  };
  return a
}(ImageControlView);
TextControlView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"TextControlView"
  };
  a.prototype.tooltip = function() {
    return{title:this.model.get("tooltip"), delay:{show:300}}
  };
  a.prototype.className = a.classNameExtend("text-control-view");
  a.prototype.template = _.template("<span><%= text %></span>");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.listenTo(this.model, "change", this.softRender)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template(this.model.attributes));
    return this
  };
  return a
}(ControlView);
ElapsedTimeControlView = function(b) {
  function a() {
    this._onKeyupSeekField = __bind(this._onKeyupSeekField, this);
    this._onBlurSeekField = __bind(this._onBlurSeekField, this);
    this._seek = __bind(this._seek, this);
    this.hideSeekField = __bind(this.hideSeekField, this);
    this.showSeekField = __bind(this.showSeekField, this);
    this.refreshValues = __bind(this.refreshValues, this);
    this.render = __bind(this.render, this);
    this.formatTime = __bind(this.formatTime, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    this.tooltip = __bind(this.tooltip, this);
    this.controlName = __bind(this.controlName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.controlName = function() {
    return"ElapsedTimeControl"
  };
  a.prototype.tooltip = function() {
    return{title:"Elapsed Time", delay:{show:300}}
  };
  a.prototype.className = a.classNameExtend("elapsed-time-control-view");
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"click .elapsed-value":this.showSeekField, "blur input.seek-field":this._onBlurSeekField, "keyup input.seek-field":this._onKeyupSeekField})
  };
  a.prototype.template = _.template('<div>\n  <span class="elapsed">\n    <span class="elapsed-value"></span>\n    <input placeholder="seek" class="seek-field">\n  </span> /\n  <span class="total"></span>\n</div>');
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    null == this.model && (this.model = new Backbone.Model);
    return this.listenTo(this.model, "change", function() {
      return c.refreshValues()
    })
  };
  a.prototype.formatTime = function(a) {
    if(Infinity === a) {
      return"\u221e"
    }
    0 > a && (a = 0);
    a = acorn.util.Time.secondsToTimestring(a);
    return a = a.split(".")[0]
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template());
    this.refreshValues();
    return this
  };
  a.prototype.refreshValues = function() {
    this.$(".elapsed-value").first().text(this.formatTime(this.model.get("elapsed")));
    return this.$(".total").first().text(this.formatTime(this.model.get("total")))
  };
  a.prototype.showSeekField = function() {
    this.$el.addClass("active");
    return this.$("input").first().focus()
  };
  a.prototype.hideSeekField = function() {
    this.$el.removeClass("active");
    return this.$("input").first().val("")
  };
  a.prototype._seek = function() {
    var a;
    a = this.$("input").first().val();
    0 <= parseFloat(a) && (a = acorn.util.Time.timestringToSeconds(a), this.trigger("ElapsedTimeControl:Seek", a));
    return this.hideSeekField()
  };
  a.prototype._onBlurSeekField = function() {
    return this._seek()
  };
  a.prototype._onKeyupSeekField = function(a) {
    switch(a.keyCode) {
      case athena.lib.util.keys.ENTER:
        return this._seek();
      case athena.lib.util.keys.ESCAPE:
        return this.hideSeekField()
    }
  };
  return a
}(ControlView);
acorn.player.controls.ControlToolbarView = ControlToolbarView;
acorn.player.controls.ControlToggleView = ControlToggleView;
acorn.player.controls.PlayPauseControlToggleView = PlayPauseControlToggleView;
acorn.player.controls.ControlView = ControlView;
acorn.player.controls.IconControlView = IconControlView;
acorn.player.controls.EditControlView = EditControlView;
acorn.player.controls.SourcesControlView = SourcesControlView;
acorn.player.controls.FullscreenControlView = FullscreenControlView;
acorn.player.controls.NextControlView = NextControlView;
acorn.player.controls.PreviousControlView = PreviousControlView;
acorn.player.controls.GridControlView = GridControlView;
acorn.player.controls.PlayControlView = PlayControlView;
acorn.player.controls.PauseControlView = PauseControlView;
acorn.player.controls.RandomControlView = RandomControlView;
acorn.player.controls.ImageControlView = ImageControlView;
acorn.player.controls.AcornControlView = AcornControlView;
acorn.player.controls.ElapsedTimeControlView = ElapsedTimeControlView;
acorn.player.controls.TextControlView = TextControlView;
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.CycleButtonView = function(b) {
  function a() {
    this._onChangeInput = __bind(this._onChangeInput, this);
    this._onClickButton = __bind(this._onClickButton, this);
    this._change = __bind(this._change, this);
    this.currentState = __bind(this.currentState, this);
    this.showView = __bind(this.showView, this);
    this._inputButtonWithData = __bind(this._inputButtonWithData, this);
    this._staticButtonWithData = __bind(this._staticButtonWithData, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("cycle-button-view");
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"click button":this._onClickButton, "change input":this._onChangeInput, "blur input":this._onChangeInput})
  };
  a.prototype.staticButtonTemplate = _.template('<div class="input-prepend input-append cycle-button static-button\n    cycle-index-<%= index %>">\n  <button class="btn btn-small" type="button"><%= buttonName %></button>\n  <span class="add-on static-value"><%= value %></span>\n</div>');
  a.prototype.inputButtonTemplate = _.template('<div class="input-prepend cycle-button input-button\n    cycle-index-<%= index %>">\n  <button class="btn btn-small" type="button"><%= buttonName %></button>\n  <input size="16" type="text">\n</div>');
  a.prototype.initialize = function() {
    var c, d;
    a.__super__.initialize.apply(this, arguments);
    this.buttonName = null != (c = this.options.buttonName) ? c : "";
    return this.data = null != (d = this.options.data) ? d : MissingParameterError("CycleButton", "data")
  };
  a.prototype.render = function() {
    var c, d, b, f, g, h;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.views = [];
    b = f = 0;
    for(g = this.data.length;0 <= g ? f < g : f > g;b = 0 <= g ? ++f : --f) {
      d = this.data[b];
      a: {
        switch(null != d ? d.type : void 0) {
          case "static":
            c = this._staticButtonWithData;
            break a;
          case "input":
            c = this._inputButtonWithData;
            break a
        }
        c = void 0
      }
      null == c && ValueError("data", "invalid type for data element " + b);
      c = $(c(_.defaults({index:b++, buttonName:this.buttonName}, d)));
      this.views.push(c);
      this.$el.append(c)
    }
    this.showView(null != (h = this.options.initialView) ? h : 0, !0);
    return this
  };
  a.prototype._staticButtonWithData = function(a) {
    return this.staticButtonTemplate(a)
  };
  a.prototype._inputButtonWithData = function(a) {
    var d, b;
    d = $(this.inputButtonTemplate(a));
    d.find("input").val(null != (b = a.value) ? b : "");
    return d
  };
  a.prototype.showView = function(a, d) {
    var b, f, g, h;
    h = this.views;
    f = 0;
    for(g = h.length;f < g;f++) {
      b = h[f], b.addClass("hidden")
    }
    a %= this.views.length;
    this.currentIndex = 0 <= a ? a : a + this.views.length;
    b = this.views[this.currentIndex].removeClass("hidden");
    d || (b.find("input").select(), this._lastInputValue = b.find("input").val());
    this._change("view");
    return b
  };
  a.prototype.currentState = function() {
    var a, d, b;
    a = this.data[this.currentIndex];
    b = this.views[this.currentIndex];
    a: {
      switch(a.type) {
        case "static":
          d = a.value;
          break a;
        case "input":
          d = b.find("input").val();
          break a
      }
      d = void 0
    }
    return{view:b, name:a.name, value:d}
  };
  a.prototype._change = function(a) {
    switch(a) {
      case "view":
        this.trigger("CycleButtonView:ViewDidChange", this.currentState());
        break;
      case "input":
        this.trigger("CycleButtonView:InputValueDidChange", this.currentState())
    }
    return this.trigger("CycleButtonView:ValueDidChange", this.currentState())
  };
  a.prototype._onClickButton = function() {
    return this.showView(this.currentIndex + 1)
  };
  a.prototype._onChangeInput = function() {
    var a, d, b, f;
    a = this.views[this.currentIndex].find("input");
    f = a.val();
    d = this.data[this.currentIndex].validate;
    _.isFunction(d) && (b = d(f));
    return null != b ? (a.val(b), this._lastInputValue = b, this._change("input")) : a.val(this._lastInputValue)
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.DropdownView = function(b) {
  function a() {
    this.itemWithId = __bind(this.itemWithId, this);
    this.disabled = __bind(this.disabled, this);
    this.selected = __bind(this.selected, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("dropdown-view");
  a.prototype.template = _.template('<button class="btn dropdown-toggle" data-toggle="dropdown" href="#">\n  <% if (selected.icon) { %>\n    <i class="icon-<%= selected.icon.replace(/^icon-/, \'\') %>"></i>\n  <% } %>\n  <span class="dropdown-selected">\n    <%= selected.name || selected.id %>\n  </span>\n  <span class="caret"></span>\n</button>\n<ul class="dropdown-menu pull-right">\n  <% _.each(items, function(item) { %>\n    <li><a class="dropdown-link" dropdown-id="<%= item.id %>" href="#">\n      <% if (item.icon) { %>\n        <i class="icon-<%= item.icon.replace(/^icon-/, \'\') %>"></i>\n      <% } %>\n      <%= item.name || item.id %>\n      <% if (item.id == selected.id) { %>\n        <i class="icon-ok"></i>\n      <% } %>\n    </a></li>\n  <% }) %>\n</ul>');
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click a.dropdown-link":function(a) {
      c.selected($(a.target).attr("dropdown-id"));
      return a.preventDefault()
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {disabled:!1})
  };
  a.prototype.initialize = function() {
    var c;
    a.__super__.initialize.apply(this, arguments);
    0 < this.options.items.length || ValueError("options.items", "must have at least one item");
    this.disabled(this.options.disabled);
    this.items = _.map(this.options.items, this.formatItem);
    return this._selected = null != (c = this.options.selected) ? c : this.items[0].id
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template({selected:this.itemWithId(this.selected()), items:this.items}));
    this._disabled && (this.$(".dropdown-toggle").first().attr("disabled", "disabled"), this.$(".dropdown-toggle").first().addClass("btn-disabled"));
    return this
  };
  a.prototype.selected = function(a) {
    var d;
    null != a && (a = ("" + a).trim(), this.itemWithId(a) || ValueError(a, "not in items"), this._selected = a, this.softRender(), this.trigger("Dropdown:Selected", this, this._selected));
    return null != (d = this._selected) ? d : this.items[0]
  };
  a.prototype.disabled = function(a) {
    null != a && (this._disabled = a, this.softRender());
    return this._disabled
  };
  a.prototype.itemWithId = function(a) {
    return _.find(this.items, function(d) {
      return d.id === a
    }) || {id:a, text:a}
  };
  a.prototype.formatItem = function(a) {
    return _.isString(a) ? {id:a} : a
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.EditableClipView = function(b) {
  function a() {
    this.clipping = __bind(this.clipping, this);
    this.save = __bind(this.save, this);
    this.cancel = __bind(this.cancel, this);
    this.render = __bind(this.render, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("editable-clip-view");
  a.prototype.template = _.template('<textarea class="clip-note tooltip-inner"><%= title %></textarea>');
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"focus textarea":function() {
      c.toolbarView.$("#Edit").hide();
      return c.toolbarView.$("#Edit-Save").show()
    }, "blur textarea":function() {
      return c.save()
    }, "keydown textarea":function() {
      return c.setActive(!0)
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {toolbarButtons:[{id:"Clip", icon:"icon-resize-horizontal", tooltip:"Clip Time", className:"btn-small btn-inverse"}, {id:"Clip-Save", icon:"icon-ok", tooltip:"Save New Time", className:"btn-small btn-success"}, {id:"Edit", icon:"icon-comment", tooltip:"Edit Note", className:"btn-small btn-inverse"}, {id:"Edit-Save", icon:"icon-ok", tooltip:"Save Note", className:"btn-small btn-success"}, {id:"Delete", icon:"icon-trash", tooltip:"Delete Highlight", 
    className:"btn-small btn-inverse"}]})
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.toolbarView.$("#Clip-Save").hide();
    this.toolbarView.$("#Edit-Save").hide();
    return this
  };
  a.prototype.cancel = function() {
    this.$("textarea").first().val(this.model.title);
    this.toolbarView.$("#Edit").show();
    return this.toolbarView.$("#Edit-Save").hide()
  };
  a.prototype.save = function() {
    this.model.title = this.$("textarea").first().val().trim();
    this.toolbarView.$("#Edit").show();
    return this.toolbarView.$("#Edit-Save").hide()
  };
  a.prototype.clipping = function(a) {
    if(a) {
      return this.$el.addClass("editing"), this.toolbarView.$("#Clip").hide(), this.toolbarView.$("#Clip-Save").show()
    }
    this.$el.removeClass("editing");
    this.toolbarView.$("#Clip").show();
    return this.toolbarView.$("#Clip-Save").hide()
  };
  return a
}(acorn.player.ClipView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.MediaPlayerView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  _.extend(a.prototype, acorn.MediaInterface.prototype);
  a.prototype.className = a.classNameExtend("media-player-view");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.initializeMediaEvents(this.options);
    return this.setMediaState("init")
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append("<embed src='" + this.model.get("link") + "'/>");
    return this
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.MouseTrackingView = function(b) {
  function a() {
    this._percentContainerMouseDisplacement = __bind(this._percentContainerMouseDisplacement, this);
    this._percentElementMouseDisplacement = __bind(this._percentElementMouseDisplacement, this);
    this._percentMouseDisplacement = __bind(this._percentMouseDisplacement, this);
    this._mouseDisplacement = __bind(this._mouseDisplacement, this);
    this._mouseOffsetFromElement = __bind(this._mouseOffsetFromElement, this);
    this._mouseInElementBox = __bind(this._mouseInElementBox, this);
    this._mouseElementPercentOfContainer = __bind(this._mouseElementPercentOfContainer, this);
    this._mouseElementContainerDimensions = __bind(this._mouseElementContainerDimensions, this);
    this._mouseElementDimensions = __bind(this._mouseElementDimensions, this);
    this._mouseElementContainer = __bind(this._mouseElementContainer, this);
    this._mouseElement = __bind(this._mouseElement, this);
    this._mousedownTarget = __bind(this._mousedownTarget, this);
    this._onMouseDidMouseleave = __bind(this._onMouseDidMouseleave, this);
    this._onMouseDidMouseenter = __bind(this._onMouseDidMouseenter, this);
    this._onMouseDidClick = __bind(this._onMouseDidClick, this);
    this._onMouseDidMouseup = __bind(this._onMouseDidMouseup, this);
    this._onMouseDidStop = __bind(this._onMouseDidStop, this);
    this._onMouseDidDrag = __bind(this._onMouseDidDrag, this);
    this._onMouseDidStart = __bind(this._onMouseDidStart, this);
    this._onMouseDidMousedown = __bind(this._onMouseDidMousedown, this);
    this._mouseMinimumDelayMet = __bind(this._mouseMinimumDelayMet, this);
    this._mouseMinimumDistanceMet = __bind(this._mouseMinimumDistanceMet, this);
    this._preventMouseStart = __bind(this._preventMouseStart, this);
    this._onMouseleaveMouseTarget = __bind(this._onMouseleaveMouseTarget, this);
    this._onMouseenterMouseTarget = __bind(this._onMouseenterMouseTarget, this);
    this._onClickMouseTarget = __bind(this._onClickMouseTarget, this);
    this._onMouseUp = __bind(this._onMouseUp, this);
    this._onMouseMove = __bind(this._onMouseMove, this);
    this._onMousedownMouseTarget = __bind(this._onMousedownMouseTarget, this);
    this._onMousedownIgnore = __bind(this._onMousedownIgnore, this);
    this.render = __bind(this.render, this);
    this.destroy = __bind(this.destroy, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("mouse-tracking-view");
  a.prototype._targetClassName = function() {
    return"mouse-target"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseMinimumDistance:1, mouseMinimumDelay:0, mouseEventsNamespace:"mousetracking"})
  };
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"mousedown .mouse-ignore":this._onMousedownIgnore, "mousedown .mouse-ignore .mouse-target":this._onMousedownIgnore, "mousedown .mouse-ignore-targets .mouse-target":this._onMousedownIgnore, "mousedown .mouse-target":this._onMousedownMouseTarget, "click .mouse-target":this._onClickMouseTarget, "mouseenter .mouse-target":this._onMouseenterMouseTarget, "mouseleave .mouse-target":this._onMouseleaveMouseTarget})
  };
  a.prototype.template = _.template('<div class="<%= targetClassName %>"></div>');
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this._mouseLocationTrackerId = util.mouseLocationTracker.subscribe();
    this.listenTo(this, "MouseTrackingView:MouseDidMousedown", this._onMouseDidMousedown);
    this.listenTo(this, "MouseTrackingView:MouseDidStart", this._onMouseDidStart);
    this.listenTo(this, "MouseTrackingView:MouseDidDrag", this._onMouseDidDrag);
    this.listenTo(this, "MouseTrackingView:MouseDidStop", this._onMouseDidStop);
    this.listenTo(this, "MouseTrackingView:MouseDidMouseup", this._onMouseDidMouseup);
    this.listenTo(this, "MouseTrackingView:MouseDidClick", this._onMouseDidClick);
    this.listenTo(this, "MouseTrackingView:MouseDidMouseenter", this._onMouseDidMouseenter);
    return this.listenTo(this, "MouseTrackingView:MouseDidMouseleave", this._onMouseDidMouseleave)
  };
  a.prototype.destroy = function() {
    a.__super__.destroy.apply(this, arguments);
    util.mouseLocationTracker.unsubscribe(this._mouseLocationTrackerId);
    $(document).off("mousemove." + this.mouseEventsNamespace, this._onMouseMove);
    return $(document).off("mouseup." + this.mouseEventsNamespace, this._onMouseUp)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({targetClassName:this._targetClassName()}));
    return this
  };
  a.prototype._onMousedownIgnore = function(a) {
    return this._mousedownIgnoreEvent = a
  };
  a.prototype._onMousedownMouseTarget = function(a) {
    this._preventClickEvent = !1;
    this._mouseStarted && this._onMouseUp(a);
    if(1 === a.which && a !== this._mousedownIgnoreEvent) {
      this._mousedownEvent = a;
      this._mousedownTarget().addClass("mouse-is-down");
      this.trigger("MouseTrackingView:MouseDidMousedown", a);
      this._mouseDelayAchieved = !1;
      if(this._mouseMinimumDistanceMet(a) && this._mouseMinimumDelayMet(a)) {
        if(this._preventMouseStart(a)) {
          return
        }
        this._mouseStarted = !0;
        this.trigger("MouseTrackingView:MouseDidStart", a, this._mousedownEvent)
      }
      a.preventDefault();
      $(document).on("mousemove." + this.mouseEventsNamespace, this._onMouseMove);
      return $(document).on("mouseup." + this.mouseEventsNamespace, this._onMouseUp)
    }
  };
  a.prototype._onMouseMove = function(a) {
    if(/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()) && (!document.documentMode || 9 > document.documentMode) && !a.button) {
      return this._onMouseUp(a)
    }
    if(this._mouseStarted) {
      this.trigger("MouseTrackingView:MouseDidDrag", a, this._mousedownEvent)
    }else {
      if(this._mouseMinimumDistanceMet(a) && this._mouseMinimumDelayMet(a)) {
        if(this._preventMouseStart(this._mousedownEvent, a)) {
          this._onMouseUp(a)
        }else {
          return this._mouseStarted = !0, this.trigger("MouseTrackingView:MouseDidStart", a, this._mousedownEvent), this.trigger("MouseTrackingView:MouseDidDrag", a, this._mousedownEvent)
        }
      }
    }
  };
  a.prototype._onMouseUp = function(a) {
    $(document).off("mousemove." + this.mouseEventsNamespace, this._onMouseMove);
    $(document).off("mouseup." + this.mouseEventsNamespace, this._onMouseUp);
    clearTimeout(this._mouseDelayCountdown);
    this._mouseStarted && (this._mouseStarted = !1, this._mousedownTarget()[0] === this._mousedownEvent.target && (this._preventClickEvent = !0), this.trigger("MouseTrackingView:MouseDidStop", a, this._mousedownEvent));
    this.trigger("MouseTrackingView:MouseDidMouseup", a, this._mousedownEvent);
    this._mousedownTarget().removeClass("mouse-is-down");
    return this._mousedownEvent = void 0
  };
  a.prototype._onClickMouseTarget = function(a) {
    return this._preventClickEvent ? (this._preventClickEvent = !1, a.stopImmediatePropagation(), !1) : this.trigger("MouseTrackingView:MouseDidClick", a)
  };
  a.prototype._onMouseenterMouseTarget = function(a) {
    return this.trigger("MouseTrackingView:MouseDidMouseenter", a)
  };
  a.prototype._onMouseleaveMouseTarget = function(a) {
    return this.trigger("MouseTrackingView:MouseDidMouseleave", a)
  };
  a.prototype._preventMouseStart = function() {
  };
  a.prototype._mouseMinimumDistanceMet = function() {
    var a, d;
    d = this._mouseDisplacement();
    a = d.x;
    d = d.y;
    return Math.sqrt(a * a + d * d) >= this.options.mouseMinimumDistance
  };
  a.prototype._mouseMinimumDelayMet = function() {
    var a, d = this;
    a = this.options.mouseMinimumDelay;
    return 0 < a && !this._mouseDelayAchieved ? (this._mouseDelayCountdown = setTimeout(function() {
      return d._mouseDelayAchieved = !0
    }, a), !1) : !0
  };
  a.prototype._onMouseDidMousedown = function() {
  };
  a.prototype._onMouseDidStart = function() {
  };
  a.prototype._onMouseDidDrag = function() {
  };
  a.prototype._onMouseDidStop = function() {
  };
  a.prototype._onMouseDidMouseup = function() {
  };
  a.prototype._onMouseDidClick = function() {
  };
  a.prototype._onMouseDidMouseenter = function() {
  };
  a.prototype._onMouseDidMouseleave = function() {
  };
  a.prototype._mousedownTarget = function() {
    var a, d;
    a = null != (d = this._mousedownEvent) ? d.target : void 0;
    if(null != a) {
      return $(a)
    }
  };
  a.prototype._mouseElement = function(a) {
    var d;
    return $(null != (d = null != a ? a : this._mousedownTarget()) ? d : this.$(".mouse-target").first())
  };
  a.prototype._mouseElementContainer = function(a) {
    return this._mouseElement(a).offsetParent()
  };
  a.prototype._mouseElementDimensions = function(a) {
    a = this._mouseElement(a);
    return{width:a.width(), height:a.height()}
  };
  a.prototype._mouseElementContainerDimensions = function(a) {
    a = this._mouseElementContainer(a);
    return{width:a.width(), height:a.height()}
  };
  a.prototype._mouseElementPercentOfContainer = function(a, d) {
    var b, f;
    f = this._mouseElementDimensions(a);
    b = null != d ? this._mouseElementDimensions(d) : this._mouseElementContainerDimensions(a);
    return{x:100 * f.width / b.width, y:100 * f.height / b.height}
  };
  a.prototype._mouseInElementBox = function(a, d) {
    var b, f, g, h, a = $(a);
    b = this._mouseOffsetFromElement(a);
    f = 0 <= (g = b.x) && g <= a.outerWidth();
    b = 0 <= (h = b.y) && h <= a.outerHeight();
    return"x" === d || "width" === d ? f : "y" === d || "height" === d ? b : f && b
  };
  a.prototype._mouseOffsetFromElement = function(a) {
    var d;
    a || MissingParameterError("MouseTrackingView._mouseOffsetFromElement", "$el");
    a = $(a);
    d = util.mouseLocationTracker.x - a.offset().left;
    a = util.mouseLocationTracker.y - a.offset().top;
    return{x:d, y:a}
  };
  a.prototype._mouseDisplacement = function(a) {
    var d, b, f;
    null == a && (a = this._mousedownEvent);
    d = util.mouseLocationTracker.x - (null != (b = null != a ? a.pageX : void 0) ? b : null != a ? a.x : NaN);
    a = util.mouseLocationTracker.y - (null != (f = null != a ? a.pageY : void 0) ? f : null != a ? a.y : NaN);
    return{x:d, y:a}
  };
  a.prototype._percentMouseDisplacement = function(a) {
    var d, b, f, g, h, i, j, k, l;
    null == a && (a = {});
    i = null != (f = a.startEvent) ? f : this._mousedownEvent;
    f = null != (g = a.dimensionsFn) ? g : this._mouseElementContainerDimensions;
    g = null != (j = null != (b = a.$el) ? b : a.el) ? j : null != i ? i.target : void 0;
    null != g && (d = $(g));
    b = f(d);
    j = null != (h = a.width) ? h : b.width;
    h = null != (l = a.height) ? l : b.height;
    a = (k = a.offsetFromElement) ? (k = util.elementInDom(k) ? k : d, this._mouseOffsetFromElement(k)) : this._mouseDisplacement(i);
    return{x:100 * a.x / j, y:100 * a.y / h}
  };
  a.prototype._percentElementMouseDisplacement = function(a) {
    null == a && (a = {});
    a = _.clone(a);
    a.dimensionsFn = this._mouseElementDimensions;
    return this._percentMouseDisplacement(a)
  };
  a.prototype._percentContainerMouseDisplacement = function(a) {
    var d, b, f, g;
    null == a && (a = {});
    a = _.clone(a);
    a.dimensionsFn = this._mouseElementContainerDimensions;
    if(null != (d = a.offsetFromElement) && !util.elementInDom(d)) {
      d = null != (b = null != (f = a.$el) ? f : a.el) ? b : null != (g = a.startEvent) ? g.target : void 0, a.offsetFromElement = this._mouseElementContainer(d)
    }
    return this._percentMouseDisplacement(a)
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.OverlayView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.overlayTemplate = _.template('<div class="background">\n  <div class="content"></div>\n</div>');
  a.prototype.className = a.classNameExtend("overlay-view");
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.overlayTemplate());
    this.content = this.$(".content");
    return this
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.SlidingObjectView = function(b) {
  function a() {
    this.sliderOptimizedPercentContainerMouseOffset = __bind(this.sliderOptimizedPercentContainerMouseOffset, this);
    this._mouseElement = __bind(this._mouseElement, this);
    this._onMouseDidStop = __bind(this._onMouseDidStop, this);
    this._onMouseDidDrag = __bind(this._onMouseDidDrag, this);
    this._onMouseDidStart = __bind(this._onMouseDidStart, this);
    this._refreshDisplay = __bind(this._refreshDisplay, this);
    this.location = __bind(this.location, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("sliding-object-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " sliding-object"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseEventsNamespace:"slidingobject", location:0, draggable:!0})
  };
  a.prototype.template = _.template('<div class="padded-box">\n  <div class="<%= targetClassName %>"></div>\n</div>');
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.location(this.options.location);
    return this.listenTo(this, "SlidingObjectView:DidChangeLocation", this._refreshDisplay)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({targetClassName:this._targetClassName()}));
    this._slidingObject = this.$(".sliding-object");
    this._refreshDisplay();
    return this
  };
  a.prototype.location = function(a) {
    _.isNumber(a) && !_.isNaN(a) && (0 > a && (a = 0), 100 < a && (a = 100), this._location = a, this.trigger("SlidingObjectView:DidChangeLocation", this._location));
    return this._location
  };
  a.prototype._refreshDisplay = function() {
    if(this.rendering) {
      return this._slidingObject.css("left", "" + this._location + "%")
    }
  };
  a.prototype._onMouseDidStart = function() {
    return this._locationAtMouseStart = this.location()
  };
  a.prototype._onMouseDidDrag = function() {
    var a;
    if(this.options.draggable) {
      return a = this._percentContainerMouseDisplacement().x, a = this._locationAtMouseStart + a, this.location(a)
    }
  };
  a.prototype._onMouseDidStop = function() {
    return this._locationAtMouseStart = void 0
  };
  a.prototype._mouseElement = function(a) {
    return null != a ? a : this._slidingObject
  };
  a.prototype.sliderOptimizedPercentContainerMouseOffset = function() {
    var a, d;
    d = this._percentContainerMouseDisplacement({offsetFromElement:!0});
    a = this._mouseElementPercentOfContainer();
    return{x:d.x - a.x / 2, y:d.y - a.y / 2}
  };
  return a
}(acorn.player.MouseTrackingView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.SlidingBarView = function(b) {
  function a() {
    this._onMouseDidStop = __bind(this._onMouseDidStop, this);
    this._onMouseDidDrag = __bind(this._onMouseDidDrag, this);
    this._onMouseDidStart = __bind(this._onMouseDidStart, this);
    this._refreshDisplay = __bind(this._refreshDisplay, this);
    this.values = __bind(this.values, this);
    this._values = __bind(this._values, this);
    this.location = __bind(this.location, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("sliding-bar-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " sliding-bar"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseEventsNamespace:"slidingbar", low:0, high:100, internalViews:[]})
  };
  a.prototype.template = _.template('<div class="<%= targetClassName %>">\n  <div class="internal-views mouse-ignore-targets"></div>\n</div>');
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.values(this.options);
    this.internalViews = this.options.internalViews;
    return this.listenTo(this, "SlidingBarView:DidChangeValues", this._refreshDisplay)
  };
  a.prototype.render = function() {
    var c, d, b, f, g;
    a.__super__.render.apply(this, arguments);
    _.isArray(this.internalViews) || (this.internalViews = [this.internalViews]);
    c = this.$el.children().children(".internal-views");
    g = this.internalViews;
    b = 0;
    for(f = g.length;b < f;b++) {
      d = g[b], d instanceof Backbone.View ? c.append(d.render().el) : console.log("WARNING: SlidingBarView only supports internalViews derived            from Backbone.View")
    }
    return this
  };
  a.prototype.location = function() {
  };
  a.prototype._values = function(a) {
    var d, b;
    b = d = void 0;
    if(null != (null != a ? a.low : void 0) && a.low !== this._low) {
      this._low = a.low, d = !0
    }
    if(null != (null != a ? a.high : void 0) && a.high !== this._high) {
      this._high = a.high, b = !0
    }
    if(null != d || null != b) {
      a = this._values(), this.trigger("SlidingBarView:DidChangeValues", a), d && this.trigger("SlidingBarView:DidChangeLowValue", a.low), b && this.trigger("SlidingBarView:DidChangeHighValue", a.high)
    }
    return{low:this._low, high:this._high}
  };
  a.prototype.values = function(a) {
    var d, b, f;
    if(_.isObject(a)) {
      f = this._values();
      _.isArray(a) ? (d = a[0], a = a[1], b = Math.min(d, a), d = Math.max(d, a)) : (b = a.low, d = a.high);
      if(!_.isNumber(b) || _.isNaN(b)) {
        b = void 0
      }
      if(!_.isNumber(d) || _.isNaN(d)) {
        d = void 0
      }
      0 > b && (b = 0);
      100 < b && (b = 100);
      0 > d && (d = 0);
      100 < d && (d = 100);
      null != b && b !== f.low && (f.low = b, f.high < f.low && (f.high = f.low));
      null != d && d !== f.high && (f.high = d, f.high < f.low && (f.low = f.high));
      this._values(f)
    }
    return this._values()
  };
  a.prototype._refreshDisplay = function() {
    var a;
    if(this.rendering) {
      return a = this.values(), this._slidingObject.css("left", "" + a.low + "%"), this._slidingObject.css("right", "" + (100 - a.high) + "%")
    }
  };
  a.prototype._onMouseDidStart = function() {
    return this._valuesAtMouseStart = this.values()
  };
  a.prototype._onMouseDidDrag = function() {
    var a, d, b;
    if(this.options.draggable) {
      return b = {$el:this._slidingObject}, a = this._percentContainerMouseDisplacement(b), b = this._valuesAtMouseStart.low + a.x, d = this._valuesAtMouseStart.high + a.x, a = 0 > b ? 0 - b : 100 < d ? 100 - d : 0, this.values({low:b + a, high:d + a})
    }
  };
  a.prototype._onMouseDidStop = function() {
    return this._valuesAtMouseStart = void 0
  };
  return a
}(acorn.player.SlidingObjectView);
var __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __slice = [].slice;
acorn.player.RangeSliderView = function(b) {
  function a() {
    this._onMouseDidMouseup = __bind(this._onMouseDidMouseup, this);
    this._onMouseDidStop = __bind(this._onMouseDidStop, this);
    this._onMouseDidDrag = __bind(this._onMouseDidDrag, this);
    this._onMouseDidStart = __bind(this._onMouseDidStart, this);
    this._onMouseDidMousedown = __bind(this._onMouseDidMousedown, this);
    this._magnitudeSort = __bind(this._magnitudeSort, this);
    this._magnitudeOrderedValues = __bind(this._magnitudeOrderedValues, this);
    this._handleOrderedValues = __bind(this._handleOrderedValues, this);
    this.values = __bind(this.values, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("range-slider-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " range-slider"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseEventsNamespace:"rangeslider", low:0, high:100, draggableBar:!0})
  };
  a.prototype.template = _.template('<div class="<%= targetClassName %>">\n  <div class="slider-elements mouse-ignore-targets"></div>\n</div>');
  a.prototype.initialize = function() {
    var c, d = this;
    a.__super__.initialize.apply(this, arguments);
    this._values = [this.options.low, this.options.high];
    c = this._handleOrderedValues();
    this._handles = _.map([0, 1], function(a) {
      var b;
      b = new acorn.player.SlidingObjectView({location:c[a], extraClasses:["slider-handle-view"]});
      d.listenTo(b, "SlidingObjectView:DidChangeLocation", function() {
        return d._onHandleDidChangeLocation.apply(d, [a].concat(__slice.call(arguments)))
      });
      return b
    });
    c = this._magnitudeOrderedValues();
    this._rangeBar = new acorn.player.SlidingBarView({low:c[0], high:c[1], draggable:this.options.draggableBar, extraClasses:"range-bar-view"});
    return this.listenTo(this._rangeBar, "SlidingBarView:DidChangeValues", this._onRangeBarDidChangeValues)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({targetClassName:this._targetClassName()}));
    this.$(".slider-elements").first().append(this._rangeBar.render().el).append(this._handles[0].render().el).append(this._handles[1].render().el);
    return this
  };
  a.prototype.values = function(a) {
    var d;
    null != a && (d = _.isArray(a) ? a : _.isObject(a) ? [a.low, a.high] : 1 < arguments.length ? __slice.call(arguments) : [a, a], this._magnitudeOrderedValues(d));
    return this._magnitudeOrderedValues()
  };
  a.prototype._handleOrderedValues = function(a) {
    var d, b, f, g;
    if(_.isArray(a)) {
      b = this._magnitudeOrderedValues();
      for(d = g = 0;1 >= g;d = ++g) {
        f = util.bound(a[d]), _.isNaN(f) || f === this._values[d] || (this._values[d] = f, this._handles[d].location(f))
      }
      a = this._magnitudeOrderedValues();
      b[0] === a[0] && b[1] === a[1] || (this._rangeBar.values(a), b[0] !== a[0] && this.trigger("RangeSliderView:LowValueDidChange", a[0]), b[1] !== a[1] && this.trigger("RangeSliderView:HighValueDidChange", a[1]), this.trigger("RangeSliderView:ValuesDidChange", this.values()))
    }
    return _.clone(this._values)
  };
  a.prototype._magnitudeOrderedValues = function(a) {
    var d, b;
    _.isArray(a) && (d = this._handleOrderedValues(), b = this._magnitudeOrderedValues(), d[0] === b[0] && d[1] === b[1] || (a = [a[1], a[0]]), this._handleOrderedValues(a));
    return this._magnitudeSort(this._handleOrderedValues())
  };
  a.prototype._magnitudeSort = function(a) {
    return a.sort(function(a, c) {
      return a - c
    })
  };
  a.prototype._onHandleDidChangeLocation = function(a, d) {
    var b;
    b = Array(2);
    b[a] = d;
    return this._handleOrderedValues(b)
  };
  a.prototype._onRangeBarDidChangeValues = function(a) {
    return this.values([a.low, a.high])
  };
  a.prototype._onMouseDidMousedown = function() {
    var a, d;
    a = this._handles[0].sliderOptimizedPercentContainerMouseOffset().x;
    d = this._handleOrderedValues();
    d = [Math.abs(d[0] - a), Math.abs(d[1] - a)];
    this._closerHandleIndex = d[0] < d[1] ? 0 : 1;
    d = Array(2);
    d[this._closerHandleIndex] = a;
    return this._handleOrderedValues(d)
  };
  a.prototype._onMouseDidStart = function() {
    return this._valuesAtMouseStart = this._handleOrderedValues()
  };
  a.prototype._onMouseDidDrag = function() {
    var a, d;
    a = this._valuesAtMouseStart[this._closerHandleIndex] + this._percentElementMouseDisplacement().x;
    d = Array(2);
    d[this._closerHandleIndex] = a;
    return this._handleOrderedValues(d)
  };
  a.prototype._onMouseDidStop = function() {
    return this._valuesAtMouseStart = void 0
  };
  a.prototype._onMouseDidMouseup = function() {
    return this._closerHandleIndex = void 0
  };
  return a
}(acorn.player.MouseTrackingView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.ProgressRangeSliderView = function(b) {
  function a() {
    this.progress = __bind(this.progress, this);
    this._onProgressBarValueDidChange = __bind(this._onProgressBarValueDidChange, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("progress-range-slider-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " progress-range-slider"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseEventsNamespace:"progressrangeslider", progress:0, draggableBar:!1})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this._progressBar = new acorn.player.ValueSliderView({value:this.options.progress, draggable:!0, handle:!1, extraClasses:"progress-bar-view"});
    this._rangeBar.internalViews = this._progressBar;
    return this.listenTo(this._progressBar, "ValueSliderView:ValueDidChange", this._onProgressBarValueDidChange)
  };
  a.prototype._onProgressBarValueDidChange = function(a) {
    return this.progress(a)
  };
  a.prototype.progress = function(a, d) {
    null == d && (d = {});
    null != a && (util.bound(a), _.isNaN(a) || (this._progressBar.value(a, d), d.silent || this.trigger("ProgressRangeSliderView:ProgressDidChange", a)));
    return this._progressBar.value()
  };
  return a
}(acorn.player.RangeSliderView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.SourcesView = function(b) {
  function a() {
    this.onClickClose = __bind(this.onClickClose, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.template = _.template('<div class="header">\n  <h1>sources</h1>\n  <div class="actions">\n    <button id="close" type="submit" class="btn">\n      <i class="icon-ban-circle"></i> Close\n    </button>\n  </div>\n</div>\n<div id="body"></div>');
  a.prototype.sourceTemplate = _.template('<div class="source"><%= source %></div>');
  a.prototype.className = a.classNameExtend("sources-view");
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"click button#close":"onClickClose"})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.shell = this.options.shell;
    if(!this.shell) {
      return acorn.errors.MissingParameterError("SourcesView", "shell")
    }
  };
  a.prototype.render = function() {
    var c, d = this;
    a.__super__.render.apply(this, arguments);
    this.content.empty();
    this.content.html(this.template());
    c = this.content.find("#body");
    _.each("undefined" !== typeof sources && null !== sources ? sources : [], function(a) {
      return c.append(d.sourceTemplate({source:a}))
    });
    return this
  };
  a.prototype.onClickClose = function() {
    return this.eventhub.trigger("close:sources")
  };
  return a
}(acorn.player.OverlayView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.SplashView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("splash-view");
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {click:function() {
      return c.eventhub.trigger("show:content")
    }})
  };
  a.prototype.template = _.template('<img id="image" src="<%= image %>" class="splash-image" />\n<i id="type" class="<%= type %> splash-icon"></i>\n<img id="logo" src="<%= logo %>" class="splash-icon" />');
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    this.model instanceof acorn.Model || TypeError(this.model, "acorn.Model");
    return this.listenTo(this.model, "change", function() {
      return c.softRender()
    })
  };
  a.prototype.render = function() {
    var c;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    c = this.model.shellData().shellid;
    this.$el.html(this.template({type:acorn.shellModuleWithId(c).icon, logo:"" + acorn.config.url.img + "/acorn.png", image:this.model.thumbnail()}));
    this.$("#image").objectFit("contain");
    return this
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.SummaryView = function(b) {
  function a() {
    this.renderData = __bind(this.renderData, this);
    this.render = __bind(this.render, this);
    this.onModelChange = __bind(this.onModelChange, this);
    this.setModel = __bind(this.setModel, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("summary-view row-fluid");
  a.prototype.template = _.template('<div class="thumbnail-view span2">\n  <img class="img-rounded" src="" />\n</div>\n<div class="span10">\n  <div class="title"></div>\n  <div class="description"></div>\n  <div class="buttons"></div>\n</div>');
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.setModel(this.model)
  };
  a.prototype.setModel = function(a) {
    this.model && this.stopListening(this.model);
    this.model = a;
    this.listenTo(this.model, "change", this.onModelChange);
    return this.onModelChange()
  };
  a.prototype.onModelChange = function() {
    if(this.rendering) {
      return this.renderData()
    }
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.removeClass("editable");
    this.$el.html(this.template());
    this.renderData();
    return this
  };
  a.prototype.renderData = function() {
    var a;
    a = $("<i>").addClass(this.model.module.icon);
    a.tooltip({title:this.model.module.description, placement:"right"});
    this.$(".title").first().text(this.model.title()).append(a);
    this.$(".description").first().text(this.model.description());
    this.$(".thumbnail-view img").first().attr("src", this.model.thumbnail());
    return this
  };
  return a
}(athena.lib.View);
var Shell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.Shell = {};
Shell = acorn.shells.Shell = {id:"acorn.Shell", title:"Shell", description:"base shell", icon:"icon-sign-blank"};
Shell.Model = function(b) {
  function a() {
    this.sync = __bind(this.sync, this);
    this.toString = __bind(this.toString, this);
    this._updateAttributesWithDefaults = __bind(this._updateAttributesWithDefaults, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    if(null == this.shellid()) {
      return this.set({shellid:this.module.id})
    }
  };
  a.prototype.shellid = a.property("shellid", {setter:!1});
  a.prototype.title = a.property("title");
  a.prototype.description = a.property("description");
  a.prototype.thumbnail = a.property("thumbnail");
  a.prototype.sources = a.property("sources", {"default":[]});
  a.prototype.defaultAttributes = function() {
    return{title:"", description:"", thumbnail:acorn.config.img.acorn}
  };
  a.prototype._updateAttributesWithDefaults = function() {
    var a, d, b, f, g, h;
    f = null != (d = this._lastDefaults) ? d : {};
    b = this._lastDefaults = this.defaultAttributes();
    h = [];
    for(a in b) {
      d = b[a], g = this[a](), g === f[a] || null == g || "" === g ? h.push(this[a](d)) : h.push(void 0)
    }
    return h
  };
  a.prototype.toString = function() {
    return"" + this.shellid() + " " + this.title()
  };
  a.withAcorn = function(c) {
    return a.withData(c.shellData())
  };
  a.withData = function(a) {
    return new (acorn.shellModuleWithId(a.shellid).Model)(_.clone(a))
  };
  a.prototype.sync = function() {
    return NotSupportedError("Backbone::sync")
  };
  return a
}.call(this, athena.lib.Model);
acorn.shellWithAcorn = Shell.Model.withAcorn;
acorn.shellWithData = Shell.Model.withData;
Shell.MediaView = function(b) {
  function a() {
    this._onProgressBarDidProgress = __bind(this._onProgressBarDidProgress, this);
    this._updateProgressBar = __bind(this._updateProgressBar, this);
    this.progressFromPercent = __bind(this.progressFromPercent, this);
    this.percentProgress = __bind(this.percentProgress, this);
    this.progressBarState = __bind(this.progressBarState, this);
    this.duration = __bind(this.duration, this);
    this.render = __bind(this.render, this);
    this.initializeMedia = __bind(this.initializeMedia, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  _.extend(a.prototype, acorn.MediaInterface.prototype);
  a.prototype.className = a.classNameExtend("shell-media-view");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {readyOnRender:!0})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.options.model || acorn.errors.MissingParameterError("Shell.MediaView", "model");
    this.initializeMedia();
    this.summaryView = new acorn.player.SummaryView({eventhub:this.eventhub, model:this.options.model});
    return this.on("ProgressBar:DidProgress", this._onProgressBarDidProgress)
  };
  a.prototype.initializeMedia = function() {
    this.initializeMediaEvents(this.options);
    return this.setMediaState("init")
  };
  a.prototype.controls = [];
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.options.readyOnRender && this.setMediaState("ready");
    setTimeout(this._updateProgressBar, 0);
    return this
  };
  a.prototype.duration = function() {
    return Infinity
  };
  a.prototype.progressBarState = function() {
    return _.isFinite(this.duration()) ? {showing:!0, progress:this.percentProgress()} : {showing:!1, progress:0}
  };
  a.prototype.percentProgress = function() {
    return util.toPercent(this.seekOffset(), {low:0, high:this.duration(), bound:!0})
  };
  a.prototype.progressFromPercent = function(a) {
    return util.fromPercent(a, {low:0, high:this.duration(), bound:!0})
  };
  a.prototype._updateProgressBar = function() {
    var a;
    a = this.progressBarState();
    return this.trigger("Shell:UpdateProgressBar", a.showing, a.progress)
  };
  a.prototype._onProgressBarDidProgress = function() {
  };
  return a
}(athena.lib.View);
Shell.RemixView = function(b) {
  function a() {
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("shell-remix-view");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.options.model || acorn.errors.MissingParameterError("Shell.RemixView", "model");
    return this.model._updateAttributesWithDefaults()
  };
  a.activeLinkInput = !1;
  return a
}(athena.lib.View);
Shell.derives = function(b) {
  return athena.lib.util.derives(this, b)
};
Shell.isOrDerives = function(b) {
  return athena.lib.util.isOrDerives(this, b)
};
acorn.registerShellModule(Shell);
var CollectionShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __slice = [].slice;
acorn.shells.CollectionShell = {};
Shell = acorn.shells.Shell;
CollectionShell = acorn.shells.CollectionShell = {id:"acorn.CollectionShell", title:"Collection", description:"a collection of media", icon:"icon-sitemap"};
CollectionShell.Model = function(b) {
  function a() {
    this._onResetShells = __bind(this._onResetShells, this);
    this._onRemoveShell = __bind(this._onRemoveShell, this);
    this._onAddShell = __bind(this._onAddShell, this);
    this._syncShells = __bind(this._syncShells, this);
    this.shells = __bind(this.shells, this);
    this.initialize = __bind(this.initialize, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.defaultAttributes = function() {
    var c, d;
    c = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(c, {title:"" + this.module.title + " with " + this.shells().length + " items", thumbnail:(null != (d = this.shells().first()) ? d.thumbnail() : void 0) || c.thumbnail})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    if(!this.get("shells")) {
      return this.set("shells", [])
    }
  };
  a.prototype.shells = function() {
    this._shells || (this._shells = new Backbone.Collection, this._syncShells(), this._shells.on("add", this._onAddShell), this._shells.on("remove", this._onRemoveShell), this._shells.on("reset", this._onResetShells));
    return this._shells
  };
  a.prototype._syncShells = function() {
    return this._shells.reset(_.map(this.get("shells"), Shell.Model.withData))
  };
  a.prototype._onAddShell = function(a, d, b) {
    var f;
    a === this && ValueError(a, "cannot be added to itself");
    a instanceof Shell.Model || TypeError(a, "Shell.Model");
    null == b && (b = {});
    d = d.indexOf(a);
    a = a.toJSON();
    f = _.clone(this.get("shells"));
    f.splice(d, 0, a);
    return this.set({shells:f}, b)
  };
  a.prototype._onRemoveShell = function(a, b, e) {
    a === this && ValueError(a, "cannot be removed from itself");
    a instanceof Shell.Model || TypeError(a, "Shell.Model");
    null == e && (e = {});
    a = b.indexOf(a);
    b = _.clone(this.get("shells"));
    b.splice(a, 1);
    return this.set({shells:b}, e)
  };
  a.prototype._onResetShells = function(a, b) {
    var e, f;
    null == b && (b = {});
    e = a.map(function(a) {
      return a.toJSON()
    });
    f = _.clone(this.get("shells"));
    if(!_.isEqual(f, e)) {
      return this.set({shells:e}, b)
    }
  };
  return a
}(Shell.Model);
CollectionShell.MediaView = function(b) {
  function a() {
    this.correctedIndex = __bind(this.correctedIndex, this);
    this.showNext = __bind(this.showNext, this);
    this.showPrevious = __bind(this.showPrevious, this);
    this.showView = __bind(this.showView, this);
    this.hideView = __bind(this.hideView, this);
    this.switchShell = __bind(this.switchShell, this);
    this.shellView = __bind(this.shellView, this);
    this.updateControls = __bind(this.updateControls, this);
    this._onProgressBarDidProgress = __bind(this._onProgressBarDidProgress, this);
    this.progressBarState = __bind(this.progressBarState, this);
    this.duration = __bind(this.duration, this);
    this.onMediaDidPause = __bind(this.onMediaDidPause, this);
    this.onMediaDidPlay = __bind(this.onMediaDidPlay, this);
    this.render = __bind(this.render, this);
    this.remove = __bind(this.remove, this);
    this.initializeControlsView = __bind(this.initializeControlsView, this);
    this.initializeSubshellEvents = __bind(this.initializeSubshellEvents, this);
    this.initializeSubshellMediaView = __bind(this.initializeSubshellMediaView, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("collection-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!0, readyOnRender:!1, readyOnFirstShellReady:!0, showFirstSubshellOnRender:!0, showSubshellControls:!0, showSubshellSummary:!0, autoAdvanceOnEnd:!0, playSubshellOnProgression:!0, restartSubshellOnProgression:!1, shellsCycle:!1})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.model.shells();
    this.shellViews = this.model.shells().map(this.initializeSubshellMediaView);
    this.initializeSubshellEvents();
    this.currentIndex = 0;
    return this.initializeControlsView()
  };
  a.prototype.initializeSubshellMediaView = function(a) {
    var b = this, a = new a.module.MediaView({eventhub:this.eventhub, model:a});
    a.on("all", function() {
      arguments[0] = "Subshell:" + arguments[0];
      return b.trigger.apply(b, arguments)
    });
    return a
  };
  a.prototype.initializeSubshellEvents = function() {
    var a = this;
    this.on("Subshell:Media:Progress", function(b, e) {
      var f;
      f = _.map(_.range(a.currentIndex), a.shellView);
      e += a.duration(f);
      return a.trigger("Media:Progress", a, e, a.duration())
    });
    this.on("Subshell:Media:DidEnd", function() {
      if(a.currentIndex + 1 === a.shellViews.length) {
        return a.setMediaState("end")
      }
      if(a.options.autoAdvanceOnEnd) {
        return a.showNext()
      }
    });
    this.on("Subshell:Media:DidReady", function(b) {
      if(b === a.shellView() && (a.isIniting() && a.options.readyOnFirstShellReady && a.setMediaState("ready"), a.isPlaying() && a.options.playSubshellOnProgression)) {
        return b.play()
      }
    });
    this.on("Subshell:Media:DidPlay", function() {
      if(!a._switchingShell && !a.isPlaying()) {
        return a.play()
      }
    });
    this.on("Subshell:Media:DidPause", function() {
      if(!a._switchingShell && !a.isPaused()) {
        return a.pause()
      }
    });
    return this.on("Subshell:Shell:UpdateProgressBar", function() {
      return a._updateProgressBar()
    })
  };
  a.prototype.initializeControlsView = function() {
    this.offsetControl = new acorn.player.controls.TextControlView({eventhub:this.eventhub, model:new Backbone.Model({tooltip:"Playlist Items", text:"1 / " + this.model.shells().length})});
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:["Previous", this.offsetControl, "Next"], eventhub:this.eventhub});
    this.controlsView.on("PreviousControl:Click", this.showPrevious);
    this.controlsView.on("ListControl:Click", this.onTogglePlaylist);
    return this.controlsView.on("NextControl:Click", this.showNext)
  };
  a.prototype.remove = function() {
    this.controlsView.off("PreviousControl:Click", this.showPrevious);
    this.controlsView.off("ListControl:Click", this.onTogglePlaylist);
    this.controlsView.off("NextControl:Click", this.showNext);
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.options.showFirstSubshellOnRender && this.showView(this.currentIndex);
    return this
  };
  a.prototype.onMediaDidPlay = function() {
    var a;
    return null != (a = this.shellView()) ? a.play() : void 0
  };
  a.prototype.onMediaDidPause = function() {
    var a;
    return null != (a = this.shellView()) ? a.pause() : void 0
  };
  a.prototype.duration = function(a) {
    null == a && (a = this.shellViews);
    return _.reduce(a, function(a, c) {
      return a + c.duration()
    }, 0)
  };
  a.prototype.progressBarState = function() {
    return this.shellView().progressBarState()
  };
  a.prototype._onProgressBarDidProgress = function(a) {
    var b;
    return(b = this.shellView()).trigger.apply(b, ["ProgressBar:DidProgress"].concat(__slice.call(arguments)))
  };
  a.prototype.updateControls = function() {
    if(!this.options.shellsCycle && (this.controlsView.$(".previous.control-view").removeAttr("disabled"), this.controlsView.$(".next.control-view").removeAttr("disabled"), 0 === this.currentIndex && this.controlsView.$(".previous.control-view").attr("disabled", "disabled"), this.currentIndex === this.shellViews.length - 1)) {
      return this.controlsView.$(".next.control-view").attr("disabled", "disabled")
    }
  };
  a.prototype.shellView = function(a) {
    null == a && (a = this.currentIndex);
    return this.shellViews[a]
  };
  a.prototype.switchShell = function(a, b) {
    var e, f;
    if(0 <= a && a < this.shellViews.length) {
      return this._switchingShell = !0, this.hideView(), this.currentIndex = a, e = this.showView(this.currentIndex, b), this._updateProgressBar(), this.isPlaying() && (!e.isPlaying() && e.canPlay()) && e.play(), null != (f = this.offsetControl) && f.model.set({text:"" + (this.currentIndex + 1) + " / " + this.model.shells().length}), delete this._switchingShell
    }
  };
  a.prototype.hideView = function(a) {
    var b;
    if(b = this.shellView(a)) {
      return b.$el.addClass("hidden"), b.pause(), this.options.showSubshellControls && (a = _.indexOf(this.controlsView.buttons, b.controlsView), 0 <= a && (this.controlsView.buttons.splice(a, 1), this.controlsView.softRender())), this.options.showSubshellSummary && b.summaryView.$el.addClass("hidden"), b
    }
  };
  a.prototype.showView = function(a, b) {
    var e;
    if(e = this.shellView(a)) {
      return e.$el.removeClass("hidden"), e.el.parentNode !== this.el && this.$el.append(e.render().el), null != b && e.seek(b), this.options.showSubshellSummary && (e.summaryView.$el.removeClass("hidden"), this.summaryView.$el.append(e.summaryView.render().el)), this.options.showSubshellControls && (this.controlsView.buttons.push(e.controlsView), this.controlsView.render()), this.updateControls(), e
    }
  };
  a.prototype.showPrevious = function() {
    var a;
    this.options.playSubshellOnProgression || this.pause();
    a = this.options.restartSubshellOnProgression ? 0 : void 0;
    return this.switchShell(this.correctedIndex(this.currentIndex - 1), a)
  };
  a.prototype.showNext = function() {
    var a;
    this.options.playSubshellOnProgression || this.pause();
    a = this.options.restartSubshellOnProgression ? 0 : void 0;
    return this.switchShell(this.correctedIndex(this.currentIndex + 1), a)
  };
  a.prototype.correctedIndex = function(a) {
    return this.options.shellsCycle ? (a + this.shellViews.length) % this.shellViews.length : a
  };
  return a
}(Shell.MediaView);
CollectionShell.RemixView = function(b) {
  function a() {
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("collection-shell");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.listenTo(this.model, "change:shells", this.model._updateAttributesWithDefaults)
  };
  return a
}(Shell.RemixView);
acorn.registerShellModule(CollectionShell);
var GalleryShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.GalleryShell = {};
CollectionShell = acorn.shells.CollectionShell;
GalleryShell = acorn.shells.GalleryShell = {id:"acorn.GalleryShell", title:"Gallery", description:"media displayed in a gallery", icon:"icon-th"};
GalleryShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  return a
}(CollectionShell.Model);
GalleryShell.MediaView = function(b) {
  function a() {
    this.showView = __bind(this.showView, this);
    this.hideGrid = __bind(this.hideGrid, this);
    this.showGrid = __bind(this.showGrid, this);
    this.render = __bind(this.render, this);
    this.initializeControlsView = __bind(this.initializeControlsView, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("gallery-shell");
  a.prototype.tileOptions = {tileVars:function(a) {
    return{link:"", thumbnail:a.thumbnail()}
  }};
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!1, readyOnRender:!0, showFirstSubshellOnRender:!1, showSubshellControls:!0, showSubshellSummary:!0, autoAdvanceOnEnd:!1, playSubshellOnProgression:!0, shellsCycle:!0})
  };
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    this.gridView = new athena.lib.GridView({collection:this.model.shells(), eventhub:this.eventhub, tileOptions:this.tileOptions});
    return this.listenTo(this.gridView, "GridTile:Click", function(a) {
      c.switchShell(c.model.shells().indexOf(a.model));
      c.play();
      return!1
    })
  };
  a.prototype.initializeControlsView = function() {
    var a = this;
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:["Previous", "Grid", "Next"], eventhub:this.eventhub});
    this.listenTo(this.controlsView, "PreviousControl:Click", function() {
      return a.showPrevious()
    });
    this.listenTo(this.controlsView, "GridControl:Click", function() {
      return a.showGrid()
    });
    return this.listenTo(this.controlsView, "NextControl:Click", function() {
      return a.showNext()
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.append(this.gridView.render().el);
    this.showGrid();
    return this
  };
  a.prototype.showGrid = function() {
    this.hideView();
    this.gridView.$el.show();
    this.controlsView.$el.hide();
    return this
  };
  a.prototype.hideGrid = function() {
    this.gridView.$el.hide();
    this.controlsView.$el.show();
    return this
  };
  a.prototype.showView = function() {
    this.hideGrid();
    return a.__super__.showView.apply(this, arguments)
  };
  return a
}(CollectionShell.MediaView);
GalleryShell.RemixView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("gallery-shell");
  return a
}(CollectionShell.RemixView);
acorn.registerShellModule(GalleryShell);
var LinkShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.LinkShell = {};
Shell = acorn.shells.Shell;
LinkShell = acorn.shells.LinkShell = {id:"acorn.LinkShell", title:"Link", description:"an embedded website", icon:"icon-link", validLinkPatterns:[acorn.util.LINK_REGEX], linkMatches:function(b, a) {
  return null != _.find(a, function(a) {
    return a.test(b)
  })
}, matchingShells:function(b) {
  var a, c = this;
  if(null == b) {
    return LinkShell
  }
  acorn.util.isUrl(b) || TypeError(b, "url");
  acorn.util.parseUrl(b);
  a = _.filter(acorn.shells, function(a) {
    return athena.lib.util.derives(a.Model, LinkShell.Model)
  });
  a = _.filter(a, function(a) {
    return c.linkMatches(b, a.validLinkPatterns)
  });
  0 === a.length && (a[0] = LinkShell);
  return a
}, bestMatchingShell:function(b) {
  b = this.matchingShells(b);
  return _.reduce(b, function(a, c) {
    return athena.lib.util.derives(a.Model, c.Model) ? a : c
  }, LinkShell)
}};
acorn.matchingLinkShells = LinkShell.matchingShells;
acorn.bestMatchingLinkShell = LinkShell.bestMatchingShell;
LinkShell.Model = function(b) {
  function a() {
    this.validate = __bind(this.validate, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.link = a.property("link");
  a.prototype.validate = function(a) {
    if(null != a.link && "" !== a.link && !LinkShell.linkMatches(a.link, this.module.validLinkPatterns)) {
      return ValueError("link", "doesn't match valid link patterns for this shell.")
    }
  };
  a.withLink = function(c) {
    acorn.util.isUrl(c) || TypeError(c, "url");
    c = acorn.util.urlFix(c);
    return new (a.module.bestMatchingShell(c).Model)({link:c})
  };
  return a
}.call(this, Shell.Model);
acorn.shellWithLink = LinkShell.Model.withLink;
LinkShell.MediaView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("link-shell");
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(acorn.util.iframe(this.model.get("link")));
    return this
  };
  return a
}(Shell.MediaView);
LinkShell.RemixView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("link-shell");
  a.prototype.render = function() {
    var c;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    c = acorn.util.iframe(this.model.get("link"));
    c.attr("scrolling", "no");
    this.$el.append(c);
    return this
  };
  a.activeLinkInput = !0;
  return a
}(Shell.RemixView);
acorn.registerShellModule(LinkShell);
var AcornLinkShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.AcornLinkShell = {};
LinkShell = acorn.shells.LinkShell;
AcornLinkShell = acorn.shells.AcornLinkShell = {id:"acorn.AcornLinkShell", title:"Acorn", description:"an acorn within an acorn", icon:"icon-play", validLinkPatterns:[acorn.util.urlRegEx("acorn.athena.ai/([A-Za-z]{10})/?")]};
AcornLinkShell.Model = function(b) {
  function a() {
    this.duration = __bind(this.duration, this);
    this.acornid = __bind(this.acornid, this);
    this.onceLoaded = __bind(this.onceLoaded, this);
    this.initialize = __bind(this.initialize, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.defaultAttributes = function() {
    var c, b, e;
    c = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(c, {title:null != (b = this.acornModel.title()) ? b : c.title, description:null != (e = this.acornModel.description()) ? e : c.description})
  };
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    this.acornModel = acorn(this.acornid());
    return this.acornModel.fetch({success:function() {
      c.shellModel = acorn.shellWithData(c.acornModel.shellData());
      return c.trigger("AcornLinkModel:Loaded")
    }})
  };
  a.prototype.onceLoaded = function(a) {
    return this.shellModel ? a() : this.once("AcornLinkModel:Loaded", a)
  };
  a.prototype.acornid = function() {
    var a, b;
    a = this.get("link");
    (b = _.find(this.module.validLinkPatterns, function(b) {
      return b.test(a)
    })) || ValueError("Incorrect acorn link, no acornid found.");
    return b.exec(a)[2]
  };
  a.prototype.duration = function() {
    var a, b;
    return null != (a = null != (b = this.shellModel) ? b.duration() : void 0) ? a : Infinity
  };
  return a
}(LinkShell.Model);
AcornLinkShell.MediaView = function(b) {
  function a() {
    this.duration = __bind(this.duration, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this.seek = __bind(this.seek, this);
    this.setMediaState = __bind(this.setMediaState, this);
    this.mediaState = __bind(this.mediaState, this);
    this.isInState = __bind(this.isInState, this);
    this.renderMediaView = __bind(this.renderMediaView, this);
    this.render = __bind(this.render, this);
    this.initializeMediaView = __bind(this.initializeMediaView, this);
    this.initializeMedia = __bind(this.initializeMedia, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("acorn-link-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {readyOnRender:!1})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:[], eventhub:this.eventhub});
    this.model.onceLoaded(this.initializeMediaView);
    return this
  };
  a.prototype.initializeMedia = function() {
  };
  a.prototype.initializeMediaView = function() {
    this.mediaView = new this.model.shellModel.module.MediaView({model:this.model.shellModel, eventhub:this.eventhub});
    this.listenTo(this.mediaView, "all", _.bind(this.trigger, this));
    this.initializeMediaEvents(this.options);
    this.controlsView.buttons = this.mediaView.controlsView ? [this.mediaView.controlsView] : this.mediaView.controls;
    this.controlsView.initializeButtons();
    return this.setMediaState("init")
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.model.onceLoaded(this.renderMediaView);
    return this
  };
  a.prototype.renderMediaView = function() {
    this.$el.append(this.mediaView.render().el);
    this.controlsView.softRender();
    return this
  };
  a.prototype.isInState = function(a) {
    var b;
    return(null != (b = this.mediaView) ? b.isInState(a) : void 0) || "init" === a
  };
  a.prototype.mediaState = function() {
    var a;
    return(null != (a = this.mediaView) ? a.mediaState() : void 0) || "init"
  };
  a.prototype.setMediaState = function(a) {
    var b;
    return null != (b = this.mediaView) ? b.setMediaState(a) : void 0
  };
  a.prototype.seek = function(c) {
    a.__super__.seek.apply(this, arguments);
    return this.mediaView.seek(c)
  };
  a.prototype.seekOffset = function() {
    var a;
    return null != (a = this.mediaView.seekOffset()) ? a : 0
  };
  a.prototype.duration = function() {
    return this.mediaView.duration()
  };
  return a
}(LinkShell.MediaView);
AcornLinkShell.RemixView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("acorn-link-shell");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.player = new acorn.player.Player({model:this.model.acornModel});
    return this.model.onceLoaded(this.model._updateAttributesWithDefaults)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.player.render().el);
    return this
  };
  return a
}(LinkShell.RemixView);
acorn.registerShellModule(AcornLinkShell);
var ImageLinkShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.ImageLinkShell = {};
LinkShell = acorn.shells.LinkShell;
ImageLinkShell = acorn.shells.ImageLinkShell = {id:"acorn.ImageLinkShell", title:"Image", description:"an embedded image", icon:"icon-picture", validLinkPatterns:[acorn.util.urlRegEx(".*.(jpg|jpeg|gif|png|svg)")]};
ImageLinkShell.Model = function(b) {
  function a() {
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.defaultAttributes = function() {
    var c;
    c = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(c, {thumbnail:this.link()})
  };
  return a
}(LinkShell.Model);
ImageLinkShell.MediaView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("image-link-shell");
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append($("<img>").attr("src", this.model.get("link")));
    return this
  };
  return a
}(LinkShell.MediaView);
ImageLinkShell.RemixView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("image-link-shell");
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append($("<img>").attr("src", this.model.get("link")));
    return this
  };
  return a
}(LinkShell.RemixView);
acorn.registerShellModule(ImageLinkShell);
var PDFLinkShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.PDFLinkShell = {};
LinkShell = acorn.shells.LinkShell;
PDFLinkShell = acorn.shells.PDFLinkShell = {id:"acorn.PDFLinkShell", title:"PDF", description:"an embedded PDF document", icon:"icon-file", validLinkPatterns:[acorn.util.urlRegEx(".*.pdf")]};
PDFLinkShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  return a
}(LinkShell.Model);
PDFLinkShell.MediaView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("pdf-shell");
  return a
}(LinkShell.MediaView);
PDFLinkShell.RemixView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("pdf-shell");
  return a
}(LinkShell.RemixView);
acorn.registerShellModule(PDFLinkShell);
var RandomShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.RandomShell = {};
CollectionShell = acorn.shells.CollectionShell;
RandomShell = acorn.shells.RandomShell = {id:"acorn.RandomShell", title:"Random Selector", description:"selects a random media item from a list", icon:"icon-magic"};
RandomShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  return a
}(CollectionShell.Model);
RandomShell.MediaView = function(b) {
  function a() {
    this.showRandom = __bind(this.showRandom, this);
    this.render = __bind(this.render, this);
    this.initializeControlsView = __bind(this.initializeControlsView, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("random-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!0, readyOnRender:!0, showFirstSubshellOnRender:!1, showSubshellControls:!0, showSubshellSummary:!0, autoAdvanceOnEnd:!1, playSubshellOnProgression:!0})
  };
  a.prototype.initializeControlsView = function() {
    var a = this;
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:["Random"], eventhub:this.eventhub});
    return this.listenTo(this.controlsView, "RandomControl:Click", function() {
      return a.showRandom()
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.showRandom();
    return this
  };
  a.prototype.showRandom = function() {
    return this.switchShell(Math.floor(Math.random() * this.shellViews.length), 0)
  };
  return a
}(CollectionShell.MediaView);
RandomShell.RemixView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("random-shell");
  return a
}(CollectionShell.RemixView);
acorn.registerShellModule(RandomShell);
var SlideshowShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.SlideshowShell = {};
CollectionShell = acorn.shells.CollectionShell;
SlideshowShell = acorn.shells.SlideshowShell = {id:"acorn.SlideshowShell", title:"Slideshow", description:"media displayed in a slideshow", icon:"icon-play-circle"};
SlideshowShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.delay = a.property("delay", {"default":5});
  return a
}(CollectionShell.Model);
SlideshowShell.MediaView = function(b) {
  function a() {
    this._onCountdownFinish = __bind(this._onCountdownFinish, this);
    this._clearCountdown = __bind(this._clearCountdown, this);
    this._countdown = __bind(this._countdown, this);
    this.showPrevious = __bind(this.showPrevious, this);
    this.showNext = __bind(this.showNext, this);
    this.onMediaDidEnd = __bind(this.onMediaDidEnd, this);
    this.onMediaDidPause = __bind(this.onMediaDidPause, this);
    this.onMediaDidPlay = __bind(this.onMediaDidPlay, this);
    this.remove = __bind(this.remove, this);
    this.initializePlayPauseToggleView = __bind(this.initializePlayPauseToggleView, this);
    this.initializeControlsView = __bind(this.initializeControlsView, this);
    this.initializeSubshellEvents = __bind(this.initializeSubshellEvents, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("slideshow-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!0, autoAdvanceOnEnd:!1})
  };
  a.prototype.initializeSubshellEvents = function() {
    var c = this;
    a.__super__.initializeSubshellEvents.apply(this, arguments);
    return this.on("Subshell:Media:DidEnd", function() {
      if(c.isPlaying() && null == c._counter) {
        return c.showNext()
      }
    })
  };
  a.prototype.initializeControlsView = function() {
    var a = this;
    this.initializePlayPauseToggleView();
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:["Previous", this.playPauseToggleView, "Next"], eventhub:this.eventhub});
    this.controlsView.on("PreviousControl:Click", this.showPrevious);
    this.controlsView.on("NextControl:Click", this.showNext);
    this.controlsView.on("PlayControl:Click", function() {
      return a.play()
    });
    return this.controlsView.on("PauseControl:Click", function() {
      return a.pause()
    })
  };
  a.prototype.initializePlayPauseToggleView = function() {
    var a, b = this;
    a = new Backbone.Model;
    a.isPlaying = function() {
      return b.isPlaying()
    };
    return this.playPauseToggleView = new acorn.player.controls.PlayPauseControlToggleView({eventhub:this.eventhub, model:a})
  };
  a.prototype.remove = function() {
    this.controlsView.off("PreviousControl:Click", this.showPrevious);
    this.controlsView.off("NextControl:Click", this.showNext);
    this.controlsView.off("PlayControl:Click");
    this.controlsView.off("PauseControl:Click");
    this._clearCountdown();
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.onMediaDidPlay = function() {
    this.playPauseToggleView.refreshToggle();
    return this._countdown()
  };
  a.prototype.onMediaDidPause = function() {
    this.playPauseToggleView.refreshToggle();
    return this._clearCountdown()
  };
  a.prototype.onMediaDidEnd = function() {
    this.playPauseToggleView.refreshToggle();
    return this._clearCountdown()
  };
  a.prototype.showNext = function() {
    a.__super__.showNext.apply(this, arguments);
    return this._countdown()
  };
  a.prototype.showPrevious = function() {
    a.__super__.showPrevious.apply(this, arguments);
    return this._countdown()
  };
  a.prototype._countdown = function() {
    this._clearCountdown();
    if(this.isPlaying()) {
      return this._counter = setTimeout(this._onCountdownFinish, 1E3 * this.model.delay())
    }
  };
  a.prototype._clearCountdown = function() {
    clearTimeout(this._counter);
    return this._counter = void 0
  };
  a.prototype._onCountdownFinish = function() {
    var a, b;
    this._clearCountdown();
    a = this.shellViews[this.currentIndex];
    if(this.isPlaying() && (!(0 < (b = null != a ? "function" === typeof a.duration ? a.duration() : void 0 : void 0) && Infinity > b) || !a.isPlaying())) {
      return this.showNext()
    }
  };
  return a
}(CollectionShell.MediaView);
SlideshowShell.RemixView = function(b) {
  function a() {
    this._onTimeInputChanged = __bind(this._onTimeInputChanged, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("slideshow-shell");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.timeInputView = new acorn.player.TimeInputView({name:"delay:", value:this.model.delay(), min:0, max:Infinity, padTime:!1, extraClasses:["slide-delay"]});
    return this.timeInputView.on("TimeInputView:TimeDidChange", this._onTimeInputChanged)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.append(this.timeInputView.render().el);
    return this
  };
  a.prototype._onTimeInputChanged = function(a) {
    return this.model.delay(a)
  };
  return a
}(CollectionShell.RemixView);
acorn.registerShellModule(SlideshowShell);
var SplicedShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.SplicedShell = {};
CollectionShell = acorn.shells.CollectionShell;
SplicedShell = acorn.shells.SplicedShell = {id:"acorn.SplicedShell", title:"Spliced", description:"media spliced together", icon:"icon-play"};
SplicedShell.Model = function(b) {
  function a() {
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.transition = a.property("transition");
  a.prototype.defaultAttributes = function() {
    var c, b, e;
    c = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(c, {title:null != (b = null != (e = this.shells().first()) ? e.title() : void 0) ? b : c.title})
  };
  return a
}(CollectionShell.Model);
SplicedShell.MediaView = function(b) {
  function a() {
    this.onMediaDidEnd = __bind(this.onMediaDidEnd, this);
    this.onMediaDidPause = __bind(this.onMediaDidPause, this);
    this.onMediaDidPlay = __bind(this.onMediaDidPlay, this);
    this.seek = __bind(this.seek, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this._onProgressBarDidProgress = __bind(this._onProgressBarDidProgress, this);
    this.progressBarState = __bind(this.progressBarState, this);
    this.render = __bind(this.render, this);
    this.remove = __bind(this.remove, this);
    this.initializeElapsedTimeView = __bind(this.initializeElapsedTimeView, this);
    this.initializePlayPauseToggleView = __bind(this.initializePlayPauseToggleView, this);
    this.initializeControlsView = __bind(this.initializeControlsView, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("spliced-shell");
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click .click-capture":function() {
      return c.togglePlayPause()
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!0, subshellPlayOnReady:!1, showSubshellControls:!1, showSubshellSummary:!1, autoAdvanceOnEnd:!0, playSubshellOnProgression:!0, restartSubshellOnProgression:!0})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.on("Media:Progress", this._updateProgressBar)
  };
  a.prototype.initializeControlsView = function() {
    var a = this;
    this.initializePlayPauseToggleView();
    this.initializeElapsedTimeView();
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:[this.playPauseToggleView, this.elapsedTimeView], eventhub:this.eventhub});
    this.controlsView.on("PlayControl:Click", function() {
      return a.play()
    });
    this.controlsView.on("PauseControl:Click", function() {
      return a.pause()
    });
    return this.controlsView.on("ElapsedTimeControl:Seek", this.seek)
  };
  a.prototype.initializePlayPauseToggleView = function() {
    var a, b = this;
    a = new Backbone.Model;
    a.isPlaying = function() {
      return b.isPlaying()
    };
    return this.playPauseToggleView = new acorn.player.controls.PlayPauseControlToggleView({eventhub:this.eventhub, model:a})
  };
  a.prototype.initializeElapsedTimeView = function() {
    var a;
    a = new Backbone.Model({elapsed:0, total:this.duration() || 0});
    this.elapsedTimeView = new acorn.player.controls.ElapsedTimeControlView({eventhub:this.eventhub, model:a});
    return a.listenTo(this, "Media:Progress", function(b, e, f) {
      a.set("elapsed", e);
      return a.set("total", f || 0)
    })
  };
  a.prototype.remove = function() {
    this.controlsView.off("PlayControl:Click");
    this.controlsView.off("PauseControl:Click");
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.render = function() {
    var c = this;
    a.__super__.render.apply(this, arguments);
    _.each(_.range(1, this.shellViews.length), function(a) {
      c.showView(a);
      c.shellViews[a].pause();
      return c.hideView(a)
    });
    this.showView(0, 0);
    this.$el.append($("<div>").addClass("click-capture"));
    return this
  };
  a.prototype.progressBarState = function() {
    return _.isFinite(this.duration()) ? {showing:!0, progress:this.percentProgress()} : {showing:!1, progress:0}
  };
  a.prototype._onProgressBarDidProgress = function(a) {
    a = this.progressFromPercent(a);
    if(a.toFixed(5) !== this.seekOffset().toFixed(5)) {
      return this.seek(a)
    }
  };
  a.prototype.seekOffset = function() {
    var a;
    a = _.map(_.range(this.currentIndex), this.shellView);
    return this.shellView().seekOffset() + this.duration(a)
  };
  a.prototype.seek = function(c) {
    var b, e, f, g, h;
    a.__super__.seek.apply(this, arguments);
    h = _.range(this.shellViews.length);
    f = 0;
    for(g = h.length;f < g;f++) {
      if(b = h[f], e = this.shellView(b), c >= e.duration()) {
        c -= e.duration()
      }else {
        this.switchShell(b, c);
        break
      }
    }
  };
  a.prototype.onMediaDidPlay = function() {
    a.__super__.onMediaDidPlay.apply(this, arguments);
    return this.playPauseToggleView.refreshToggle()
  };
  a.prototype.onMediaDidPause = function() {
    a.__super__.onMediaDidPause.apply(this, arguments);
    return this.playPauseToggleView.refreshToggle()
  };
  a.prototype.onMediaDidEnd = function() {
    return this.playPauseToggleView.refreshToggle()
  };
  return a
}(CollectionShell.MediaView);
SplicedShell.RemixView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("spliced-shell");
  return a
}(CollectionShell.RemixView);
acorn.registerShellModule(SplicedShell);
var TextShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.TextShell = {};
Shell = acorn.shells.Shell;
TextShell = acorn.shells.TextShell = {id:"acorn.TextShell", title:"Text", description:"simple text", icon:"icon-align-left"};
TextShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.text = a.property("text");
  return a
}(Shell.Model);
TextShell.MediaView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("text-shell");
  a.prototype.render = function() {
    var c;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    c = $("<pre>");
    c.text(this.model.get("text"));
    this.$el.append(c);
    return this
  };
  return a
}(Shell.MediaView);
TextShell.RemixView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("text-shell row-fluid");
  a.prototype.placeholder = "enter text here";
  a.prototype.template = _.template('<textarea placeholder="<%= placeholder %>"><%= text %></textarea>');
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"keyup textarea":function() {
      return c.model.text(c.$("textarea").first().val())
    }})
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template({placeholder:this.placeholder, text:this.model.get("text")}));
    return this
  };
  return a
}(Shell.RemixView);
acorn.registerShellModule(TextShell);
var DocShell, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.DocShell = {};
TextShell = acorn.shells.TextShell;
DocShell = acorn.shells.DocShell = {id:"acorn.DocShell", title:"Doc", description:"a formatted document", icon:"icon-align-justify"};
DocShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.language = a.property("language", {"default":"markdown"});
  return a
}(TextShell.Model);
DocShell.MediaView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("doc-shell");
  a.prototype.initialize = function() {
    var c;
    a.__super__.initialize.apply(this, arguments);
    c = function(a) {
      return a
    };
    "markdown" === this.model.language() && (c = athena.lib.DocView.renderMarkdown);
    return this.docView = new athena.lib.DocView({eventhub:this.eventhub, render:c, doc:this.model.text()})
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.docView.render().el);
    return this
  };
  return a
}(TextShell.MediaView);
DocShell.RemixView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.placeholder = "enter text here - DocShell text is processed with Markdown";
  a.prototype.className = a.classNameExtend("doc-shell row-fluid");
  return a
}(TextShell.RemixView);
acorn.registerShellModule(DocShell);
var EmptyShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
TextShell = acorn.shells.TextShell;
EmptyShell = acorn.shells.EmptyShell;
LinkShell = acorn.shells.LinkShell;
PDFLinkShell = acorn.shells.PDFLinkShell;
ImageLinkShell = acorn.shells.ImageLinkShell;
AcornLinkShell = acorn.shells.AcornLinkShell;
acorn.player.RemixerView = function(b) {
  function a() {
    this.onLinkChange = __bind(this.onLinkChange, this);
    this.onBlurInput = __bind(this.onBlurInput, this);
    this.onKeyupInput = __bind(this.onKeyupInput, this);
    this.alert = __bind(this.alert, this);
    this.setToolbarButtons = __bind(this.setToolbarButtons, this);
    this.shellIsValid = __bind(this.shellIsValid, this);
    this.swapShell = __bind(this.swapShell, this);
    this.renderRemixSubview = __bind(this.renderRemixSubview, this);
    this.renderSummarySubview = __bind(this.renderSummarySubview, this);
    this.renderInputField = __bind(this.renderInputField, this);
    this.renderToolbarView = __bind(this.renderToolbarView, this);
    this.render = __bind(this.render, this);
    this._initializeRemixSubview = __bind(this._initializeRemixSubview, this);
    this._initializeToolbarView = __bind(this._initializeToolbarView, this);
    this._initializeDropdownView = __bind(this._initializeDropdownView, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("remixer-view row-fluid");
  a.prototype.template = _.template('<div class="row-fluid control-group remixer-header">\n  <div class="input-append">\n    <div class="btn-group dropdown-view"></div>\n  </div>\n  <div class="toolbar"></div>\n</div>\n<div class="alert"></div>\n<div class="remixer-summary"></div>\n<div class="remixer-content"></div>');
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"blur input#link":this.onBlurInput, "keyup input#link":this.onKeyupInput})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {toolbarButtons:[{id:"Clear", icon:"icon-undo", tooltip:"Clear"}, {id:"Duplicate", icon:"icon-copy", tooltip:"Duplicate"}, {id:"Delete", icon:"icon-remove", tooltip:"Delete"}], showSummary:!0, allowEmptyLink:!1, validShells:_.values(acorn.shells.Registry.modules)})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.model instanceof acorn.shells.Shell.Model || TypeError(this.model, "Shell.Model");
    this._initializeDropdownView();
    this.setToolbarButtons();
    this.options.showSummary && (this.summarySubview = new acorn.player.EditSummaryView({eventhub:this.eventhub, model:this.model}));
    return this._initializeRemixSubview()
  };
  a.prototype._initializeDropdownView = function() {
    var a, b, e = this;
    a = function(a) {
      return{id:a.id, name:a.title, icon:a.icon}
    };
    a = [a(LinkShell), a(AcornLinkShell), a(ImageLinkShell), a(PDFLinkShell), a(YouTubeShell), a(VimeoShell), a(TextShell), a(DocShell), a(EmptyShell)];
    b = this.model.module.id;
    b === Shell.id && (b = EmptyShell.id);
    this.dropdownView = new acorn.player.DropdownView({items:a, selected:b, eventhub:this.eventhub, disabled:!0});
    return this.dropdownView.on("Dropdown:Selected", function(a, c) {
      if(c !== e.model.shellid()) {
        return e.swapShell(Shell.Model.withData({shellid:c, link:e.model.link()}))
      }
    })
  };
  a.prototype._initializeToolbarView = function() {
    var a, b = this;
    null != (a = this.toolbarView) && a.destroy();
    this.toolbarView = new athena.lib.ToolbarView({eventhub:this.eventhub, buttons:this.toolbarButtons, extraClasses:["btn-group"]});
    this.toolbarView.on("all", function(a) {
      if(/Toolbar:Click:/.test(a)) {
        return b.trigger("Remixer:" + a, b)
      }
    });
    return this.toolbarView.on("Toolbar:Click:Clear", function() {
      return b.swapShell(new EmptyShell.Model)
    })
  };
  a.prototype._initializeRemixSubview = function() {
    var a = this;
    this.remixSubview = new this.model.module.RemixView({eventhub:this.eventhub, model:this.model});
    return this.remixSubview.on("Remix:SwapShell", function(b, e) {
      return a.swapShell(e)
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template());
    this.alert();
    this.$linkContainer = this.$el.children(".remixer-header").children(".input-append");
    this.dropdownView.setElement(this.$(".dropdown-view").first()).render();
    this.renderToolbarView();
    this.renderInputField();
    this.renderSummarySubview();
    this.renderRemixSubview();
    return this
  };
  a.prototype.renderToolbarView = function() {
    var a;
    a = this.toolbarButtons.length;
    0 < a && this.$(".toolbar").first().append(this.toolbarView.render().el);
    return this.$(".remixer-header").first().attr("data-button-count", a)
  };
  a.prototype.renderInputField = function() {
    var a, b;
    a = this.model.module;
    this.$linkContainer.children("#link").remove();
    if(a.RemixView.activeLinkInput) {
      return this.$linkContainer.removeClass("input-prepend"), this.$linkContainer.prepend("<input id='link' type='text'          placeholder='enter link to media (e.g. a youtube video, image, or pdf)'/>"), this.$linkContainer.children("input#link").val("function" === typeof(b = this.model).link ? b.link() : void 0)
    }
    this.$linkContainer.addClass("input-prepend");
    this.$linkContainer.prepend('<span id="link" class="add-on uneditable-input">          </span>');
    a = "" + a.title + " - " + a.description;
    return this.$linkContainer.children("span#link").text(a)
  };
  a.prototype.renderSummarySubview = function() {
    if(this.options.showSummary) {
      return this.model !== this.summarySubview.model && this.summarySubview.setModel(this.model), this.rendering && (this.$(".remixer-summary").first().empty(), this.$(".remixer-summary").first().append(this.summarySubview.render().el)), this
    }
  };
  a.prototype.renderRemixSubview = function() {
    var a;
    this.model !== this.remixSubview.model && (null != (a = this.remixSubview) && a.destroy(), this._initializeRemixSubview());
    this.rendering && (this.$(".remixer-content").first().empty(), this.$(".remixer-content").first().append(this.remixSubview.render().el));
    this.$el.removeClass("empty");
    this.model.module === EmptyShell && this.$el.addClass("empty");
    return this
  };
  a.prototype.swapShell = function(a) {
    var b;
    b = this.model;
    this.model = a;
    this.dropdownView.selected(this.model.shellid());
    this.renderInputField();
    this.renderSummarySubview();
    this.renderRemixSubview();
    this.trigger("Remixer:SwapShell", this, b, a);
    this.remixSubview.trigger("Remix:SwappedShell", b, a);
    return this
  };
  a.prototype.shellIsValid = function(a) {
    return _.any(this.options.validShells, function(b) {
      return a instanceof b.Model
    })
  };
  a.prototype.setToolbarButtons = function(a) {
    this.toolbarButtons = null != a ? a : this.options.toolbarButtons;
    this._initializeToolbarView();
    if(this.rendering) {
      return this.renderToolbarView()
    }
  };
  a.prototype.alert = function(a, b) {
    var e;
    null == b && (b = "error");
    e = this.$(".alert").first();
    e.text(a);
    e.removeClass("alert-error");
    e.removeClass("alert-success");
    this.$(".remixer-header").first().removeClass("error");
    this.$(".remixer-header").first().removeClass("success");
    if(a) {
      return this.$(".remixer-header").first().addClass(b), e.addClass("alert-" + b), e.show()
    }
    e.hide()
  };
  a.prototype.onKeyupInput = function(a) {
    var b, e;
    if(a.target === this.$linkContainer.children("input#link")[0]) {
      switch(a.keyCode) {
        case athena.lib.util.keys.ENTER:
          return this.onLinkChange();
        case athena.lib.util.keys.ESCAPE:
          return this.$linkContainer.children("input#link").val(null != (e = "function" === typeof(b = this.model).link ? b.link() : void 0) ? e : ""), this.onLinkChange()
      }
    }
  };
  a.prototype.onBlurInput = function(a) {
    if(a.target === this.$linkContainer.children("input#link")[0]) {
      return this.onLinkChange()
    }
  };
  a.prototype.onLinkChange = function() {
    var a, b, e, f, g;
    this.alert();
    a = this.$linkContainer.children("input#link").val().trim();
    a = acorn.util.urlFix(a);
    if(a !== ("function" === typeof(b = this.model).link ? b.link() : void 0)) {
      if("" === a) {
        if(!this.options.allowEmptyLink) {
          this.$linkContainer.children("input#link").val("function" === typeof(e = this.model).link ? e.link() : void 0);
          return
        }
        this.model.link(a);
        this.renderRemixSubview()
      }else {
        if(acorn.util.isUrl(a)) {
          b = LinkShell.Model.withLink(a);
          if(!this.shellIsValid(b)) {
            console.log("invalid shell");
            a = _.pluck(this.options.validShells, "title");
            this.alert("Invalid link. Enter a link to: " + a.join(", "));
            return
          }
          b instanceof Shell.Model && b.shellid() !== this.model.shellid() ? this.swapShell(b) : (this.model.link(a), this.renderRemixSubview())
        }
      }
      this.$linkContainer.children("input#link").val("function" === typeof(f = this.model).link ? f.link() : void 0);
      return this.trigger("Remixer:LinkChanged", this, "function" === typeof(g = this.model).link ? g.link() : void 0)
    }
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.EditImageView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("edit-image-view");
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    null == this.model && (this.model = new ImageLinkShell.Model({link:this.options.link}));
    this.remixerView = new acorn.player.RemixerView({eventhub:this.eventhub, model:this.model, showSummary:!1, allowEmptyLink:!0, toolbarButtons:[{id:"Cancel", icon:"icon-remove", tooltip:"Cancel"}, {id:"Save", icon:"icon-ok", tooltip:"Save"}], validShells:[ImageLinkShell]});
    this.remixerView.on("Remixer:LinkChanged", function() {
      return console.log("Link Changed")
    });
    this.remixerView.on("Remixer:Toolbar:Click:Cancel", function() {
      return c.trigger("EditImage:Cancel")
    });
    return this.remixerView.on("Remixer:Toolbar:Click:Save", function() {
      return c.trigger("EditImage:Save")
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.remixerView.render().el);
    return this
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.EditSummaryView = function(b) {
  function a() {
    this._transferNonDefaultValues = __bind(this._transferNonDefaultValues, this);
    this._markupDefaults = __bind(this._markupDefaults, this);
    this.value = __bind(this.value, this);
    this.saveData = __bind(this.saveData, this);
    this.renderData = __bind(this.renderData, this);
    this.render = __bind(this.render, this);
    this.onModelChange = __bind(this.onModelChange, this);
    this.setModel = __bind(this.setModel, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("edit-summary-view");
  a.prototype.template = _.template('<div class="thumbnail-view span3">\n  <img class="img-rounded" src="" />\n  <p class="banner">edit</p>\n</div>\n<div class="span9">\n  <input type="text" placeholder="title" class="title">\n  <textarea placeholder="description" class="description"></textarea>\n  <div class="buttons"></div>\n</div>');
  a.prototype.events = function() {
    var c = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"keyup input":this._markupDefaults, "keyup textarea":this._markupDefaults, "blur input":this.saveData, "blur textarea":this.saveData, "click .thumbnail-view":function() {
      c.popoverView.toggle();
      return c._markupDefaults()
    }})
  };
  a.prototype.initialize = function() {
    var c, b = this;
    a.__super__.initialize.apply(this, arguments);
    this.setModel(this.model);
    c = new ImageLinkShell.Model({link:this.model.thumbnail()});
    this.editImageView = new acorn.player.EditImageView({eventhub:this.eventhub, model:c});
    this.popoverView = new athena.lib.PopoverView({eventhub:this.eventhub, content:this.editImageView, trigger:"manual", placementOffset:{top:70}});
    this.listenTo(this.popoverView, "PopoverView:PopoverDidShow", function() {
      return b.editImageView.$("#link").select()
    });
    this.listenTo(this.editImageView, "EditImage:Cancel", function() {
      b.editImageView.model.link(b.model.thumbnail());
      return b.popoverView.hide()
    });
    return this.listenTo(this.editImageView, "EditImage:Save", function() {
      b.model.thumbnail(b.editImageView.model.link());
      return b.popoverView.hide()
    })
  };
  a.prototype.setModel = function(c) {
    var b;
    b = this.model;
    a.__super__.setModel.apply(this, arguments);
    return this._transferNonDefaultValues(this.model, b)
  };
  a.prototype.onModelChange = function() {
    var c;
    a.__super__.onModelChange.apply(this, arguments);
    return null != (c = this.editImageView) ? c.model.link(this.model.thumbnail()) : void 0
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.popoverView.options.popover = this.$(".thumbnail-view").first();
    this.popoverView.render();
    return this
  };
  a.prototype.renderData = function() {
    this.$(".title").first().val(this.model.title());
    this.$(".description").first().val(this.model.description());
    this.$(".thumbnail-view img").first().attr("src", this.model.thumbnail());
    this._markupDefaults();
    return this
  };
  a.prototype.saveData = function() {
    this.value("title") && this.model.title(this.value("title"));
    this.value("description") && this.model.description(this.value("description"));
    this.renderData();
    return this
  };
  a.prototype.value = function(a) {
    var b, e;
    return null != (b = this.$("." + a).first()) ? null != (e = b.val()) ? e.trim() : void 0 : void 0
  };
  a.prototype._markupDefaults = function() {
    var a, b, e, f, g;
    e = {title:this.$(".title"), description:this.$(".description"), thumbnail:this.$(".popover-view #link")};
    g = [];
    for(a in e) {
      b = e[a], (null != (f = b.val()) ? f.trim() : void 0) === this.model.defaultAttributes()[a] ? g.push(b.addClass("default")) : g.push(b.removeClass("default"))
    }
    return g
  };
  a.prototype._transferNonDefaultValues = function(a, b) {
    var e, f, g, h, i;
    if(a && b) {
      f = ["title", "description", "thumbnail"];
      i = [];
      g = 0;
      for(h = f.length;g < h;g++) {
        e = f[g], b[e]() !== b.defaultAttributes()[e] ? i.push(a[e](b[e]())) : i.push(void 0)
      }
      return i
    }
  };
  return a
}(acorn.player.SummaryView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.ShellOptionsView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("shell-options-view");
  a.prototype.initialize = function() {
    var c, b = this;
    a.__super__.initialize.apply(this, arguments);
    c = _.map(acorn.shells.Registry.collectionModules(), function(a) {
      return{id:a.id, name:a.title, icon:a.icon}
    });
    this.dropdownView = new acorn.player.DropdownView({eventhub:this.eventhub, items:c, selected:this.model.module.id});
    this.dropdownView.on("Dropdown:Selected", function() {
      var a;
      a = b.dropdownView.selected();
      if(a !== b.model.shellid()) {
        return b.trigger("ShellOptions:SwapShell", a)
      }
    });
    this.summaryView = new acorn.player.EditSummaryView({eventhub:this.eventhub, model:this.model});
    return this.remixView = new this.model.module.RemixView({eventhub:this.eventhub, model:this.model})
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.dropdownView.render().el);
    this.$el.append(this.summaryView.render().el);
    this.$el.append(this.remixView.render().el);
    return this
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
TextShell = acorn.shells.TextShell;
DocShell = acorn.shells.DocShell;
acorn.player.ShellSelectorView = function(b) {
  function a() {
    this.select = __bind(this.select, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("shell-selector-view");
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"click a":function(a) {
      return a.preventDefault()
    }})
  };
  a.prototype.template = _.template('<div class="row-fluid select-divider">\n  <hr class="span4"></hr>\n  <div class="span4 align-center">or select other type below</div>\n  <hr class="span4"></hr>\n</div>');
  a.prototype.initialize = function() {
    var c, b = this;
    a.__super__.initialize.apply(this, arguments);
    null == this.modules && (this.modules = [TextShell, DocShell]);
    c = _.map(this.modules, function(a) {
      return new Backbone.Model({text:a.title, icon:a.icon, tooltip:{title:a.description}, shell:a.id})
    });
    this.gridView = new athena.lib.GridView({collection:new Backbone.Collection(c), eventhub:this.eventhub});
    return this.listenTo(this.gridView, "GridTile:Click", function(a) {
      return b.select(a.model.get("shell"))
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template());
    this.$el.append(this.gridView.render().el);
    return this
  };
  a.prototype.select = function(a) {
    return this.trigger("ShellSelector:Selected", this, a)
  };
  return a
}(athena.lib.View);
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.shells.EmptyShell = {};
Shell = acorn.shells.Shell;
EmptyShell = acorn.shells.EmptyShell = {id:"acorn.EmptyShell", title:"Empty", description:"an empty, nutless shell", icon:"icon-link"};
EmptyShell.Model = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  return a
}(Shell.Model);
EmptyShell.MediaView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("empty-shell");
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append("this acorn is empty :(");
    return this
  };
  return a
}(Shell.MediaView);
EmptyShell.RemixView = function(b) {
  function a() {
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("empty-shell");
  a.prototype.initialize = function() {
    var c = this;
    a.__super__.initialize.apply(this, arguments);
    this.selectorView = new acorn.player.ShellSelectorView({eventhub:this.eventhub});
    return this.listenTo(this.selectorView, "ShellSelector:Selected", function(a, b) {
      var f;
      if(f = acorn.shellModuleWithId(b)) {
        return c.trigger("Remix:SwapShell", c.model, new f.Model)
      }
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.selectorView.render().el);
    return this
  };
  a.activeLinkInput = !0;
  return a
}(Shell.RemixView);
acorn.registerShellModule(EmptyShell);
var RemixerView, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
Shell = acorn.shells.Shell;
EmptyShell = acorn.shells.EmptyShell;
RemixerView = acorn.player.RemixerView;
acorn.player.ShellEditorView = function(b) {
  function a() {
    this._onShellsUpdated = __bind(this._onShellsUpdated, this);
    this._onRemixerLinkChanged = __bind(this._onRemixerLinkChanged, this);
    this._onRemixerSwapShell = __bind(this._onRemixerSwapShell, this);
    this._onThumbnailChange = __bind(this._onThumbnailChange, this);
    this._shellIsStub = __bind(this._shellIsStub, this);
    this.isEmpty = __bind(this.isEmpty, this);
    this.shell = __bind(this.shell, this);
    this.expand = __bind(this.expand, this);
    this.minimize = __bind(this.minimize, this);
    this._setRemixerToolbarButtons = __bind(this._setRemixerToolbarButtons, this);
    this._renderSectionHeading = __bind(this._renderSectionHeading, this);
    this._renderRemixerViewHeading = __bind(this._renderRemixerViewHeading, this);
    this._renderUpdates = __bind(this._renderUpdates, this);
    this._renderFooter = __bind(this._renderFooter, this);
    this._renderRemixerView = __bind(this._renderRemixerView, this);
    this._renderRemixerViews = __bind(this._renderRemixerViews, this);
    this._renderHeader = __bind(this._renderHeader, this);
    this.render = __bind(this.render, this);
    this._minimizedRemixerToolbarButtons = __bind(this._minimizedRemixerToolbarButtons, this);
    this._remixerToolbarButtons = __bind(this._remixerToolbarButtons, this);
    this._initializeRemixerForShell = __bind(this._initializeRemixerForShell, this);
    this._initializeRemixerViews = __bind(this._initializeRemixerViews, this);
    this._initializeModel = __bind(this._initializeModel, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("shell-editor-view");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {minimize:!1, expandOnUpdate:!0})
  };
  a.prototype.template = _.template('<div class="remix-views"></div>');
  a.prototype.defaultShell = EmptyShell;
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this._initializeModel();
    this._initializeRemixerViews();
    this.options.minimize && this.minimize();
    return this.on("ShellEditor:ShellsUpdated", this._onShellsUpdated)
  };
  a.prototype._initializeModel = function() {
    if(!(this.model instanceof Shell.Model)) {
      return this.model = new this.defaultShell.Model
    }
  };
  a.prototype._initializeRemixerViews = function() {
    return this.remixerViews = [this._initializeRemixerForShell(this.model)]
  };
  a.prototype._initializeRemixerForShell = function(a) {
    a = new RemixerView({eventhub:this.eventhub, model:a, toolbarButtons:this._remixerToolbarButtons()});
    a.on("Remixer:SwapShell", this._onRemixerSwapShell);
    a.on("Remixer:LinkChanged", this._onRemixerLinkChanged);
    return a
  };
  a.prototype._remixerToolbarButtons = function() {
    return[{id:"Clear", icon:"icon-undo", tooltip:"Clear"}]
  };
  a.prototype._minimizedRemixerToolbarButtons = function() {
    return[]
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template());
    this._renderHeader();
    this._renderRemixerViews();
    this._renderFooter();
    this._renderUpdates();
    return this
  };
  a.prototype._renderHeader = function() {
  };
  a.prototype._renderRemixerViews = function() {
    return _.each(this.remixerViews, this._renderRemixerView)
  };
  a.prototype._renderRemixerView = function(a, b) {
    null == b && (b = this.model.shells().indexOf(a.model));
    a.render();
    a.$el.append($("<hr>"));
    null != b ? this.$(".remix-views").first().insertAt(b, a.el) : this.$(".remix-views").first().append(a.el);
    return this
  };
  a.prototype._renderFooter = function() {
  };
  a.prototype._renderUpdates = function() {
    var a = this;
    this.rendering && _.each(this.remixerViews, function(b) {
      a._renderRemixerViewHeading(b);
      return a._shellIsStub(b.model) ? b.$el.addClass("stub-remixer") : b.$el.removeClass("stub-remixer")
    });
    this._lastThumbnail !== this.model.thumbnail() && this._onThumbnailChange();
    return this
  };
  a.prototype._renderRemixerViewHeading = function(a) {
    this._renderSectionHeading(a);
    return this
  };
  a.prototype._renderSectionHeading = function(a, b) {
    var e;
    a.$(".editor-section").remove();
    e = this._shellIsStub(a.model) ? "add a media item by entering a link:" : a.model.module.title;
    b && (e = b + ": " + e);
    return a.$el.prepend($("<h3>").addClass("editor-section").text(e))
  };
  a.prototype._setRemixerToolbarButtons = function(a) {
    var b, e, f, g, h;
    if(null != a) {
      g = this.remixerViews;
      h = [];
      e = 0;
      for(f = g.length;e < f;e++) {
        b = g[e], h.push(b.setToolbarButtons(a))
      }
      return h
    }
  };
  a.prototype.minimize = function() {
    if(!this.minimized) {
      return this.$el.addClass("minimized"), this.minimized = !0, this._setRemixerToolbarButtons(this._minimizedRemixerToolbarButtons()), this.trigger("ShellEditor:Minimize")
    }
  };
  a.prototype.expand = function() {
    if(this.minimized) {
      return this.$el.removeClass("minimized"), this.minimized = !1, this._setRemixerToolbarButtons(this._remixerToolbarButtons()), this.trigger("ShellEditor:Expand")
    }
  };
  a.prototype.shell = function() {
    return this.model.clone()
  };
  a.prototype.isEmpty = function() {
    return this._shellIsStub(this.model)
  };
  a.prototype._shellIsStub = function(a) {
    return(null != a ? a.constructor : void 0) === this.defaultShell.Model
  };
  a.prototype._onThumbnailChange = function() {
    this._lastThumbnail = this.model.thumbnail();
    this.trigger("ShellEditor:Thumbnail:Change", this._lastThumbnail);
    return this.eventhub.trigger("ShellEditor:Thumbnail:Change", this._lastThumbnail)
  };
  a.prototype._onRemixerSwapShell = function(a, b, e) {
    this.model = e;
    this.remixerViews[0].model !== this.model && (this.remixerViews[0].destroy(), this.remixerViews[0] = this._initializeRemixerForShell(this.model));
    return this.trigger("ShellEditor:ShellsUpdated")
  };
  a.prototype._onRemixerLinkChanged = function() {
    return this.trigger("ShellEditor:ShellsUpdated")
  };
  a.prototype._onShellsUpdated = function() {
    this._renderUpdates();
    if(this.options.expandOnUpdate) {
      return this.expand()
    }
  };
  return a
}(athena.lib.View);
var ShellEditorView, ShellOptionsView, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
CollectionShell = acorn.shells.CollectionShell;
ShellOptionsView = acorn.player.ShellOptionsView;
ShellEditorView = acorn.player.ShellEditorView;
acorn.player.CollectionShellEditorView = function(b) {
  function a() {
    this._onRemixerClickDelete = __bind(this._onRemixerClickDelete, this);
    this._onRemixerClickDuplicate = __bind(this._onRemixerClickDuplicate, this);
    this._onRemixerSwapShell = __bind(this._onRemixerSwapShell, this);
    this._onThumbnailChange = __bind(this._onThumbnailChange, this);
    this._swapTopLevelShell = __bind(this._swapTopLevelShell, this);
    this._swapSubShell = __bind(this._swapSubShell, this);
    this._lastNonDefaultShellIndex = __bind(this._lastNonDefaultShellIndex, this);
    this.removeShell = __bind(this.removeShell, this);
    this.addShell = __bind(this.addShell, this);
    this._shellIsStub = __bind(this._shellIsStub, this);
    this.isEmpty = __bind(this.isEmpty, this);
    this.shell = __bind(this.shell, this);
    this._renderRemixerViewHeading = __bind(this._renderRemixerViewHeading, this);
    this._renderUpdates = __bind(this._renderUpdates, this);
    this._renderHeader = __bind(this._renderHeader, this);
    this._initializeShellOptionsView = __bind(this._initializeShellOptionsView, this);
    this._remixerToolbarButtons = __bind(this._remixerToolbarButtons, this);
    this._initializeRemixerForShell = __bind(this._initializeRemixerForShell, this);
    this._initializeRemixerViews = __bind(this._initializeRemixerViews, this);
    this._initializeModel = __bind(this._initializeModel, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("collection-shell-editor-view");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this._initializeShellOptionsView()
  };
  a.prototype._initializeModel = function() {
    var c;
    a.__super__._initializeModel.apply(this, arguments);
    this.model instanceof CollectionShell.Model || (c = this.model, this.model = new CollectionShell.Model, this.model.shells().push(c));
    if(!this._shellIsStub(this.model.shells().last())) {
      return this.model.shells().push(new this.defaultShell.Model)
    }
  };
  a.prototype._initializeRemixerViews = function() {
    return this.remixerViews = this.model.shells().map(this._initializeRemixerForShell)
  };
  a.prototype._initializeRemixerForShell = function(c) {
    var b;
    b = a.__super__._initializeRemixerForShell.apply(this, arguments);
    b.on("Remixer:Toolbar:Click:Duplicate", this._onRemixerClickDuplicate);
    b.on("Remixer:Toolbar:Click:Delete", this._onRemixerClickDelete);
    return b
  };
  a.prototype._remixerToolbarButtons = function() {
    return[{id:"Clear", icon:"icon-undo", tooltip:"Clear"}, {id:"Duplicate", icon:"icon-copy", tooltip:"Duplicate"}, {id:"Delete", icon:"icon-remove", tooltip:"Delete"}]
  };
  a.prototype._initializeShellOptionsView = function() {
    var a, b = this;
    null != (a = this.shellOptionsView) && a.destroy();
    this.shellOptionsView = new ShellOptionsView({eventhub:this.eventhub, model:this.model});
    return this.shellOptionsView.on("ShellOptions:SwapShell", function(a) {
      a = acorn.shellModuleWithId(a);
      return b._swapTopLevelShell(new a.Model)
    })
  };
  a.prototype._renderHeader = function() {
    this.$el.prepend(this.shellOptionsView.render().el);
    this._renderSectionHeading(this.shellOptionsView, "Collection");
    return this
  };
  a.prototype._renderUpdates = function() {
    this._shellIsStub(this.model.shells().last()) || this.addShell(new this.defaultShell.Model, this.model.shells().length);
    a.__super__._renderUpdates.apply(this, arguments);
    this.rendering && (0 < this._lastNonDefaultShellIndex() ? this.$(".shell-options-view").first().removeClass("hidden") : this.$(".shell-options-view").first().addClass("hidden"));
    return this
  };
  a.prototype._renderRemixerViewHeading = function(a, b) {
    var e;
    null == b && (b = this.model.shells().indexOf(a.model));
    3 > this.model.shells().length || this._shellIsStub(a.model) || (e = "Item " + (b + 1));
    this._renderSectionHeading(a, null != e ? e : "");
    return this
  };
  a.prototype.shell = function() {
    var a, b;
    var e, f;
    if(0 > this._lastNonDefaultShellIndex()) {
      b = []
    }else {
      f = [];
      a = b = 0;
      for(e = this._lastNonDefaultShellIndex();0 <= e ? b <= e : b >= e;a = 0 <= e ? ++b : --b) {
        f.push(this.remixerViews[a].model)
      }
      b = f
    }
    a = this.model.clone();
    a.shells().reset(b);
    1 === a.shells().length && (a = a.shells().models[0]);
    return a
  };
  a.prototype.isEmpty = function() {
    var a;
    a = this.shell().attributes;
    return"acorn.CollectionShell" === a.shellid && 0 === a.shells.length
  };
  a.prototype._shellIsStub = function(a) {
    return(null != a ? a.constructor : void 0) === this.defaultShell.Model && a === this.model.shells().last()
  };
  a.prototype.addShell = function(a, b) {
    var e;
    null == b && (b = this.model.shells().length - 1);
    this.model.shells().add(a, {at:b});
    e = this._initializeRemixerForShell(a);
    this.remixerViews.splice(b, 0, e);
    this.rendering && (this._renderRemixerView(e, b), this.trigger("ShellEditor:ShellsUpdated"));
    return this
  };
  a.prototype.removeShell = function(a) {
    var b;
    b = this.model.shells().indexOf(a);
    this.model.shells().remove(a);
    this.remixerViews.splice(b, 1)[0].destroy();
    this.trigger("ShellEditor:ShellsUpdated");
    return this
  };
  a.prototype._lastNonDefaultShellIndex = function() {
    var a, b, e;
    b = this.model.shells();
    for(a = b.length;a--;) {
      if((null != (e = b.at(a)) ? e.constructor : void 0) !== this.defaultShell.Model) {
        return a
      }
    }
    return-1
  };
  a.prototype._swapSubShell = function(a, b) {
    var e;
    e = this.model.shells().indexOf(a);
    this.model.shells().remove(a);
    this.model.shells().add(b, {at:e});
    this.remixerViews[e].model !== b && (this.remixerViews[e].destroy(), this.remixerViews[e] = this._initializeRemixerForShell(b));
    this.trigger("ShellEditor:ShellsUpdated");
    return this
  };
  a.prototype._swapTopLevelShell = function(a) {
    a instanceof CollectionShell.Model || TypeError(a, "CollectionShell.Model");
    a.shells().add(this.model.shells().models);
    this.model = a;
    this._initializeShellOptionsView();
    this.rendering && (this._renderHeader(), this.trigger("ShellEditor:ShellsUpdated"));
    return this
  };
  a.prototype._onThumbnailChange = function() {
    a.__super__._onThumbnailChange.apply(this, arguments);
    return this.shellOptionsView.model.trigger("change")
  };
  a.prototype._onRemixerSwapShell = function(a, b, e) {
    return this._swapSubShell(b, e)
  };
  a.prototype._onRemixerClickDuplicate = function(a) {
    var b;
    b = this.model.shells().indexOf(a.model);
    return this.addShell(a.model.clone(), b + 1)
  };
  a.prototype._onRemixerClickDelete = function(a) {
    if(!this._shellIsStub(a.model)) {
      return this.removeShell(a.model)
    }
  };
  return a
}(ShellEditorView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.EditorView = function(b) {
  function a() {
    this._updateSaveButton = __bind(this._updateSaveButton, this);
    this.canBeSaved = __bind(this.canBeSaved, this);
    this.expand = __bind(this.expand, this);
    this.minimize = __bind(this.minimize, this);
    this.save = __bind(this.save, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("editor-view");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {ShellEditorView:acorn.player.CollectionShellEditorView, minimize:!1})
  };
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click #editor-cancel-btn":function() {
      return b.eventhub.trigger("Editor:Cancel", b)
    }, "click #editor-save-btn":function() {
      return b.save()
    }})
  };
  a.prototype.initialize = function() {
    var b;
    a.__super__.initialize.apply(this, arguments);
    this.model instanceof acorn.Model || TypeError(this.model, "acorn.Model");
    this.shellEditorView = new this.options.ShellEditorView({model:acorn.shellWithAcorn(this.model), eventhub:this.eventhub, minimize:this.options.minimize});
    this.options.minimize && this.minimize();
    b = [];
    this.model.isNew() || b.push({text:"Cancel", id:"editor-cancel-btn"});
    b.push({text:"Save", id:"editor-save-btn", className:"btn-success"});
    this.toolbarView = new athena.lib.ToolbarView({buttons:b, eventhub:this.eventhub});
    this.listenTo(this.shellEditorView, "ShellEditor:ShellsUpdated", this._updateSaveButton);
    this.listenTo(this.shellEditorView, "ShellEditor:Minimize", this.minimize);
    return this.listenTo(this.shellEditorView, "ShellEditor:Expand", this.expand)
  };
  a.prototype.render = function() {
    var b;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    b = "new media";
    this.model.isNew() || (b = "editing " + this.model.acornid());
    this.$el.append($("<h2>").addClass("editor-section").text(b));
    this.$el.append(this.shellEditorView.render().el);
    this.$el.append(this.toolbarView.render().el);
    this._updateSaveButton();
    return this
  };
  a.prototype.save = function() {
    var a = this;
    if(this.canBeSaved()) {
      return this.model.shellData(this.shellEditorView.shell().attributes), this.$("#editor-save-btn").first().attr("disabled", "disabled"), this.$("#editor-save-btn").first().text("Saving..."), this.model.save({}, {success:function() {
        a.$("#editor-save-btn").first().text("Saved!");
        return a.eventhub.trigger("Editor:Saved", a)
      }, error:function() {
        a.$("#editor-save-btn").first().text("Error Saving. Click to try again.");
        return a.$("#editor-save-btn").first().removeAttr("disabled")
      }}), this
    }
  };
  a.prototype.minimize = function() {
    if(!this.minimized) {
      return this.$el.addClass("minimized"), this.minimized = !0, this.shellEditorView.minimize(), this.trigger("Editor:Minimize")
    }
  };
  a.prototype.expand = function() {
    if(this.minimized) {
      return this.$el.removeClass("minimized"), this.minimized = !1, this.shellEditorView.expand(), this.trigger("Editor:Expand")
    }
  };
  a.prototype.canBeSaved = function() {
    return this.model.isNew() && this.shellEditorView.isEmpty() ? !1 : !0
  };
  a.prototype._updateSaveButton = function() {
    return this.canBeSaved() ? this.$("#editor-save-btn").first().removeAttr("disabled") : this.$("#editor-save-btn").first().attr("disabled", "disabled")
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.TimeInputView = function(b) {
  function a() {
    this._onKeyup = __bind(this._onKeyup, this);
    this._onInputChanged = __bind(this._onInputChanged, this);
    this._glowCounter = __bind(this._glowCounter, this);
    this._glow = __bind(this._glow, this);
    this._setInput = __bind(this._setInput, this);
    this._change = __bind(this._change, this);
    this._handleInput = __bind(this._handleInput, this);
    this._bound = __bind(this._bound, this);
    this.setMax = __bind(this.setMax, this);
    this.setMin = __bind(this.setMin, this);
    this.value = __bind(this.value, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("time-input-view");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {padTime:!0, label:null})
  };
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {"change input":this._onInputChanged, "blur input":this._onInputChanged, "keyup input":this._onKeyup})
  };
  a.prototype.template = _.template('<div class="control-group time-field time">\n\n  <% if (label == \'side\') { %>\n  <div class="input-prepend">\n    <span class="add-on time-input-label"><%= name %></span>\n  <% } else { %>\n    <div class="input">\n  <% } %>\n\n    <input size="16" type="text" class="time-field time">\n  </div>\n</div>');
  a.prototype.initialize = function() {
    var b, d;
    a.__super__.initialize.apply(this, arguments);
    this._min = null != (b = this.options.min) ? b : 0;
    this._max = null != (d = this.options.max) ? d : Infinity;
    if(null != this.options.value) {
      return this._time = this._bound(this.options.value)
    }
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({name:this.options.name, label:this.options.label}));
    this.input = this.$("input.time-field");
    this.controlGroup = this.$(".control-group.time-field");
    this._setInput(!0);
    "top" === this.options.label && this.$el.prepend("<span class='time-input-label'>" + this.options.name + "</span>");
    this.$el.addClass("label-" + this.options.label);
    return this
  };
  a.prototype.value = function(a) {
    null != a && this._handleInput(a);
    return this._time
  };
  a.prototype.setMin = function(a) {
    if(_.isNumber(a) && !_.isNaN(a)) {
      return this._min = a, this._onInputChanged()
    }
  };
  a.prototype.setMax = function(a) {
    if(_.isNumber(a) && !_.isNaN(a)) {
      return this._max = a, (a = _.isNaN(parseFloat(this.input.val()))) ? this._handleInput(this._max) : this._onInputChanged()
    }
  };
  a.prototype._bound = function(a) {
    return Math.max(this._min, Math.min(null != a ? a : 0, this._max))
  };
  a.prototype._handleInput = function(a) {
    var b;
    b = _.isNaN(parseFloat(a));
    _.isString(a) && (a = acorn.util.Time.timestringToSeconds(a));
    a = this._bound(a);
    if(b || a === this._time) {
      this._setInput(!0)
    }else {
      return this._time = a, this._change()
    }
  };
  a.prototype._change = function() {
    this._setInput();
    return this.trigger("TimeInputView:TimeDidChange", this._time)
  };
  a.prototype._setInput = function(a) {
    var b;
    if(this.rendering && (b = null != this._time ? acorn.util.Time.secondsToTimestring(this._time, {padTime:this.options.padTime}) : "--", this.input.val(b), !a)) {
      return this._glow()
    }
  };
  a.prototype._glow = function() {
    null != this._glowCount && 0 < this._glowCount || (this.controlGroup.addClass("info"), this._glowCounter());
    return this._glowCount = 5
  };
  a.prototype._glowCounter = function() {
    var a = this;
    return this._glowInterval = setInterval(function() {
      if(0 >= --a._glowCount) {
        return clearInterval(a._glowInterval), a.controlGroup.removeClass("info")
      }
    }, 100)
  };
  a.prototype._onInputChanged = function() {
    return this._handleInput(this.input.val())
  };
  a.prototype._onKeyup = function(a) {
    switch(a.keyCode) {
      case athena.lib.util.keys.ENTER:
        return this._onInputChanged();
      case athena.lib.util.keys.ESCAPE:
        return this.input.blur()
    }
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.TimeRangeInputView = function(b) {
  function a() {
    this._onEndInputChanged = __bind(this._onEndInputChanged, this);
    this._onTotalInputChanged = __bind(this._onTotalInputChanged, this);
    this._onStartInputChanged = __bind(this._onStartInputChanged, this);
    this._onRangeSliderProgressDidChange = __bind(this._onRangeSliderProgressDidChange, this);
    this._onRangeSliderHighValueDidChange = __bind(this._onRangeSliderHighValueDidChange, this);
    this._onRangeSliderLowValueDidChange = __bind(this._onRangeSliderLowValueDidChange, this);
    this._bound = __bind(this._bound, this);
    this._setSlider = __bind(this._setSlider, this);
    this._setEndInput = __bind(this._setEndInput, this);
    this._setTotalInput = __bind(this._setTotalInput, this);
    this._setStartInput = __bind(this._setStartInput, this);
    this._change = __bind(this._change, this);
    this._percentProgress = __bind(this._percentProgress, this);
    this._percentValues = __bind(this._percentValues, this);
    this._reset = __bind(this._reset, this);
    this.setMax = __bind(this.setMax, this);
    this.setMin = __bind(this.setMin, this);
    this.progress = __bind(this.progress, this);
    this.values = __bind(this.values, this);
    this.reposition = __bind(this.reposition, this);
    this.render = __bind(this.render, this);
    this.destroy = __bind(this.destroy, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("time-range-input-view");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {min:0, max:Infinity, start:void 0, end:void 0, progress:void 0, bounceOffset:10, SliderView:acorn.player.ProgressRangeSliderView})
  };
  a.prototype.template = _.template('<form class="form-inline">\n  <div class="start-time-view"></div>\n  <div class="total-time-view"></div>\n  <div class="end-time-view"></div>\n</form>\n<div class="time-range-slider"></div>');
  a.prototype._totalTimeTemplate = _.template('<span class="total-time"></span><\!-- /<span class="max-time"></span> --\>');
  a.prototype.initialize = function() {
    var b, d;
    a.__super__.initialize.apply(this, arguments);
    this._min = Number(this.options.min);
    this._max = Number(this.options.max);
    this._start = Number(this.options.start);
    this._end = Number(this.options.end);
    this._progress = Number(this.options.progress);
    this._bounceOffset = Number(this.options.bounceOffset);
    _.isNaN(this._min) && (this._min = 0);
    _.isNaN(this._max) && (this._max = Infinity);
    this._start = _.isNaN(this._start) ? this._min : this._bound(this._start);
    this._end = _.isNaN(this._end) ? this._max : this._bound(this._end);
    this._progress = _.isNaN(this._progress) ? this._start : util.bound(this._progress, {low:this._start, high:this._end});
    _.isNaN(this._bounceOffset) && (this._bounceOffset = 10);
    b = this.options.SliderView;
    d = athena.lib.util.isOrDerives;
    d(b, acorn.player.RangeSliderView) || (b = acorn.player.RangeSliderView);
    d = this._percentValues();
    this.rangeSliderView = new b({low:d.start, high:d.end, progress:this._percentProgress()});
    this.startInputView = new acorn.player.TimeInputView({name:"clip start", label:"top", value:this._start, min:this._min, max:this._max});
    this.totalInputView = new acorn.player.TimeInputView({name:"clip length", label:"top", value:this._end - this._start, min:this._min, max:this._max});
    this.endInputView = new acorn.player.TimeInputView({name:"clip end", label:"top", value:this._end, min:this._min, max:this._max});
    this.listenTo(this.rangeSliderView, "RangeSliderView:LowValueDidChange", this._onRangeSliderLowValueDidChange);
    this.listenTo(this.rangeSliderView, "RangeSliderView:HighValueDidChange", this._onRangeSliderHighValueDidChange);
    this.listenTo(this.rangeSliderView, "ProgressRangeSliderView:ProgressDidChange", this._onRangeSliderProgressDidChange);
    this.startInputView.on("TimeInputView:TimeDidChange", this._onStartInputChanged);
    this.totalInputView.on("TimeInputView:TimeDidChange", this._onTotalInputChanged);
    return this.endInputView.on("TimeInputView:TimeDidChange", this._onEndInputChanged)
  };
  a.prototype.destroy = function() {
    this.rangeInputView.destroy();
    this.startInputView.destroy();
    this.totalInputView.destroy();
    this.endInputView.destroy();
    return a.__super__.destroy.apply(this, arguments)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template());
    this.$(".time-range-slider").first().append(this.rangeSliderView.render().el);
    this.$(".start-time-view").first().append(this.startInputView.render().el);
    this.$(".total-time-view").first().append(this.totalInputView.render().el);
    this.$(".end-time-view").first().append(this.endInputView.render().el);
    this.reposition();
    return this
  };
  a.prototype.reposition = function() {
    this._setStartInput();
    this._setEndInput();
    return this
  };
  a.prototype.values = function(a, b) {
    var e, f, g;
    null == b && (b = {});
    this._valuesLocked || (e = {start:!!b.reset, end:!!b.reset}, g = this._bound(null != a ? a.start : void 0), f = this._bound(null != a ? a.end : void 0), _.isNaN(g) || g === this._start || (this._start = g, e.start = !0), _.isNaN(f) || f === this._end || (this._end = f, e.end = !0), f = util.bound(this.progress(), {low:this._start, high:this._end}), f !== this.progress() && (this._progress = f, e.progress = !0), (e.start || e.end) && this._change(e));
    return{start:this._start, end:this._end}
  };
  a.prototype.progress = function(a, b) {
    var e;
    null == b && (b = {});
    this._valuesLocked || (e = {progress:!!b.reset}, a = util.bound(a, {low:this._start, high:this._end}), _.isNaN(a) || a === this._progress || (this._progress = a, e.progress = !0), e.progress && this._change(e, b));
    return this._progress
  };
  a.prototype.setMin = function(a) {
    if(_.isNumber(a) && !(_.isNaN(a) || this._min === a)) {
      return this._min = a, this._reset()
    }
  };
  a.prototype.setMax = function(a) {
    if(_.isNumber(a) && !(_.isNaN(a) || this._max === a)) {
      return this._max = a, this._reset()
    }
  };
  a.prototype._reset = function() {
    var a, b, e;
    this._valuesLocked = !0;
    this.startInputView.setMin(this._min);
    this.startInputView.setMax(this._max);
    this.endInputView.setMin(this._min);
    this.endInputView.setMax(this._max);
    this._valuesLocked = void 0;
    a = this.values();
    a = {start:this._bound(null != (b = a.start) ? b : this._min), end:this._bound(null != (e = a.end) ? e : this._max)};
    return this.values(a, {reset:!0})
  };
  a.prototype._percentValues = function(a) {
    var b, e = this;
    b = function(a) {
      return{low:e._min, high:e._max, bound:!0, decimalDigits:a}
    };
    athena.lib.util.isStrictObject(a) && (null != a.start && (a.start = util.fromPercent(a.start, b(1))), null != a.end && (a.end = util.fromPercent(a.end, b(1))), a = _.defaults({}, a, this.values()), this.values(a));
    a = this.values();
    return{start:util.toPercent(a.start, b()), end:util.toPercent(a.end, b())}
  };
  a.prototype._percentProgress = function(a) {
    var b, e = this;
    b = function() {
      return{low:e._start, high:e._end, bound:!0}
    };
    null != a && (a = util.fromPercent(a, b()), this.progress(a));
    return util.toPercent(this.progress(), b())
  };
  a.prototype._change = function(a, b) {
    null == b && (b = {});
    this._setSlider(a);
    a.start && (this._setStartInput(), this._setTotalInput(), b.silent || this.trigger("TimeRangeInputView:DidChangeStart", this._start));
    a.end && (this._setEndInput(), this._setTotalInput(), b.silent || this.trigger("TimeRangeInputView:DidChangeEnd", this._end));
    if(a.start || a.end) {
      b.silent || this.trigger("TimeRangeInputView:DidChangeTimes", {start:this._start, end:this._end})
    }
    if(a.progress && !b.silent) {
      return this.trigger("TimeRangeInputView:DidChangeProgress", this._progress)
    }
  };
  a.prototype._setStartInput = function() {
    var a;
    this.startInputView.value(this._start);
    a = Math.max(this._percentValues().start - 12, 0);
    a = Math.min(a, 64);
    return this.$(".form-inline").first().css("left", a + "%")
  };
  a.prototype._setTotalInput = function() {
    return this.totalInputView.value(this._end - this._start)
  };
  a.prototype._setEndInput = function() {
    var a;
    this.endInputView.value(this._end);
    a = Math.max(100 - this._percentValues().end - 12, 0);
    return this.$(".form-inline").first().css("right", a + "%")
  };
  a.prototype._setSlider = function(a) {
    var b, e;
    b = this._percentValues();
    b = [b.start, b.end];
    a.start || (b[0] = void 0);
    a.end || (b[1] = void 0);
    this.rangeSliderView.values(b);
    return"function" === typeof(e = this.rangeSliderView).progress ? e.progress(this._percentProgress(), {silent:!0}) : void 0
  };
  a.prototype._bound = function(a) {
    return util.bound(a, {low:this._min, high:this._max})
  };
  a.prototype._onRangeSliderLowValueDidChange = function(a) {
    this._percentValues({start:a});
    return this.startInputView.$("input").first().focus()
  };
  a.prototype._onRangeSliderHighValueDidChange = function(a) {
    this._percentValues({end:a});
    return this.endInputView.$("input").first().focus()
  };
  a.prototype._onRangeSliderProgressDidChange = function(a) {
    return this._percentProgress(a)
  };
  a.prototype._onStartInputChanged = function(a) {
    var b;
    if(a !== this._start) {
      return b = {start:a, end:this._end}, this._end < a && (b.end = this._bound(a + this._bounceOffset)), this.values(b)
    }
  };
  a.prototype._onTotalInputChanged = function(a) {
    if(a !== this._end - this._start) {
      return a = {start:this._start, end:this._start + a}, a.end > this._max && (a.start = this._bound(a.start - (a.end - this._max)), a.end = this._bound(a.end)), this.values(a)
    }
  };
  a.prototype._onEndInputChanged = function(a) {
    var b;
    if(a !== this._end) {
      return b = {start:this._start, end:a}, a < this._start && (b.start = this._bound(a - this._bounceOffset)), this.values(b)
    }
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.ClipSelectView = function(b) {
  function a() {
    this.values = __bind(this.values, this);
    this._adjustSize = __bind(this._adjustSize, this);
    this.toggleActive = __bind(this.toggleActive, this);
    this.isActive = __bind(this.isActive, this);
    this.render = __bind(this.render, this);
    this.destroy = __bind(this.destroy, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("clip-select-view");
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click .clip-highlight-view":function() {
      b.toggleActive(!0);
      event.preventDefault();
      return!1
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {min:0, max:Infinity, start:void 0, end:void 0})
  };
  a.prototype.template = _.template('<div class="clip-highlight-view"></div>');
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.clip = this.options.clip;
    this.inputView = new acorn.player.TimeRangeInputView({eventhub:this.eventhub, min:this.options.min, max:this.options.max, start:this.options.start, end:this.options.end, bounceOffset:10, SliderView:acorn.player.ProgressRangeSliderView});
    return this.listenTo(this.inputView, "all", function() {
      return b.trigger(arguments)
    })
  };
  a.prototype.destroy = function() {
    this.inputView.destroy();
    return a.__super__.destroy.apply(this, arguments)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.html(this.template());
    this.$el.append(this.inputView.render().el);
    this.toggleActive(!1);
    this.$(".clip-highlight-view").first().tooltip({trigger:"hover", title:"Edit Clip"});
    return this
  };
  a.prototype._activeClass = "clip-select-active";
  a.prototype.isActive = function() {
    return this.$el.hasClass(this._activeClass)
  };
  a.prototype.toggleActive = function(a) {
    null == a && (a = !this.isActive());
    this._adjustSize(a);
    if(a) {
      return this.$el.addClass(this._activeClass), this.$(".clip-highlight-view").first().tooltip("hide"), this.trigger("ClipSelect:Active", this)
    }
    this.$el.removeClass(this._activeClass);
    return this.trigger("ClipSelect:Inactive", this)
  };
  a.prototype._adjustSize = function(a) {
    a ? (this.inputView.reposition(), this.$el.css("left", 0), this.$el.css("right", 0)) : (a = this.inputView._percentValues(), this.$el.css("left", a.start + "%"), this.$el.css("right", 100 - a.end + "%"));
    return this
  };
  a.prototype.values = function() {
    return this.inputView.values(arguments)
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.TimedMediaPlayerView = function(b) {
  function a() {
    this.seek = __bind(this.seek, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this.loopSeek = __bind(this.loopSeek, this);
    this.loopSeekOffset = __bind(this.loopSeekOffset, this);
    this._seek = __bind(this._seek, this);
    this._seekOffset = __bind(this._seekOffset, this);
    this.duration = __bind(this.duration, this);
    this.loopTime = __bind(this.loopTime, this);
    this._playbackIsAfterEnd = __bind(this._playbackIsAfterEnd, this);
    this._playbackIsBeforeStart = __bind(this._playbackIsBeforeStart, this);
    this.onPlaybackTick = __bind(this.onPlaybackTick, this);
    this.onMediaPlay = __bind(this.onMediaPlay, this);
    this.elapsedLoops = __bind(this.elapsedLoops, this);
    this.loops = __bind(this.loops, this);
    this.remove = __bind(this.remove, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.timer = new acorn.util.Timer(100, function() {
      return b.onPlaybackTick()
    });
    this.on("Media:DidPlay", function() {
      if(b.rendering) {
        return b.timer.startTick()
      }
    });
    this.on("Media:DidPause", function() {
      return b.timer.stopTick()
    });
    this.on("Media:DidEnd", function() {
      return b.timer.stopTick()
    });
    return this.listenTo(this.model, "change:loops", function() {
      return b.elapsedLoops(0)
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.timer.stopTick();
    return this
  };
  a.prototype.remove = function() {
    this.timer.stopTick();
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.loops = function() {
    var a, b;
    a = this.model.loops();
    return"infinity" === a ? Infinity : "one" === a ? 1 : null != (b = parseInt(a, 10)) ? b : 1
  };
  a.prototype.elapsedLoops = function(a) {
    null == this._elapsedLoops && (this._elapsedLoops = 0);
    0 <= a && (this._elapsedLoops = a);
    return this._elapsedLoops
  };
  a.prototype.onMediaPlay = function() {
    a.__super__.onMediaPlay.apply(this, arguments);
    if(this.isInState("end")) {
      return this.elapsedLoops(0)
    }
  };
  a.prototype.onPlaybackTick = function() {
    var a, b, e, f;
    if(!this.switchingMediaState()) {
      if(this.isPlaying()) {
        if(0 === this.duration()) {
          this.pause()
        }else {
          if(a = null != (b = this._seekOffset()) ? b : 0, b = null != (f = "function" === typeof(e = this.model).timeStart ? e.timeStart() : void 0) ? f : 0, this.trigger("Media:Progress", this, this.seekOffset(), this.duration()), this._playbackIsBeforeStart(a)) {
            if(!this._seeking) {
              return this.elapsedLoops(0), this._seek(b), this._seeking = !0
            }
          }else {
            if(this._playbackIsAfterEnd(a)) {
              if(!this._seeking) {
                return this.elapsedLoops(this.elapsedLoops() + 1), this.loops() > this.elapsedLoops() ? (this._seek(b), this._seeking = !0) : this.setMediaState("end")
              }
            }else {
              return this._seeking = !1
            }
          }
        }
      }else {
        this.timer.stopTick()
      }
    }
  };
  a.prototype._playbackIsBeforeStart = function(a) {
    var b;
    return null != (b = a < this.model.timeStart()) ? b : 0
  };
  a.prototype._playbackIsAfterEnd = function(a) {
    var b;
    return null != (b = a >= this.model.timeEnd()) ? b : this.model.timeTotal()
  };
  a.prototype.loopTime = function() {
    return this.model.loopTime()
  };
  a.prototype.duration = function() {
    return this.loopTime() * this.loops()
  };
  a.prototype._seekOffset = function() {
    return 0
  };
  a.prototype._seek = function() {
  };
  a.prototype.loopSeekOffset = function() {
    return this._seekOffset() - this.model.timeStart()
  };
  a.prototype.loopSeek = function(a) {
    return this._seek(a + this.model.timeStart())
  };
  a.prototype.seekOffset = function() {
    return this.loopTime() * this.elapsedLoops() + this.loopSeekOffset()
  };
  a.prototype.seek = function(b) {
    a.__super__.seek.apply(this, arguments);
    this.elapsedLoops(Math.floor(b / this.loopTime()));
    return this.loopSeek(b % this.loopTime())
  };
  return a
}(acorn.player.MediaPlayerView);
var VideoLinkShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.VideoLinkShell = {};
LinkShell = acorn.shells.LinkShell;
VideoLinkShell = acorn.shells.VideoLinkShell = {id:"acorn.VideoLinkShell", title:"Video Link", description:"a video embedded via link", icon:"icon-play", validLinkPatterns:[acorn.util.urlRegEx(".*.(avi|mov|wmv)")]};
VideoLinkShell.Model = function(b) {
  function a() {
    this.duration = __bind(this.duration, this);
    this.loopTime = __bind(this.loopTime, this);
    this._defaultDescription = __bind(this._defaultDescription, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.timeTotal = a.property("timeTotal");
  a.prototype.timeStart = a.property("timeStart");
  a.prototype.timeEnd = a.property("timeEnd");
  a.prototype.loops = a.property("loops");
  a.prototype.defaultAttributes = function() {
    var b;
    b = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(b, {title:this.link(), description:this._defaultDescription()})
  };
  a.prototype._defaultDescription = function() {
    var a, b;
    _.isFinite(this.timeStart()) && _.isFinite(this.timeEnd()) && (b = acorn.util.Time.secondsToTimestring(this.timeStart()), a = acorn.util.Time.secondsToTimestring(this.timeEnd()), a = " from " + b + " to " + a);
    return'Remix of video "' + this.link() + '"' + (null != a ? a : "") + "."
  };
  a.prototype.loopTime = function() {
    var a, b;
    return(null != (a = this.timeEnd()) ? a : this.timeTotal()) - (null != (b = this.timeStart()) ? b : 0)
  };
  a.prototype.duration = function() {
    var a;
    a = this.loops();
    if("infinity" === a) {
      return Infinity
    }
    a = parseInt(a);
    0 <= a || (a = 1);
    return this.loopTime() * a
  };
  return a
}(LinkShell.Model);
VideoLinkShell.MediaView = function(b) {
  function a() {
    this.duration = __bind(this.duration, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this.seek = __bind(this.seek, this);
    this.setMediaState = __bind(this.setMediaState, this);
    this.mediaState = __bind(this.mediaState, this);
    this.isInState = __bind(this.isInState, this);
    this._onProgressBarDidProgress = __bind(this._onProgressBarDidProgress, this);
    this.render = __bind(this.render, this);
    this.initializeMedia = __bind(this.initializeMedia, this);
    this.remove = __bind(this.remove, this);
    this.initializeElapsedTimeView = __bind(this.initializeElapsedTimeView, this);
    this.initializePlayPauseToggleView = __bind(this.initializePlayPauseToggleView, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("video-link-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {readyOnRender:!1})
  };
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.initializePlayPauseToggleView();
    this.initializeElapsedTimeView();
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:[this.playPauseToggleView, this.elapsedTimeView], eventhub:this.eventhub});
    this.controlsView.on("PlayControl:Click", function() {
      return b.play()
    });
    this.controlsView.on("PauseControl:Click", function() {
      return b.pause()
    });
    this.controlsView.on("ElapsedTimeControl:Seek", this.seek);
    return this.playerView.on("Media:Progress", this._updateProgressBar)
  };
  a.prototype.initializePlayPauseToggleView = function() {
    var a, b = this;
    a = new Backbone.Model;
    a.isPlaying = function() {
      return b.isPlaying()
    };
    return this.playPauseToggleView = new acorn.player.controls.PlayPauseControlToggleView({eventhub:this.eventhub, model:a})
  };
  a.prototype.initializeElapsedTimeView = function() {
    var a;
    a = new Backbone.Model({elapsed:0, total:this.duration() || 0});
    this.elapsedTimeView = new acorn.player.controls.ElapsedTimeControlView({eventhub:this.eventhub, model:a});
    return a.listenTo(this.playerView, "Media:Progress", function(b, e, f) {
      a.set("elapsed", e);
      return a.set("total", f)
    })
  };
  a.prototype.remove = function() {
    this.controlsView.off("PlayControl:Click");
    this.controlsView.off("PauseControl:Click");
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.initializeMedia = function() {
    var a = this;
    this.playerView = new this.module.PlayerView({model:this.model, eventhub:this.eventhub, noControls:!0});
    this.listenTo(this.playerView, "all", function() {
      var b;
      b = _.map(arguments, function(b) {
        return b === a.playerView ? a : b
      });
      return a.trigger.apply(a, b)
    });
    this.on("Media:StateChange", function() {
      return a.playPauseToggleView.refreshToggle()
    });
    return this.initializeMediaEvents(this.options)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.playerView.render().el);
    this.playPauseToggleView.refreshToggle();
    return this
  };
  a.prototype._onProgressBarDidProgress = function(a) {
    return this.seek(this.progressFromPercent(a))
  };
  a.prototype.isInState = function(a) {
    return this.playerView.isInState(a)
  };
  a.prototype.mediaState = function() {
    return this.playerView.mediaState()
  };
  a.prototype.setMediaState = function(a) {
    return this.playerView.setMediaState(a)
  };
  a.prototype.seek = function(b) {
    a.__super__.seek.apply(this, arguments);
    return this.playerView.seek(b)
  };
  a.prototype.seekOffset = function() {
    var a;
    return null != (a = this.playerView.seekOffset()) ? a : 0
  };
  a.prototype.duration = function() {
    var a;
    return(null != (a = this.playerView) ? a.duration() : void 0) || this.model.duration() || 0
  };
  return a
}(LinkShell.MediaView);
VideoLinkShell.RemixView = function(b) {
  function a() {
    this.onAddHighlight = __bind(this.onAddHighlight, this);
    this.onChangeLoops = __bind(this.onChangeLoops, this);
    this.onChangeProgress = __bind(this.onChangeProgress, this);
    this.onChangeTimes = __bind(this.onChangeTimes, this);
    this._setTimeInputMax = __bind(this._setTimeInputMax, this);
    this.render = __bind(this.render, this);
    this.initializeLoopsButton = __bind(this.initializeLoopsButton, this);
    this.initializeTimeRangeView = __bind(this.initializeTimeRangeView, this);
    this.initializeRemixMediaView = __bind(this.initializeRemixMediaView, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("video-link-shell");
  a.prototype.controlsTemplate = _.template('<div class="highlight-button right-control">\n  <button class="btn btn-small add-highlight">\n    <i class="icon-plus"></i> Highlight</button>\n</div>\n<div class="clip-time-button right-control">\n  <button class="btn btn-small active clip-time">\n    <i class="icon-resize-horizontal"></i> Clip</button>\n</div>');
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click button.add-highlight":function() {
      return b.onAddHighlight()
    }})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.initializeRemixMediaView();
    this.initializeLoopsButton();
    return this.initializeTimeRangeView()
  };
  a.prototype.initializeRemixMediaView = function() {
    var a = this;
    this.mediaView = new this.model.module.MediaView({model:this.model, eventhub:this.eventhub, playOnReady:!1});
    this.remixMediaView = new acorn.player.TimedMediaRemixView({eventhub:this.eventhub, mediaView:this.mediaView, model:this.model});
    return this.listenTo(this.mediaView, "Media:Progress", function(b, e) {
      e += a.model.timeStart();
      return a.timeRangeView.progress(e, {silent:!0})
    })
  };
  a.prototype.initializeTimeRangeView = function() {
    this.timeRangeView = new acorn.player.TimeRangeInputView({eventhub:this.eventhub, start:this.model.timeStart(), end:this.model.timeEnd(), min:0, max:this.model.timeTotal()});
    this.timeRangeView.on("TimeRangeInputView:DidChangeTimes", this.onChangeTimes);
    return this.timeRangeView.on("TimeRangeInputView:DidChangeProgress", this.onChangeProgress)
  };
  a.prototype.initializeLoopsButton = function() {
    var a, b;
    b = this.model.loops();
    null == b && (b = "one", this.model.loops(b));
    a = function() {
      switch(b) {
        case "one":
          return 0;
        case "infinity":
          return 1;
        default:
          return 2
      }
    }();
    this.loopsButtonView = new acorn.player.CycleButtonView({eventhub:this.eventhub, buttonName:"loops:", data:[{type:"static", name:"one", value:"1"}, {type:"static", name:"infinity", value:"\u221e"}, {type:"input", name:"n", value:2 === a ? b : 2, validate:function(a) {
      a = Math.floor(parseFloat(a));
      if(a >= 0) {
        return a
      }
    }}], initialView:a, extraClasses:["loops-button"]});
    return this.loopsButtonView.on("CycleButtonView:ValueDidChange", this.onChangeLoops)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.remixMediaView.render().el);
    this.remixMediaView.progressBarView.$el.hide();
    this.remixMediaView.controlsView.$el.prepend(this.timeRangeView.render().el);
    this.remixMediaView.controlsView.$el.append(this.loopsButtonView.render().el);
    this.remixMediaView.controlsView.$el.append(this.controlsTemplate());
    this.$("#add-highlight").first().tooltip();
    return this
  };
  a.prototype._setTimeInputMax = function() {
    return this.timeRangeView.setMax(this.model.timeTotal())
  };
  a.prototype.onChangeTimes = function(a) {
    var b, e;
    b = {};
    if(_.isNumber(null != a ? a.start : void 0)) {
      b.timeStart = a.start
    }
    if(_.isNumber(null != a ? a.end : void 0)) {
      b.timeEnd = a.end
    }
    null != b.timeStart && b.timeStart !== this.model.timeStart() ? e = 0 : null != b.timeEnd && b.timeEnd !== this.model.timeEnd() && (e = Infinity);
    this.model.set(b);
    this.mediaView.isInState("pause") || this.mediaView.play();
    null != e && (e = Math.min(e, this.model.timeEnd() - 2), e = Math.max(this.model.timeStart(), e), this.mediaView.seek(e));
    return this.eventhub.trigger("change:shell", this.model, this)
  };
  a.prototype.onChangeProgress = function(a) {
    a -= this.model.timeStart();
    return this.mediaView.seek(a)
  };
  a.prototype.onChangeLoops = function(a) {
    this.model.loops("n" === a.name ? a.value : a.name);
    if(this.mediaView.isPlaying()) {
      return this.mediaView.seek(0)
    }
  };
  a.prototype.onAddHighlight = function() {
    var a;
    this.model.loops("one");
    a = new acorn.shells.HighlightsShell.Model;
    a.shell(_.clone(this.model.attributes));
    a.title(this.model.title());
    a.description(this.model.description());
    a.thumbnail(this.model.thumbnail());
    return this.trigger("Remix:SwapShell", this.model, a)
  };
  return a
}(LinkShell.RemixView);
VideoLinkShell.PlayerView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("video-player-view video-link-shell");
  return a
}(acorn.player.TimedMediaPlayerView);
acorn.registerShellModule(VideoLinkShell);
var VimeoShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.VimeoShell = {};
VideoLinkShell = acorn.shells.VideoLinkShell;
VimeoShell = acorn.shells.VimeoShell = {id:"acorn.VimeoShell", title:"Vimeo", description:"a Vimeo video", icon:"icon-play", validLinkPatterns:[acorn.util.urlRegEx("(www.)?(player.)?vimeo.com/(video/)?([0-9]+).*")]};
VimeoShell.Model = function(b) {
  function a() {
    this.embedLink = __bind(this.embedLink, this);
    this.playerId = __bind(this.playerId, this);
    this.vimeoId = __bind(this.vimeoId, this);
    this.metaDataUrl = __bind(this.metaDataUrl, this);
    this._defaultDescription = __bind(this._defaultDescription, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.defaultAttributes = function() {
    var b, d, e;
    b = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(b, {title:(null != (d = this._fetchedDefaults) ? d.title : void 0) || b.title, thumbnail:(null != (e = this._fetchedDefaults) ? e.thumbnail : void 0) || b.thumbnail})
  };
  a.prototype._defaultDescription = function() {
    var a, b, e, f;
    _.isFinite(this.timeStart()) && _.isFinite(this.timeEnd()) && (b = acorn.util.Time.secondsToTimestring(this.timeStart()), a = acorn.util.Time.secondsToTimestring(this.timeEnd()), a = " from " + b + " to " + a);
    return'Remix of Vimeo video "' + (null != (e = null != (f = this._fetchedDefaults) ? f.title : void 0) ? e : this.link()) + '"' + (null != a ? a : "") + "."
  };
  a.prototype.metaDataUrl = function() {
    return"https://vimeo.com/api/v2/video/" + this.vimeoId() + ".json?callback=?"
  };
  a.prototype.vimeoId = function() {
    var a, b;
    a = this.link();
    (b = _.find(this.module.validLinkPatterns, function(b) {
      return b.test(a)
    })) || ValueError("Incorrect vimeo link, no video id found.");
    return b.exec(a)[5]
  };
  a.prototype.playerId = function() {
    return"vimeo-player-" + this.cid
  };
  a.prototype.embedLink = function() {
    return"https://player.vimeo.com/video/" + this.vimeoId() + "?&byline=0&portrait=0&api=1&player_id=" + this.playerId() + "&title=0&byline=1&portrait=0&color=ffffff"
  };
  return a
}(VideoLinkShell.Model);
VimeoShell.MediaView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("vimeo-shell");
  return a
}(VideoLinkShell.MediaView);
VimeoShell.RemixView = function(b) {
  function a() {
    this.metaData = __bind(this.metaData, this);
    this.onMetaDataSync = __bind(this.onMetaDataSync, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("vimeo-shell");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.metaData().sync({success:this.onMetaDataSync})
  };
  a.prototype.onMetaDataSync = function(a) {
    var b;
    if(null == (b = this.model)._fetchedDefaults) {
      b._fetchedDefaults = {}
    }
    this.model._fetchedDefaults.title = a[0].title;
    this.model._fetchedDefaults.thumbnail = a[0].thumbnail_large;
    this.model.timeTotal(a[0].duration);
    this.model._updateAttributesWithDefaults();
    return this._setTimeInputMax()
  };
  a.prototype.metaData = function() {
    this.model.metaDataUrl() && !this._metaData && (this._metaData = new athena.lib.util.RemoteResource({url:this.model.metaDataUrl(), dataType:"json"}));
    return this._metaData
  };
  return a
}(VideoLinkShell.RemixView);
VimeoShell.PlayerView = function(b) {
  function a() {
    this.enforceVimeoPlaybackState = __bind(this.enforceVimeoPlaybackState, this);
    this.onVimeoPlayerReady = __bind(this.onVimeoPlayerReady, this);
    this.initializeVimeoPlayer = __bind(this.initializeVimeoPlayer, this);
    this.initializeVimeoAPI = __bind(this.initializeVimeoAPI, this);
    this._seekOffset = __bind(this._seekOffset, this);
    this._seek = __bind(this._seek, this);
    this.playerId = __bind(this.playerId, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("vimeo-shell");
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click .click-capture":function() {
      return b.togglePlayPause()
    }})
  };
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this._timeTotal = void 0;
    this._lastSeekOffset = 0;
    this.on("Media:Play", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.api ? a.api("play") : void 0 : void 0
    });
    this.on("Media:Pause", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.api ? a.api("pause") : void 0 : void 0
    });
    this.on("Media:End", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.api ? a.api("pause") : void 0 : void 0
    });
    return this.initializeVimeoAPI()
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(acorn.util.iframe(this.model.embedLink(), this.playerId()));
    this.$el.append($("<div>").addClass("click-capture"));
    setTimeout(this.initializeVimeoPlayer, 0);
    return this
  };
  a.prototype.playerId = function() {
    return this.model.playerId()
  };
  a.prototype._seek = function(a) {
    var b, e;
    "function" === typeof(b = this.player).api && b.api("seekTo", 2);
    return"function" === typeof(e = this.player).api ? e.api("seekTo", a) : void 0
  };
  a.prototype._seekOffset = function() {
    return this._lastSeekOffset
  };
  a.prototype.vimeoPlayerApiSrc = "https://secure-a.vimeocdn.com/js/froogaloop2.min.js";
  a.prototype.initializeVimeoAPI = function() {
    if(!window.Froogaloop && !VimeoShell._initializedVimeoAPI) {
      return VimeoShell._initializedVimeoAPI = !0, $.getScript(this.vimeoPlayerApiSrc)
    }
  };
  a.prototype.initializeVimeoPlayer = function() {
    if(window.Froogaloop) {
      return this.player = Froogaloop(this.$("#" + this.playerId())[0]), this.player.addEvent("ready", this.onVimeoPlayerReady)
    }
    this.initializeVimeoAPI();
    setTimeout(this.initializeVimeoPlayer, 100)
  };
  a.prototype.onVimeoPlayerReady = function() {
    var a, b, e = this;
    this.player.addEvent("pause", function() {
      return e.pause()
    });
    this.player.addEvent("play", function() {
      return e.play()
    });
    this.player.addEvent("seek", function(a) {
      e._lastSeekOffset = parseFloat(a.seconds);
      return e.enforceVimeoPlaybackState()
    });
    this.player.addEvent("playProgress", function(a) {
      e._timeTotal = parseFloat(a.duration);
      return e._lastSeekOffset = parseFloat(a.seconds)
    });
    "function" === typeof(a = this.player).api && a.api("play");
    "function" === typeof(b = this.player).api && b.api("pause");
    return this.setMediaState("ready")
  };
  a.prototype.enforceVimeoPlaybackState = function() {
    var a, b, e;
    a = this.isPlaying();
    "function" === typeof(b = this.player).api && b.api("play");
    if(!a) {
      return"function" === typeof(e = this.player).api ? e.api("pause") : void 0
    }
  };
  return a
}(VideoLinkShell.PlayerView);
acorn.registerShellModule(VimeoShell);
var YouTubeShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.shells.YouTubeShell = {};
VideoLinkShell = acorn.shells.VideoLinkShell;
YouTubeShell = acorn.shells.YouTubeShell = {id:"acorn.YouTubeShell", title:"YouTube", description:"a YouTube video", icon:"icon-play", validLinkPatterns:[acorn.util.urlRegEx("(www.)?youtube.com/v/([A-Za-z0-9-_]+).*"), acorn.util.urlRegEx("(www.)?youtube.com/embed/([A-Za-z0-9-_]+).*"), acorn.util.urlRegEx("(www.)?youtube.com/watch?.*v=([A-Za-z0-9-_]+).*"), acorn.util.urlRegEx("(www.)?y2u.be/([A-Za-z0-9-_]+)"), acorn.util.urlRegEx("(www.)?youtu.be/([A-Za-z0-9-_]+).*"), acorn.util.urlRegEx("(www.)?youtube.googleapis.com/v/([A-Za-z0-9-_]+).*")]};
YouTubeShell.Model = function(b) {
  function a() {
    this.embedLink = __bind(this.embedLink, this);
    this.youtubeId = __bind(this.youtubeId, this);
    this.metaDataUrl = __bind(this.metaDataUrl, this);
    this._defaultDescription = __bind(this._defaultDescription, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.defaultAttributes = function() {
    var b, d;
    b = a.__super__.defaultAttributes.apply(this, arguments);
    return _.extend(b, {title:(null != (d = this._fetchedDefaults) ? d.title : void 0) || b.title, thumbnail:"https://img.youtube.com/vi/" + this.youtubeId() + "/0.jpg"})
  };
  a.prototype._defaultDescription = function() {
    var a, b, e, f;
    _.isFinite(this.timeStart()) && _.isFinite(this.timeEnd()) && (b = acorn.util.Time.secondsToTimestring(this.timeStart()), a = acorn.util.Time.secondsToTimestring(this.timeEnd()), a = " from " + b + " to " + a);
    return'Remix of YouTube video "' + (null != (e = null != (f = this._fetchedDefaults) ? f.title : void 0) ? e : this.link()) + '"' + (null != a ? a : "") + "."
  };
  a.prototype.metaDataUrl = function() {
    return"https://gdata.youtube.com/feeds/api/videos/" + this.youtubeId() + "?v=2&alt=jsonc"
  };
  a.prototype.youtubeId = function() {
    var a, b;
    a = this.get("link");
    (b = _.find(this.module.validLinkPatterns, function(b) {
      return b.test(a)
    })) || ValueError("Incorrect youtube link, no video id found.");
    return b.exec(a)[3]
  };
  a.prototype.embedLink = function(a) {
    return"https://www.youtube.com/embed/" + this.youtubeId() + "?&fs=1&iv_load_policy=3&rel=0&showsearch=0&showinfo=0&hd=1&wmode=transparent&enablejsapi=1" + ("&controls=" + (a.noControls ? 0 : 1))
  };
  return a
}(VideoLinkShell.Model);
YouTubeShell.MediaView = function(b) {
  function a() {
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("youtube-shell");
  return a
}(VideoLinkShell.MediaView);
YouTubeShell.RemixView = function(b) {
  function a() {
    this.metaData = __bind(this.metaData, this);
    this.onMetaDataSync = __bind(this.onMetaDataSync, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("youtube-shell");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    return this.metaData().sync({success:this.onMetaDataSync})
  };
  a.prototype.onMetaDataSync = function(a) {
    var b;
    if(null == (b = this.model)._fetchedDefaults) {
      b._fetchedDefaults = {}
    }
    this.model._fetchedDefaults = {title:a.data.title};
    this.model.timeTotal(a.data.duration);
    this.model._updateAttributesWithDefaults();
    return this._setTimeInputMax()
  };
  a.prototype.metaData = function() {
    this.model.metaDataUrl() && !this._metaData && (this._metaData = new athena.lib.util.RemoteResource({url:this.model.metaDataUrl(), dataType:"json"}));
    return this._metaData
  };
  return a
}(VideoLinkShell.RemixView);
YouTubeShell.PlayerView = function(b) {
  function a() {
    this.initializeYouTubePlayer = __bind(this.initializeYouTubePlayer, this);
    this.initializeYouTubeAPI = __bind(this.initializeYouTubeAPI, this);
    this.isInState = __bind(this.isInState, this);
    this._playbackIsAfterEnd = __bind(this._playbackIsAfterEnd, this);
    this.duration = __bind(this.duration, this);
    this._seek = __bind(this._seek, this);
    this._monitorSeeking = __bind(this._monitorSeeking, this);
    this._seekOffset = __bind(this._seekOffset, this);
    this.playerId = __bind(this.playerId, this);
    this.render = __bind(this.render, this);
    this.destroy = __bind(this.destroy, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("youtube-shell");
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {"click .click-capture":function() {
      return b.togglePlayPause()
    }})
  };
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.on("Media:Play", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.playVideo ? a.playVideo() : void 0 : void 0
    });
    this.on("Media:Pause", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.pauseVideo ? a.pauseVideo() : void 0 : void 0
    });
    this.on("Media:End", function() {
      var a;
      return null != (a = b.player) ? "function" === typeof a.pauseVideo ? a.pauseVideo() : void 0 : void 0
    });
    return this.initializeYouTubeAPI()
  };
  a.prototype.destroy = function() {
    var b;
    null != (b = this._seekingMonitor) && b.destroy();
    return a.__super__.destroy.apply(this, arguments)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(acorn.util.iframe(this.model.embedLink({noControls:this.options.noControls}), this.playerId()));
    this.$el.append($("<div>").addClass("click-capture"));
    setTimeout(this.initializeYouTubePlayer, 0);
    return this
  };
  a.prototype.playerId = function() {
    return"youtube-player-" + this.cid
  };
  a.prototype._seekOffset = function(a) {
    var b, e;
    null == a && (a = {});
    return this._seekingMonitor && !a.bypassMonitor ? this._seekingMonitor.newOffset : null != (b = null != (e = this.player) ? "function" === typeof e.getCurrentTime ? e.getCurrentTime() : void 0 : void 0) ? b : 0
  };
  a.prototype._monitorSeeking = function(a) {
    var b, e = this;
    b = function() {
      if(e._seekingMonitor) {
        return clearInterval(e._seekingMonitor.interval), clearTimeout(e._seekingMonitor.timeout), delete e._seekingMonitor
      }
    };
    b();
    return this._seekingMonitor = {oldOffset:this._seekOffset(), newOffset:a, interval:setInterval(function() {
      var a, c, h;
      h = e._seekingMonitor.newOffset;
      a = e._seekOffset({bypassMonitor:!0});
      if((c = a !== e._seekingMonitor.oldOffset) && h <= a && a < h + 0.3) {
        return b()
      }
    }, 100), timeout:setTimeout(b, 5E3), destroy:b}
  };
  a.prototype._seek = function(a) {
    var b, e, f;
    this._monitorSeeking(a);
    this.isPlaying() || (b = a + 1 < this.model.timeTotal() ? a + 1 : 0 <= a - 1 ? 0 : a, null != (e = this.player) && "function" === typeof e.seekTo && e.seekTo(b, !0));
    try {
      return null != (f = this.player) ? "function" === typeof f.seekTo ? f.seekTo(a, !0) : void 0 : void 0
    }catch(g) {
      return console.log(g)
    }
  };
  a.prototype.duration = function() {
    var a, b;
    return null != (a = this.model.duration()) ? a : (null != (b = this.player) ? "function" === typeof b.getDuration ? b.getDuration() : void 0 : void 0) || 0
  };
  a.prototype._playbackIsAfterEnd = function(b) {
    var d;
    return a.__super__._playbackIsAfterEnd.apply(this, arguments) ? !0 : null != (d = this._playerInEndedState) ? d : !1
  };
  a.prototype.isInState = function(b) {
    var d, e, f;
    d = a.__super__.isInState.apply(this, arguments);
    if(!window.YT || !(null != (e = this.player) && e.getPlayerState)) {
      return d
    }
    f = this.player.getPlayerState();
    switch(b) {
      case "play":
        e = f === YT.PlayerState.PLAYING || f === YT.PlayerState.BUFFERING;
        break;
      case "pause":
        e = f === YT.PlayerState.PAUSED;
        break;
      case "end":
        e = f === YT.PlayerState.ENDED;
        break;
      default:
        e = void 0
    }
    e !== d && (console.log("Error: YT player must agree with internal state"), console.log("internal: " + this.mediaState() + " youtube: " + f));
    return d
  };
  a.prototype.youTubePlayerApiSrc = "//www.youtube.com/iframe_api";
  a.prototype.initializeYouTubeAPI = function() {
    if(!window.YT && !YouTubeShell._initializedYouTubeAPI) {
      return YouTubeShell._initializedYouTubeAPI = !0, $.getScript(this.youTubePlayerApiSrc)
    }
  };
  a.prototype.initializeYouTubePlayer = function() {
    var a = this;
    if(!window.YT || !YT.Player) {
      this.initializeYouTubeAPI(), setTimeout(this.initializeYouTubePlayer, 100)
    }else {
      return this.player = new YT.Player(this.playerId(), {events:{onReady:function() {
        var b, e;
        b = parseInt(null != (e = a.model.timeStart()) ? e : 0, 10);
        a.player.loadVideoById(a.model.youtubeId(), b);
        a.player.playVideo();
        a.player.pauseVideo();
        return a.setMediaState("ready")
      }, onStateChange:function(b) {
        return a._playerInEndedState = 0 === b.data
      }}})
    }
  };
  return a
}(VideoLinkShell.PlayerView);
acorn.registerShellModule(YouTubeShell);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.TimedMediaRemixView = function(b) {
  function a() {
    this.onProgressBarChange = __bind(this.onProgressBarChange, this);
    this.duration = __bind(this.duration, this);
    this.render = __bind(this.render, this);
    this.initializeElapsedTimeView = __bind(this.initializeElapsedTimeView, this);
    this.initializePlayPauseToggleView = __bind(this.initializePlayPauseToggleView, this);
    this.initializeControls = __bind(this.initializeControls, this);
    this.initializeProgressBar = __bind(this.initializeProgressBar, this);
    this.initializeMediaView = __bind(this.initializeMediaView, this);
    this.initialize = __bind(this.initialize, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("timed-media-remix-view");
  a.prototype.template = _.template("<div class='media-view'></div>\n<div class='time-controls'></div>");
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.initializeMediaView();
    this.initializeProgressBar();
    this.initializePlayPauseToggleView();
    this.initializeElapsedTimeView();
    return this.initializeControls()
  };
  a.prototype.initializeMediaView = function() {
    var a = this;
    this.mediaView = this.options.mediaView;
    null == this.mediaView && (this.mediaView = new this.model.module.MediaView({model:this.model, eventhub:this.eventhub, playOnReady:this.options.playOnReady}));
    this.listenTo(this.mediaView, "all", function() {
      var b;
      b = _.map(arguments, function(b) {
        return b === a.mediaView ? a : b
      });
      return a.trigger.apply(a, b)
    });
    this.listenTo(this.mediaView, "Media:StateChange", function() {
      return a.playPauseToggleView.refreshToggle()
    });
    return this.listenTo(this.mediaView, "Media:Progress", function(b, e, f) {
      return a.progressBarView.value(e / f * 100, {silent:true})
    })
  };
  a.prototype.initializeProgressBar = function() {
    this.progressBarView = new acorn.player.ValueSliderView({handle:!1, extraClasses:["progress-bar-view"], eventhub:this.eventhub, value:0});
    return this.progressBarView.on("ValueSliderView:ValueDidChange", this.onProgressBarChange)
  };
  a.prototype.initializeControls = function() {
    var a = this;
    this.controlsView = new acorn.player.controls.ControlToolbarView({extraClasses:["shell-controls"], buttons:[this.playPauseToggleView, this.elapsedTimeView], eventhub:this.eventhub});
    this.controlsView.on("PlayControl:Click", function() {
      return a.mediaView.play()
    });
    this.controlsView.on("PauseControl:Click", function() {
      return a.mediaView.pause()
    });
    return this.controlsView.on("ElapsedTimeControl:Seek", this.mediaView.seek)
  };
  a.prototype.initializePlayPauseToggleView = function() {
    var a, b = this;
    a = new Backbone.Model;
    a.isPlaying = function() {
      return b.mediaView.isPlaying()
    };
    return this.playPauseToggleView = new acorn.player.controls.PlayPauseControlToggleView({eventhub:this.eventhub, model:a})
  };
  a.prototype.initializeElapsedTimeView = function() {
    var a, b = this;
    a = new Backbone.Model({elapsed:0, total:this.duration() || 0});
    this.elapsedTimeView = new acorn.player.controls.ElapsedTimeControlView({eventhub:this.eventhub, model:a});
    return a.listenTo(this.mediaView, "Media:Progress", function(e, f, g) {
      var h, i;
      a.set("elapsed", f + (("function" === typeof(h = b.model).timeStart ? h.timeStart() : void 0) || 0));
      return a.set("total", ("function" === typeof(i = b.model).timeTotal ? i.timeTotal() : void 0) || b.duration() || g)
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template());
    this.$(".media-view").first().append(this.mediaView.render().el);
    this.$(".time-controls").first().append(this.progressBarView.render().el).append(this.controlsView.render().el);
    return this
  };
  a.prototype.duration = function() {
    var a;
    return(null != (a = this.mediaView) ? a.duration() : void 0) || this.model.duration() || 0
  };
  a.prototype.onProgressBarChange = function(a) {
    return this.mediaView.seek(a * this.mediaView.duration() / 100)
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.ValueSliderView = function(b) {
  function a() {
    this._onMouseAdjustment = __bind(this._onMouseAdjustment, this);
    this.value = __bind(this.value, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("value-slider-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " value-slider"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {mouseEventsNamespace:"valueslider", value:100, handle:!0, draggable:!0, min:0, max:100})
  };
  a.prototype.template = _.template('<div class="<%= targetClassName %>">\n  <div class="slider-elements mouse-ignore-targets"></div>\n</div>');
  a.prototype.initialize = function() {
    var b, d = this;
    a.__super__.initialize.apply(this, arguments);
    this._value = this.options.value;
    this._hasHandle = this.options.handle;
    b = {low:this.options.min, high:this.options.max, draggable:!1, extraClasses:"value-bar-view"};
    this._valueBar = new acorn.player.SlidingBarView(b);
    b = {location:this._value, extraClasses:"slider-handle-view", draggable:!1};
    this._handle = new acorn.player.SlidingObjectView(b);
    this._hasHandle || this._handle.$el.addClass("hidden");
    return _.each([this, this._valueBar, this._handle], function(a) {
      d.listenTo(a, "MouseTrackingView:MouseDidMousedown", d._onMouseAdjustment);
      return d.listenTo(a, "MouseTrackingView:MouseDidDrag", d._onMouseAdjustment)
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({targetClassName:this._targetClassName()}));
    this.$(".slider-elements").first().append(this._valueBar.render().el).append(this._handle.render().el);
    return this
  };
  a.prototype.value = function(a, b) {
    null == b && (b = {});
    null != a && (util.bound(a), _.isNaN(a) || a === this._value || (this._value = a, this._valueBar.values({low:0, high:this._value}), this._handle.location(this._value), b.silent || this.trigger("ValueSliderView:ValueDidChange", this._value)));
    return this._value
  };
  a.prototype._onMouseAdjustment = function() {
    return this.value((this._hasHandle ? this._handle.sliderOptimizedPercentContainerMouseOffset() : this._percentElementMouseDisplacement({offsetFromElement:this.$el})).x)
  };
  return a
}(acorn.player.MouseTrackingView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
ControlToolbarView = acorn.player.controls.ControlToolbarView;
acorn.player.ContentView = function(b) {
  function a() {
    this.onMediaStateChange = __bind(this.onMediaStateChange, this);
    this.onMouseStoppedMoving = __bind(this.onMouseStoppedMoving, this);
    this.onMouseMoved = __bind(this.onMouseMoved, this);
    this._onUpdateProgressBar = __bind(this._onUpdateProgressBar, this);
    this._onProgressBarValueChange = __bind(this._onProgressBarValueChange, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("content-view");
  a.prototype.acornControls = ["Sources", "Edit", "Acorn", "Fullscreen"];
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {mousemove:this.onMouseMoved, mouseleave:this.onMouseStoppedMoving})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {playOnReady:!1})
  };
  a.prototype.initialize = function() {
    var b, d = this;
    a.__super__.initialize.apply(this, arguments);
    b = acorn.shellWithAcorn(this.model);
    this.shellView = new b.module.MediaView({model:b, eventhub:this.eventhub, playOnReady:this.options.playOnReady});
    this.progressBarView = this.shellView.progressBarView;
    null == this.progressBarView && (this.progressBarView = new acorn.player.ValueSliderView({handle:!1, extraClasses:["progress-bar-view"], eventhub:this.eventhub, value:0}));
    this.acornControlsView = new ControlToolbarView({extraClasses:["acorn-controls"], buttons:this.acornControls, eventhub:this.eventhub});
    this.shellControlsView = this.shellView.controlsView;
    null == this.shellControlsView && (this.shellControlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:this.shellView.controls, eventhub:this.eventhub}));
    this.summaryView = this.shellView.summaryView;
    this.summaryView.$el.addClass("autohides");
    this.controlsView = new ControlToolbarView({extraClasses:["autohides"], buttons:[this.acornControlsView, this.shellControlsView], eventhub:this.eventhub});
    this.acornControlsView.$el.addClass("right");
    this.shellControlsView.$el.addClass("left");
    this.acornControlsView.on("all", function(a) {
      return d.eventhub.trigger(a)
    });
    this.progressBarView.on("ValueSliderView:ValueDidChange", this._onProgressBarValueChange);
    this.shellView.on("Shell:UpdateProgressBar", this._onUpdateProgressBar);
    this.eventhub.on("Keypress:SPACEBAR", function() {
      return d.shellView.togglePlayPause()
    });
    this.eventhub.on("show:editor", function() {
      return d.shellView.pause()
    });
    return this.shellView.on("Media:StateChange", this.onMediaStateChange)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.summaryView.render().el);
    this.$el.append(this.progressBarView.render().el);
    this.$el.append(this.controlsView.render().el);
    this.$el.append(this.shellView.render().el);
    this.acornControlsView.$(".control-view.sources").addClass("hidden");
    return this
  };
  a.prototype._onProgressBarValueChange = function(a) {
    return this.shellView.trigger("ProgressBar:DidProgress", a)
  };
  a.prototype._onUpdateProgressBar = function(a, b) {
    return a ? (this.progressBarView.$el.removeClass("hidden"), this.progressBarView.value(b, {silent:!0})) : this.progressBarView.$el.addClass("hidden")
  };
  a.prototype.onMouseMoved = function(a) {
    var b, e = this;
    this.$el.addClass("mouse-moving");
    this._lastMousePos = b = "" + a.clientX + "," + a.clientY;
    return setTimeout(function() {
      if(e._lastMousePos === b) {
        return e.onMouseStoppedMoving()
      }
    }, 2E3)
  };
  a.prototype.onMouseStoppedMoving = function() {
    return this.$el.removeClass("mouse-moving")
  };
  a.prototype.onMediaStateChange = function() {
    return this.shellView.isPlaying() ? this.$el.addClass("playing") : this.$el.removeClass("playing")
  };
  return a
}(athena.lib.View);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.HighlightsSliderView = function(b) {
  function a() {
    this.value = __bind(this.value, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this._targetClassName = __bind(this._targetClassName, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("highlights-slider-view");
  a.prototype._targetClassName = function() {
    return"" + a.__super__._targetClassName.apply(this, arguments) + " highlights-slider"
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {highlights:[]})
  };
  a.prototype.initialize = function() {
    a.__super__.initialize.apply(this, arguments);
    this.highlights = this.options.highlights;
    return this.clipGroupView = new acorn.player.ClipGroupView({eventhub:this.eventhub, clips:this.highlights})
  };
  a.prototype.render = function() {
    var b;
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.template({targetClassName:this._targetClassName()}));
    this.$(".slider-elements").first().append(this._valueBar.render().el).append(this._handle.render().el).append(this.clipGroupView.render().el);
    b = this.clipGroupView.$el.css("height");
    this.$el.css("height", b);
    this.$(".sliding-bar").first().css("height", b);
    this.$(".slider-handle-view .sliding-object").first().css("height", b + 6);
    return this
  };
  a.prototype.value = function(a) {
    null != a && (util.bound(a), _.isNaN(a) || a === this._value || (this._value = a, this._valueBar.values({low:0, high:this._value}), this._handle.location(this._value), this.trigger("ValueSliderView:ValueDidChange", this._value)));
    return this._value
  };
  return a
}(acorn.player.ValueSliderView);
var HighlightsShell, __bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
}, __hasProp = {}.hasOwnProperty, __extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
}, __indexOf = [].indexOf || function(b) {
  for(var a = 0, c = this.length;a < c;a++) {
    if(a in this && this[a] === b) {
      return a
    }
  }
  return-1
};
acorn.shells.HighlightsShell = {};
Shell = acorn.shells.Shell;
HighlightsShell = acorn.shells.HighlightsShell = {id:"acorn.HighlightsShell", title:"Highlights", description:"Media with highlights and notes.", icon:"icon-pencil"};
HighlightsShell.Model = function(b) {
  function a() {
    this.link = __bind(this.link, this);
    this.duration = __bind(this.duration, this);
    this.shellModel = __bind(this.shellModel, this);
    this.defaultAttributes = __bind(this.defaultAttributes, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.shell = a.property("shell");
  a.prototype.highlights = a.property("highlights", {"default":[]});
  a.prototype.defaultAttributes = function() {
    return _.extend(a.__super__.defaultAttributes.apply(this, arguments), {title:this.shellModel().title(), description:this.shellModel().description()})
  };
  a.prototype.shellModel = function() {
    null == this._shellModel && (this._shellModel = new Shell.Model.withData(this.shell()));
    return this._shellModel
  };
  a.prototype.duration = function() {
    return this.shellModel().duration()
  };
  a.prototype.link = function() {
    var a;
    return"function" === typeof(a = this.shellModel()).link ? a.link() : void 0
  };
  return a
}(Shell.Model);
HighlightsShell.MediaView = function(b) {
  function a() {
    this.onMouseLeave = __bind(this.onMouseLeave, this);
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.duration = __bind(this.duration, this);
    this.seekOffset = __bind(this.seekOffset, this);
    this.seek = __bind(this.seek, this);
    this.setMediaState = __bind(this.setMediaState, this);
    this.mediaState = __bind(this.mediaState, this);
    this.isInState = __bind(this.isInState, this);
    this._onProgressBarDidProgress = __bind(this._onProgressBarDidProgress, this);
    this.render = __bind(this.render, this);
    this.initializeMedia = __bind(this.initializeMedia, this);
    this.remove = __bind(this.remove, this);
    this.initializeHighlightsViews = __bind(this.initializeHighlightsViews, this);
    this.initializeElapsedTimeView = __bind(this.initializeElapsedTimeView, this);
    this.initializePlayPauseToggleView = __bind(this.initializePlayPauseToggleView, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    this.defaults = __bind(this.defaults, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("highlights-shell");
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {readyOnRender:!1, popupHighlights:!0})
  };
  a.prototype.events = function() {
    return _.extend(a.__super__.events.apply(this, arguments), {mousemove:this.onMouseMove, mouseleave:this.onMouseLeave})
  };
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.initializePlayPauseToggleView();
    this.initializeElapsedTimeView();
    this.initializeHighlightsViews();
    this.controlsView = new ControlToolbarView({extraClasses:["shell-controls"], buttons:[this.playPauseToggleView, this.elapsedTimeView], eventhub:this.eventhub});
    this.controlsView.on("PlayControl:Click", function() {
      return b.play()
    });
    this.controlsView.on("PauseControl:Click", function() {
      return b.pause()
    });
    return this.controlsView.on("ElapsedTimeControl:Seek", this.seek)
  };
  a.prototype.initializePlayPauseToggleView = function() {
    var a, b = this;
    a = new Backbone.Model;
    a.isPlaying = function() {
      return b.isPlaying()
    };
    return this.playPauseToggleView = new acorn.player.controls.PlayPauseControlToggleView({eventhub:this.eventhub, model:a})
  };
  a.prototype.initializeElapsedTimeView = function() {
    var a;
    a = new Backbone.Model({elapsed:0, total:this.duration() || 0});
    this.elapsedTimeView = new acorn.player.controls.ElapsedTimeControlView({eventhub:this.eventhub, model:a});
    return a.listenTo(this.subMediaView, "Media:Progress", function(b, e, f) {
      a.set("elapsed", e);
      return a.set("total", f)
    })
  };
  a.prototype.initializeHighlightsViews = function() {
    var a = this;
    this.highlightViews = this.options.highlightViews;
    null == this.highlightViews && (this.highlightViews = _.map(this.model.highlights(), function(b) {
      b = new acorn.player.ClipView({eventhub:a.eventhub, model:b, min:0, max:a.model.duration()});
      b.on("Clip:Click", function(b) {
        a.seek(b.model.timeStart);
        return a.play()
      });
      return b
    }));
    this.highlightsGroupView = new acorn.player.ClipGroupView({clips:this.highlightViews, eventhub:this.eventhub});
    return this.on("Shell:UpdateProgressBar", function(b, e) {
      var f;
      f = a.progressFromPercent(e);
      return _.each(a.highlightViews, function(b) {
        var d;
        d = b.values();
        if(d.start <= f && f <= d.end) {
          if(a.options.popupHighlights) {
            return b.setActive(true)
          }
        }else {
          return b.setActive(false)
        }
      })
    })
  };
  a.prototype.remove = function() {
    this.controlsView.off("PlayControl:Click");
    this.controlsView.off("PauseControl:Click");
    return a.__super__.remove.apply(this, arguments)
  };
  a.prototype.initializeMedia = function() {
    var a = this;
    this.subMediaView = new (this.model.shellModel().module.MediaView)({model:this.model.shellModel(), eventhub:this.eventhub, playOnReady:this.options.playOnReady});
    this.listenTo(this.subMediaView, "all", function() {
      var b;
      b = _.map(arguments, function(b) {
        return b === a.subMediaView ? a : b
      });
      return a.trigger.apply(a, b)
    });
    this.on("Media:StateChange", function() {
      return a.playPauseToggleView.refreshToggle()
    });
    return this.initializeMediaEvents(this.options)
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.subMediaView.render().el);
    this.$el.append(this.highlightsGroupView.render().el);
    this.playPauseToggleView.refreshToggle();
    return this
  };
  a.prototype._onProgressBarDidProgress = function(a) {
    return this.seek(this.progressFromPercent(a))
  };
  a.prototype.isInState = function(a) {
    return this.subMediaView.isInState(a)
  };
  a.prototype.mediaState = function() {
    return this.subMediaView.mediaState()
  };
  a.prototype.setMediaState = function(a) {
    return this.subMediaView.setMediaState(a)
  };
  a.prototype.seek = function(b) {
    var d;
    a.__super__.seek.apply(this, arguments);
    return null != (d = this.subMediaView) ? d.seek(b) : void 0
  };
  a.prototype.seekOffset = function() {
    var a, b;
    return null != (a = null != (b = this.subMediaView) ? b.seekOffset() : void 0) ? a : 0
  };
  a.prototype.duration = function() {
    var a;
    return(null != (a = this.subMediaView) ? a.duration() : void 0) || this.model.duration() || 0
  };
  a.prototype.onMouseMove = function(a) {
    var b = this;
    return _.each(this.highlightViews, function(e) {
      var f, g, h;
      f = e.$el.offset().left;
      g = e.$el.width();
      if(f <= (h = a.clientX) && h <= f + g) {
        if(b.options.popupHighlights) {
          return e.showNote()
        }
      }else {
        return e.hideNote()
      }
    })
  };
  a.prototype.onMouseLeave = function() {
    return _.each(this.highlightViews, function(a) {
      return a.hideNote()
    })
  };
  return a
}(Shell.MediaView);
HighlightsShell.RemixView = function(b) {
  function a() {
    this.onClickClipTime = __bind(this.onClickClipTime, this);
    this.onChangeRangeTimes = __bind(this.onChangeRangeTimes, this);
    this.inactivateHighlights = __bind(this.inactivateHighlights, this);
    this.activeHighlight = __bind(this.activeHighlight, this);
    this.onAddHighlight = __bind(this.onAddHighlight, this);
    this.onDeleteHighlight = __bind(this.onDeleteHighlight, this);
    this.onCancelEditHighlight = __bind(this.onCancelEditHighlight, this);
    this.onSaveHighlight = __bind(this.onSaveHighlight, this);
    this.onClipHighlightDone = __bind(this.onClipHighlightDone, this);
    this.onClipHighlight = __bind(this.onClipHighlight, this);
    this.onEditHighlight = __bind(this.onEditHighlight, this);
    this._setTimeInputMax = __bind(this._setTimeInputMax, this);
    this.duration = __bind(this.duration, this);
    this.render = __bind(this.render, this);
    this.initializeHighlightView = __bind(this.initializeHighlightView, this);
    this.initializeHighlightViews = __bind(this.initializeHighlightViews, this);
    this.initializeTimeClipViews = __bind(this.initializeTimeClipViews, this);
    this.initializeTimeRangeView = __bind(this.initializeTimeRangeView, this);
    this.initializeRemixMediaView = __bind(this.initializeRemixMediaView, this);
    this.initialize = __bind(this.initialize, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("highlights-shell");
  a.activeLinkInput = !0;
  a.prototype.controlsTemplate = _.template('<div class="highlight-button right-control">\n  <button class="btn btn-small add-highlight">\n    <i class="icon-plus"></i> Highlight</button>\n</div>\n<div class="clip-time-button right-control">\n  <button class="btn btn-small clip-time">\n    <i class="icon-resize-horizontal"></i> Clip</button>\n</div>');
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {click:function() {
      return b.inactivateHighlights()
    }, "click button.clip-time":function() {
      return b.onClickClipTime()
    }, "click button.add-highlight":function() {
      return b.onAddHighlight()
    }, "keydown textarea.clip-note":function(a) {
      switch(a.keyCode) {
        case athena.lib.util.keys.ENTER:
          return b.onSaveHighlight(b.activeHighlight()), b.$("textarea.clip-note").blur();
        case athena.lib.util.keys.ESCAPE:
          return b.onCancelEditHighlight(b.activeHighlight()), b.$("textarea.clip-note").blur()
      }
    }})
  };
  a.prototype.initialize = function() {
    var b = this;
    a.__super__.initialize.apply(this, arguments);
    this.model.highlights(this.model.highlights());
    this.initializeHighlightViews();
    this.initializeRemixMediaView();
    this.initializeTimeRangeView();
    this.initializeTimeClipViews();
    return this.on("Remix:SwappedShell", function(a, e) {
      if(e === b.model) {
        return _.defer(b.onAddHighlight)
      }
    })
  };
  a.prototype.initializeRemixMediaView = function() {
    var a = this;
    this.mediaView = new this.model.module.MediaView({eventhub:this.eventhub, model:this.model, playOnReady:!1, highlightViews:this.highlightViews});
    this.remixMediaView = new acorn.player.TimedMediaRemixView({eventhub:this.eventhub, model:this.model, mediaView:this.mediaView});
    return this.listenTo(this.mediaView, "Media:Progress", function(b, e) {
      var f;
      return null != (f = a.timeRangeView) ? f.progress(e, {silent:!0}) : void 0
    })
  };
  a.prototype.initializeTimeRangeView = function() {
    var a = this;
    this.timeRangeView = new acorn.player.TimeRangeInputView({eventhub:this.eventhub, min:0, max:this.duration()});
    this.timeRangeView.on("TimeRangeInputView:DidChangeTimes", this.onChangeRangeTimes);
    this.timeRangeView.on("TimeRangeInputView:DidChangeProgress", function(b) {
      return a.mediaView.seek(b)
    });
    return this.timeRangeView.$el.addClass("highlights-time-range-input-view")
  };
  a.prototype.initializeTimeClipViews = function() {
    var a, b = this;
    a = this.model.shellModel();
    this.clipTimeRangeView = new acorn.player.TimeRangeInputView({eventhub:this.eventhub, min:0, max:a.duration()});
    this.clipTimeRangeView.on("TimeRangeInputView:DidChangeTimes", function(e) {
      var f, g;
      f = {};
      if(_.isNumber(null != e ? e.start : void 0)) {
        f.timeStart = e.start
      }
      if(_.isNumber(null != e ? e.end : void 0)) {
        f.timeEnd = e.end
      }
      f.timeStart !== a.timeStart() && (g = 0);
      f.timeEnd !== a.timeEnd() && (g = Infinity);
      a.set(f);
      b.mediaView.isInState("pause") || b.mediaView.play();
      if(null != g) {
        return g = Math.min(g, a.timeEnd() - 2), g = Math.max(a.timeStart(), g), b.mediaView.seek(g)
      }
    });
    this.clipTimeRangeView.on("TimeRangeInputView:DidChangeProgress", function(a) {
      return b.mediaView.seek(a)
    });
    this.onClipTimeStart = function() {
      b.mediaView.highlightsGroupView.$el.hide();
      b.timeRangeView.$el.hide();
      b.clipTimeRangeView.render().$el.show();
      b.$("button.clip-time").addClass("active btn-success");
      return b._oldClipTimes = {start:a.timeStart(), end:a.timeEnd()}
    };
    return this.onClipTimeEnd = function() {
      var e, f, g, h, i, j, k, l;
      f = b.model.highlights();
      g = f.slice(0);
      l = _.range(g.length);
      j = 0;
      for(k = l.length;j < k;j++) {
        if(h = l[j], e = g[h], i = b._oldClipTimes.start - a.timeStart(), a.timeEnd(), e.timeStart += i, e.timeEnd += i, e.timeStart = Math.max(e.timeStart, 0), e.timeEnd = Math.min(e.timeEnd, a.timeEnd()), e.timeStart >= a.timeEnd() || 0 >= e.timeEnd) {
          f.splice(h, 1), b.highlightViews.splice(h, 1)
        }
      }
      b.initializeHighlightViews();
      b.initializeRemixMediaView();
      b.initializeTimeRangeView();
      b.render();
      return b._oldClipTimes = void 0
    }
  };
  a.prototype.initializeHighlightViews = function() {
    return this.highlightViews = _.map(this.model.highlights(), this.initializeHighlightView)
  };
  a.prototype.initializeHighlightView = function(a) {
    var b, e = this;
    b = new acorn.player.EditableClipView({eventhub:this.eventhub, model:a, min:0, max:this.model.duration()});
    b.on("Clip:Toolbar:Click:Clip", function() {
      return e.onClipHighlight(b)
    });
    b.on("Clip:Toolbar:Click:Clip-Save", function() {
      return e.onClipHighlightDone(b)
    });
    b.on("Clip:Toolbar:Click:Edit", function() {
      return e.onEditHighlight(b)
    });
    b.on("Clip:Toolbar:Click:Edit-Save", function() {
      return e.onSaveHighlight(b)
    });
    b.on("Clip:Toolbar:Click:Delete", function() {
      return e.onDeleteHighlight(b)
    });
    return b
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.empty();
    this.$el.append(this.remixMediaView.render().el);
    this.remixMediaView.controlsView.$el.append(this.controlsTemplate());
    this.remixMediaView.$(".time-controls").first().prepend(this.clipTimeRangeView.render().el).prepend(this.timeRangeView.render().el);
    this.timeRangeView.$el.hide();
    this.clipTimeRangeView.$el.hide();
    return this
  };
  a.prototype.duration = function() {
    var a, b;
    return(null != (a = this.remixMediaView) ? null != (b = a.mediaView) ? b.duration() : void 0 : void 0) || this.model.duration() || 0
  };
  a.prototype._setTimeInputMax = function() {
    return this.timeRangeView.setMax(this.duration())
  };
  a.prototype.onEditHighlight = function(a) {
    this.inactivateHighlights([a]);
    a.setActive(!0);
    return a.$("textarea").focus()
  };
  a.prototype.onClipHighlight = function(a) {
    if(this._clippingHighlight) {
      this.onClipHighlightDone()
    }
    this._clippingHighlight = a;
    this.inactivateHighlights([this._clippingHighlight]);
    this._clippingHighlight.clipping(!0);
    this.timeRangeView.values(this._clippingHighlight.values());
    this.timeRangeView.$el.show();
    this.mediaView.$(".clip-group-view").addClass("clipping");
    return this.mediaView.options.popupHighlights = !1
  };
  a.prototype.onClipHighlightDone = function() {
    this.timeRangeView.$el.hide();
    this.mediaView.highlightsGroupView.softRender();
    this.mediaView.$(".clip-group-view").removeClass("clipping");
    this.mediaView.options.popupHighlights = !0;
    this._clippingHighlight.clipping(!1);
    return this._clippingHighlight = void 0
  };
  a.prototype.onSaveHighlight = function(a) {
    this.inactivateHighlights([a]);
    a.save();
    return a.setActive(!1)
  };
  a.prototype.onCancelEditHighlight = function(a) {
    a.cancel();
    this.inactivateHighlights([a]);
    return a.setActive(!1)
  };
  a.prototype.onDeleteHighlight = function(a) {
    var b;
    if(a) {
      if(a === this._clippingHighlight) {
        this.onClipHighlightDone()
      }
      this.inactivateHighlights();
      b = this.model.highlights();
      b.splice(b.indexOf(a.clip), 1);
      this.highlightViews.splice(this.highlightViews.indexOf(a), 1);
      return this.mediaView.highlightsGroupView.softRender()
    }
  };
  a.prototype.onAddHighlight = function() {
    var a;
    if(this._oldClipTimes) {
      this.onClipTimeEnd()
    }
    if(this._clippingHighlight) {
      this.onClipHighlightDone()
    }
    a = {timeStart:0, timeEnd:this.duration(), title:""};
    this.model.highlights().push(a);
    a = this.initializeHighlightView(a);
    this.inactivateHighlights();
    this.highlightViews.push(a);
    this.mediaView.highlightsGroupView.softRender();
    return this.onClipHighlight(a)
  };
  a.prototype.activeHighlight = function() {
    return _.find(this.highlightViews, function(a) {
      return a.isActive()
    })
  };
  a.prototype.inactivateHighlights = function(a) {
    null == a && (a = []);
    a.push(this._clippingHighlight);
    return _.each(this.highlightViews, function(b) {
      if(0 > __indexOf.call(a, b)) {
        return b.save(), b.setActive(!1)
      }
    })
  };
  a.prototype.onChangeRangeTimes = function(a) {
    var b, e;
    e = this._clippingHighlight.values();
    a.start !== e.start && (b = 0);
    a.end !== e.end && (b = Infinity);
    this._clippingHighlight.values(a);
    this.mediaView.isInState("pause") || this.mediaView.play();
    if(null != b) {
      return e = this._clippingHighlight.values(), b = Math.min(b, e.end - 2), b = Math.max(e.start, b), this.mediaView.seek(b)
    }
  };
  a.prototype.onClickClipTime = function() {
    return this._oldClipTimes ? this.onClipTimeEnd() : this.onClipTimeStart()
  };
  return a
}(Shell.RemixView);
acorn.registerShellModule(HighlightsShell);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
__hasProp = {}.hasOwnProperty;
__extends = function(b, a) {
  function c() {
    this.constructor = b
  }
  for(var d in a) {
    __hasProp.call(a, d) && (b[d] = a[d])
  }
  c.prototype = a.prototype;
  b.prototype = new c;
  b.__super__ = a.prototype;
  return b
};
acorn.player.PlayerView = function(b) {
  function a() {
    this.openAcornWebsite = __bind(this.openAcornWebsite, this);
    this.enterFullscreen = __bind(this.enterFullscreen, this);
    this.onSave = __bind(this.onSave, this);
    this.editable = __bind(this.editable, this);
    this.editorView = __bind(this.editorView, this);
    this.splashView = __bind(this.splashView, this);
    this.contentView = __bind(this.contentView, this);
    this.render = __bind(this.render, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.events = __bind(this.events, this);
    return a.__super__.constructor.apply(this, arguments)
  }
  __extends(a, b);
  a.prototype.className = a.classNameExtend("player-view row-fluid");
  a.prototype.events = function() {
    var b = this;
    return _.extend(a.__super__.events.apply(this, arguments), {keydown:function(a) {
      var e;
      if(/(input|textarea|select)/i.test(a.target.tagName)) {
        return a
      }
      e = _.invert(athena.lib.util.keys)[a.keyCode];
      b.eventhub.trigger("Keypress:" + e);
      "SPACEBAR" === e && a.preventDefault();
      return a
    }})
  };
  a.prototype.defaults = function() {
    return _.extend(a.__super__.defaults.apply(this, arguments), {autoplay:!0})
  };
  a.prototype.initialize = function() {
    var b, d = this;
    a.__super__.initialize.apply(this, arguments);
    this.model instanceof acorn.Model || TypeError(this.model, "acorn.Model");
    b = acorn.shellWithAcorn(this.model);
    b instanceof acorn.shells.Shell.Model || TypeError(b, "acorn.shells.Shell.Model");
    this.editable(!!this.options.editable);
    this.eventhub.on("show:editor", function() {
      if(d.editable()) {
        return d.content(d.editorView.apply(d, arguments)), d.$el.attr("data-showing", "editor")
      }
    });
    this.eventhub.on("show:splash", function() {
      d.content(d.splashView());
      return d.$el.attr("data-showing", "splash")
    });
    this.eventhub.on("show:content", function() {
      d.content(d.contentView());
      return d.$el.attr("data-showing", "content")
    });
    this.eventhub.on("Editor:Saved", this.onSave);
    this.eventhub.on("Editor:Cancel", function() {
      var a;
      if(d.editable()) {
        return null != (a = d._editorView) && a.destroy(), d._editorView = void 0, d.eventhub.trigger("show:content")
      }
    });
    this.eventhub.on("EditControl:Click", function() {
      if(d.editable()) {
        return d.eventhub.trigger("show:editor")
      }
    });
    this.eventhub.on("AcornControl:Click", function() {
      return d.openAcornWebsite()
    });
    this.eventhub.on("SourcesControl:Click", function() {
      return d.eventhub.trigger("show:sources")
    });
    return this.eventhub.on("FullscreenControl:Click", function() {
      return d.enterFullscreen()
    })
  };
  a.prototype.render = function() {
    a.__super__.render.apply(this, arguments);
    this.$el.attr("tabindex", "-1");
    return this
  };
  a.prototype.contentView = function() {
    null == this._contentView && (this._contentView = new acorn.player.ContentView({eventhub:this.eventhub, model:this.model, playOnReady:this.options.autoplay}));
    return this._contentView
  };
  a.prototype.splashView = function() {
    null == this._splashView && (this._splashView = new acorn.player.SplashView({eventhub:this.eventhub, model:this.model}));
    return this._splashView
  };
  a.prototype.editorView = function(a) {
    var b, e;
    null == a && (a = {});
    if(this.editable()) {
      return b = {eventhub:this.eventhub, model:this.model.clone()}, a.singleShellEditor && (b.ShellEditorView = acorn.player.ShellEditorView), a.minimize && (b.minimize = !0), null != (e = this._editorView) ? e : this._editorView = new acorn.player.EditorView(b)
    }
  };
  a.prototype.editable = function(a) {
    null != a && ((this._editable = a) ? (this.$el.addClass("editable"), this.$el.removeClass("uneditable")) : (this.$el.removeClass("editable"), this.$el.addClass("uneditable")));
    return this._editable
  };
  a.prototype.onSave = function() {
    var a, b;
    if(this.editable()) {
      return this.model.set(this._editorView.model.attributes), null != (a = this._contentView) && a.destroy(), this._contentView = void 0, this.eventhub.trigger("show:content"), null != (b = this._editorView) && b.destroy(), this._editorView = void 0
    }
  };
  a.prototype.enterFullscreen = function() {
    return acorn.util.fullscreen(this.$el.parent())
  };
  a.prototype.openAcornWebsite = function() {
    return window.open(this.model.pageUrl(), "_blank")
  };
  return a
}(athena.lib.ContainerView);
__bind = function(b, a) {
  return function() {
    return b.apply(a, arguments)
  }
};
acorn.player.Player = function() {
  function b(a) {
    this.options = a;
    this.appendTo = __bind(this.appendTo, this);
    this.showView = __bind(this.showView, this);
    this.render = __bind(this.render, this);
    this.editable = __bind(this.editable, this);
    this.destroy = __bind(this.destroy, this);
    this.initialize = __bind(this.initialize, this);
    this.defaults = __bind(this.defaults, this);
    this.initialize()
  }
  _.extend(b.prototype, Backbone.Events);
  b.prototype.defaults = function() {
    return{show:"splash", autoplay:!0}
  };
  b.prototype.initialize = function() {
    var a;
    null == this.$el && (this.$el = $("<div>").addClass("acorn-player"));
    this.el = this.$el[0];
    this.options = _.defaults(this.options, this.defaults());
    this.model = null != (a = this.options.model) ? a : this.options.acornModel;
    !this.model && this.options.data && null == this.model && (this.model = acorn(this.options.data));
    this.model instanceof acorn.Model || TypeError(this.model, "acorn.Model");
    this.acornModel = this.model;
    this.eventhub = this;
    this.options.editable = this.options.editable || this.acornModel.isNew();
    this.options.autoplay = !_.contains(["false", "0"], this.options.autoplay);
    return this.view = new acorn.player.PlayerView({model:this.acornModel, eventhub:this.eventhub, editable:this.options.editable, autoplay:this.options.autoplay})
  };
  b.prototype.destroy = function() {
    var a;
    this.view.destroy();
    return null != (a = this.$el) ? a.remove() : void 0
  };
  b.prototype.editable = function(a) {
    null != a && (a = a || this.acornModel.isNew(), this.view.editable(a));
    return this.view.editable()
  };
  b.prototype.render = function() {
    this.showView();
    this.$el.append(this.view.render().el);
    return this
  };
  b.prototype.showView = function() {
    var a, b, d = this;
    return"editor" === this.options.show.slice(0, 6) ? (a = {}, /single/.test(this.options.show) && (a.singleShellEditor = !0), /minimize/.test(this.options.show) && (a.minimize = !0), this.eventhub.trigger("show:editor", a)) : "content" === this.options.show.slice(0, 7) ? (b = this.options.show.slice(8), a = parseInt(b), "paused" === b ? (this.view.options.autoplay = !1, this.eventhub.trigger("show:content")) : 0 < a ? (this.eventhub.trigger("show:splash"), setTimeout(function() {
      return d.eventhub.trigger("show:content")
    }, a)) : this.eventhub.trigger("show:content")) : this.eventhub.trigger("show:splash")
  };
  b.prototype.appendTo = function(a) {
    this.render();
    return this.$el.appendTo($(a))
  };
  return b
}();
acorn.player.main = {};
("undefined" !== typeof exports && null !== exports ? exports : this).acorn = acorn;
}).call(this);
